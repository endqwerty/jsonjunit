{
  "stats": {
    "suites": 78,
    "tests": 108,
    "passes": 35,
    "pending": 0,
    "failures": 2,
    "start": "2020-10-17T02:57:41.385Z",
    "end": "2020-10-17T02:57:41.385Z",
    "duration": 838202,
    "testsRegistered": 108,
    "passPercent": 32.407407407407405,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 71,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "2e190719-f397-43ee-a850-1ff8bb7f3085",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "1c56c6f3-3b3c-45bf-8207-6b82f622a9ae",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "237e5399-1438-4ced-9aac-9b5038c4011e",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "bea2716d-d3a9-49d2-9d74-8526ed335d5d",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "b91f3b69-23c5-4e41-ac9d-9effc4fc7cd2",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "97944638-5d7c-4e11-88fb-19f615bcb026",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "a535e640-6f3e-4674-b193-dfb61f06671a",
          "title": "Appointments -Verify adding an appointment for test patient and assigning it to a test provider also check the created appointment on calendar",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/appointments/create-appointment-and-check-on-calendar-spec.js",
          "file": "/e2e/sites/specs/appointments/create-appointment-and-check-on-calendar-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Appointments -Verify adding an appointment for test patient and assigning it to a test provider also check the created appointment on calendar \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return sitesAuthHelper.loginSites({}, true);",
              "err": {},
              "uuid": "4f814242-3d7c-4088-94c2-c65e52fecf45",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Appointments -Verify adding an appointment for test patient and assigning it to a test provider also check the created appointment on calendar \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await browser.refresh();\nawait sitesAppointmentHelper.appointmentPage();\nawait Helper.waitAndClick(appointments.agendaDay);\nawait Helper.waitAndClick(appointments.month);\nawait Helper.waitForElementToBeVisible(sitesAppointmentHelper.fetchAppointmentByFullPatientName(helperInstance));\nawait Helper.scrollToElement(sitesAppointmentHelper.fetchAppointmentByFullPatientName(helperInstance));\nawait sitesAppointmentHelper.deleteAppointment(appointments, helperInstance);\nreturn Helper.waitForElementToBeInvisible(sitesAppointmentHelper.fetchAppointmentByFullPatientName(helperInstance));",
              "err": {},
              "uuid": "8635ac40-ea7e-46a8-8acf-cdf4a7c3158c",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C374 & C1024963 - Verify adding an appointment for test patient and assigning it to a test provider also check the created appointment on calendar #smoke",
              "fullTitle": "Appointments -Verify adding an appointment for test patient and assigning it to a test provider also check the created appointment on calendar C374 & C1024963 - Verify adding an appointment for test patient and assigning it to a test provider also check the created appointment on calendar #smoke",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('add new Patient', this, async () => {\n  await sitesPatientHelper.addPatientPage();\n  await Helper.waitForElement(patients.firstNameCreateInput);\n  await sitesPatientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients\n  });\n  await sitesPatientHelper.submitNewPatient(patients);\n  return Helper.waitForElementToBeVisible(patients.patientName);\n});\nawait step('navigate to appointment page', this, () => {\n  return sitesAppointmentHelper.appointmentPage();\n});\nawait step('navigate to add appointment page', this, async () => {\n  await Helper.waitAndClick(appointments.addAppointmentBtn);\n  await Helper.waitForElementToBeClickable(appointments.patientDropdown);\n  expect(await browser.getCurrentUrl()).to.include(CONSTANTS.ROUTE.addAppointment);\n});\nawait step('adding appointment', this, async () => {\n  await sitesAppointmentHelper.newAppointmentRequiredFields(appointments, helperInstance);\n  await sitesAppointmentHelper.saveAppointment(appointments);\n  expect(await Helper.waitForElementToBeVisible(appointments.createdAppointmentMessage));\n  const messagePresent = await appointments.closeMessage.isPresent();\n  if (messagePresent) {\n    await Helper.waitForElementToBeInvisible(appointments.closeMessage);\n  }\n});\nawait step('verify created appointment is visible on calendar', this, async () => {\n  await Helper.waitAndClick(appointments.agendaDay);\n  await Helper.waitAndClick(appointments.month);\n  await Helper.waitForElementToBeVisible(appointments.monthViewCalendar);\n  await Helper.waitForElementToBeVisible(sitesAppointmentHelper.fetchFirstNameOfPatient(helperInstance));\n  expect(await Helper.scrollToElement(sitesAppointmentHelper.fetchFirstNameOfPatient(helperInstance)));\n});\nawait step('verify created appointment is assigned to respective Provider', this, async () => {\n  return sitesAppointmentHelper.verifyingAppointmentDetails(appointments, helperInstance);\n});",
              "err": {},
              "uuid": "07da0fa3-0818-4e38-98f8-8c6f72f34a17",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "07da0fa3-0818-4e38-98f8-8c6f72f34a17"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "4100c4dc-57f5-417a-9021-f202ebc817af",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "28c9d875-d861-48a8-8de4-4e7594f018de",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "5757f6ba-30d5-4b7d-a66c-78fb2e99b0bb",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "0e0cfcba-325c-4e77-88ba-9ac10a6c4175",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "474b17b8-cf26-4ba5-9817-e64ba0f4bc0d",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "4136ea94-14ac-4709-b207-05af0537523b",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "05760fa6-4609-4518-ae87-e02b5a5996d0",
          "title": " Verify editing an appointment for test patient via patient details screen",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/appointments/editing-appointment-from-patient-screen-spec.js",
          "file": "/e2e/sites/specs/appointments/editing-appointment-from-patient-screen-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": " Verify editing an appointment for test patient via patient details screen \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await sitesAuthHelper.loginSites();\nreturn sitesAuthHelper.loggedIn();",
              "err": {},
              "uuid": "0f4bd4c2-bc3c-4ede-9b57-f45bd3e8adbf",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": " Verify editing an appointment for test patient via patient details screen \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const messagePresent = await appointments.closeMessage.isPresent();\nif (messagePresent) {\n  await Helper.waitForElementToBeInvisible(appointments.closeMessage);\n}\nawait sitesAppointmentHelper.appointmentPage();\nawait Helper.waitAndClick(appointments.agendaDay);\nawait Helper.waitAndClick(appointments.month);\nawait Helper.waitForElementToBeVisible(sitesAppointmentHelper.fetchFirstNameOfPatient(helperInstance));\nawait Helper.scrollToElement(sitesAppointmentHelper.fetchFirstNameOfPatient(helperInstance));\nawait sitesAppointmentHelper.deleteAppointment(appointments, helperInstance);\nreturn Helper.waitForElementToBeInvisible(sitesAppointmentHelper.fetchFirstNameOfPatient(helperInstance));",
              "err": {},
              "uuid": "5fc55528-c29f-49f5-9d1f-7cd8f48958be",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C982337 - Verify editing an appointment for test patient via patient details screen #smoke",
              "fullTitle": " Verify editing an appointment for test patient via patient details screen C982337 - Verify editing an appointment for test patient via patient details screen #smoke",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('Navigate to Patient screen', this, async () => {\n  browser.waitForAngularEnabled(false);\n  return sitesPatientHelper.addPatientPage();\n});\nawait step('Add new Patient', this, async () => {\n  await Helper.waitForElement(patients.firstNameCreateInput);\n  await sitesPatientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients\n  });\n  return sitesPatientHelper.submitNewPatient(patients);\n});\nawait step('Navigate to appointment screen from patient detail', this, async () => {\n  await Helper.waitForElementToBeVisible(patients.createAppointment);\n  return Helper.clickVisibleElement(patients.createAppointment);\n});\nawait step('Create appointment', this, async () => {\n  await sitesAppointmentHelper.newAppointmentRequiredFields(appointments, helperInstance);\n  await sitesAppointmentHelper.saveAppointment(appointments);\n  return Helper.waitForElementToBeVisible(appointments.createdAppointmentMessage);\n});\nawait step('Navigate to patient screen and search for patient', this, async () => {\n  await sitesPatientHelper.patientSearchPage();\n  const firstName = await helperInstance.getSavedValues().find(Obj => Obj.id === 'firstName').value;\n  const lastName = await helperInstance.getSavedValues().find(Obj => Obj.id === 'lastName').value;\n  await Helper.waitForElementToBeClickable(patients.firstNameSearchInput);\n  await Helper.replaceInputValue(patients.firstNameSearchInput, '', firstName);\n  await Helper.replaceInputValue(patients.lastNameSearchInput, '', lastName);\n  return Helper.clickElement(patients.searchPatientSubmit);\n});\nawait step('Select searched patient', this, async () => {\n  await Helper.waitForElementToBeVisible(patients.searchPatientSelect);\n  return Helper.clickElement(patients.searchPatientSelect);\n});\nawait step('Edit appointment and make changes', this, async () => {\n  await Helper.waitForElementToBeVisible(patients.appointmentSidebar);\n  await Helper.waitForElementToBeClickable(patients.editAppointment);\n  await Helper.clickElement(patients.editAppointment);\n  return sitesAppointmentHelper.editAppointment(appointments);\n});",
              "err": {},
              "uuid": "8200d7dc-93f3-4137-b567-6e80a8a57d28",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "8200d7dc-93f3-4137-b567-6e80a8a57d28"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "5967960f-bd90-475e-ab06-45e4093ea077",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 120,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "2e236612-211a-4fa9-9d6b-bba27343e2e8",
          "parentUUID": "5967960f-bd90-475e-ab06-45e4093ea077",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "7d7c299f-3dff-4fbc-8082-973a68dbe74c",
          "parentUUID": "5967960f-bd90-475e-ab06-45e4093ea077",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "9ca3c71b-727b-48e8-9f7c-038a9ea12bfd",
          "parentUUID": "5967960f-bd90-475e-ab06-45e4093ea077",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "df586352-eb94-411d-a439-eebc314c048b",
          "parentUUID": "5967960f-bd90-475e-ab06-45e4093ea077",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "cc09ef94-7528-4aa5-94b6-2573257a689c",
          "parentUUID": "5967960f-bd90-475e-ab06-45e4093ea077",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "91b4b41c-9ddc-4408-b02c-35f407286025",
          "title": "Admin reject signup request",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/auth/admin-reject-signup-request-spec.js",
          "file": "/e2e/sites/specs/auth/admin-reject-signup-request-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C73873 - Verify admin user is able to reject sign up request #smoke #sanity #stable",
              "fullTitle": "Admin reject signup request C73873 - Verify admin user is able to reject sign up request #smoke #sanity #stable",
              "timedOut": false,
              "duration": 13469,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓should send sign up request\",\n  \"✓should login into sites\",\n  \"✓should logged in with existing user\",\n  \"✓should navigate to system settings page\",\n  \"✓should fetch and scroll to user signup request\",\n  \"✓should decline signup request and verify decline message is appearing\"\n]",
              "code": "let savedEmail;\nawait step('should send sign up request', this, async () => {\n  await authHelper.signUpSite(signUp, settings, helperInstance);\n  savedEmail = helperInstance.getSavedValues().find(val => val.id === CONSTANTS.EMAIL).value;\n  return Helper.waitAndClick(login.backToLogin);\n});\nawait step('should login into sites', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn(header);\n});\nawait step('should logged in with existing user', this, () => {\n  return Helper.waitForElementToBeVisible(dashboard.welcomeMessage);\n});\nawait step('should navigate to system settings page', this, () => {\n  return browser.get(`${config.site.url}#${CONSTANTS.ROUTE.settingsUsers}`);\n});\nawait step('should fetch and scroll to user signup request', this, async () => {\n  await Helper.waitForElementToBeVisible(signUp.requestUserRole(savedEmail));\n  return Helper.scrollToElement(signUp.requestUserRole(savedEmail));\n});\nawait step('should decline signup request and verify decline message is appearing', this, async () => {\n  await Helper.waitAndClick(signUp.userReject);\n  await Helper.waitForElementToBeVisible(signUp.declinedUser);\n  const declinedMessage = await signUp.declinedUser.getText();\n  expect(declinedMessage).to.include(CONSTANTS.ERROR_MESSAGE.declinedUserMessage);\n});",
              "err": {},
              "uuid": "4d44803d-284f-47bc-91ea-4963650cfbc9",
              "parentUUID": "91b4b41c-9ddc-4408-b02c-35f407286025",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4d44803d-284f-47bc-91ea-4963650cfbc9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13469,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "9e21babf-ee86-41f9-b913-b8df668ae503",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 118,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "44636b63-bf9e-4051-b8ff-b29081c654d5",
          "parentUUID": "9e21babf-ee86-41f9-b913-b8df668ae503",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "ff937278-d364-4e6a-99be-d848f81562fd",
          "parentUUID": "9e21babf-ee86-41f9-b913-b8df668ae503",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "5600afe9-a42d-49bc-9169-99b1c21149dc",
          "parentUUID": "9e21babf-ee86-41f9-b913-b8df668ae503",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "5d24635a-fb8a-41b3-9f6f-9fa69d2bc720",
          "parentUUID": "9e21babf-ee86-41f9-b913-b8df668ae503",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "5d3ac00f-4494-4333-aec9-ec901cfcfd27",
          "parentUUID": "9e21babf-ee86-41f9-b913-b8df668ae503",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "56260f27-5b38-461e-8722-74a48f19e8fc",
          "title": "Verify deleting an appointment from appointment calendar",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/appointments/verify-deleting-an-appointment-from-appointment-calendar-spec.js",
          "file": "/e2e/sites/specs/appointments/verify-deleting-an-appointment-from-appointment-calendar-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1024963- Verify deleting an appointment from appointment calendar #smoke #stable",
              "fullTitle": "Verify deleting an appointment from appointment calendar C1024963- Verify deleting an appointment from appointment calendar #smoke #stable",
              "timedOut": false,
              "duration": 28401,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓Should login on sites\",\n  \"✓Should navigate to Patient screen\",\n  \"✓Should add new Patient\",\n  \"✓Should navigate to appointment screen from patient detail\",\n  \"✓Should create an appointment\",\n  \"✓Should delete an appointment\"\n]",
              "code": "await step('Should login on sites', this, () => {\n  return sitesAuthHelper.loginSites({}, true);\n});\nawait step('Should navigate to Patient screen', this, () => {\n  return sitesPatientHelper.addPatientPage();\n});\nawait step('Should add new Patient', this, async () => {\n  await Helper.waitForElement(patients.firstNameCreateInput);\n  await sitesPatientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients\n  });\n  return sitesPatientHelper.submitNewPatient(patients);\n});\nawait step('Should navigate to appointment screen from patient detail', this, async () => {\n  await Helper.waitForElementToBeVisible(patients.createAppointment);\n  return Helper.clickVisibleElement(patients.createAppointment);\n});\nawait step('Should create an appointment', this, async () => {\n  await sitesAppointmentHelper.newAppointmentRequiredFields(appointments, helperInstance);\n  await sitesAppointmentHelper.saveAppointment(appointments);\n  return Helper.waitForElementToBeVisible(appointments.createdAppointmentMessage);\n});\nawait step('Should delete an appointment', this, async () => {\n  const messagePresent = await appointments.closeMessage.isPresent();\n  if (messagePresent) {\n    await Helper.waitForElementToBeInvisible(appointments.closeMessage);\n  }\n  await sitesAppointmentHelper.appointmentPage();\n  await Helper.waitAndClick(appointments.agendaDay);\n  await Helper.waitAndClick(appointments.month);\n  await Helper.waitForElementToBeVisible(sitesAppointmentHelper.fetchFirstNameOfPatient(helperInstance));\n  await Helper.scrollToElement(sitesAppointmentHelper.fetchFirstNameOfPatient(helperInstance));\n  await sitesAppointmentHelper.deleteAppointment(appointments, helperInstance);\n  await Helper.waitForElementToBeInvisible(sitesAppointmentHelper.fetchFirstNameOfPatient(helperInstance));\n});",
              "err": {},
              "uuid": "299ac2c0-5454-4b8d-9809-1836109c7fa9",
              "parentUUID": "56260f27-5b38-461e-8722-74a48f19e8fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "299ac2c0-5454-4b8d-9809-1836109c7fa9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28401,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "d9426314-35b3-4e10-89d2-d748ad111b4e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 120,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "0fb43067-b893-43db-bd6d-fe068355c7bd",
          "parentUUID": "d9426314-35b3-4e10-89d2-d748ad111b4e",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "ca7be0fb-4d8d-4734-9751-728ae92ba734",
          "parentUUID": "d9426314-35b3-4e10-89d2-d748ad111b4e",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "c81fe074-6fde-40f8-9f82-1dc589c9e5d6",
          "parentUUID": "d9426314-35b3-4e10-89d2-d748ad111b4e",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "76c4ad43-a7b7-48c1-93f6-e4a0c2e01a3b",
          "parentUUID": "d9426314-35b3-4e10-89d2-d748ad111b4e",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "88431b6a-de6f-4a54-9e2b-09ffdf207eb5",
          "parentUUID": "d9426314-35b3-4e10-89d2-d748ad111b4e",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "86ca1a53-02ef-47e8-ba29-cfccae29445b",
          "title": "Appointments - Verify editing and deleting an appointment on patient appointment calendar",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/appointments/editing-appointment-on-patient-appointment-calendar-spec.js",
          "file": "/e2e/sites/specs/appointments/editing-appointment-on-patient-appointment-calendar-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Appointments - Verify editing and deleting an appointment on patient appointment calendar \"before all\" hook: ret",
              "timedOut": false,
              "duration": 5550,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return sitesAuthHelper.loginSites({}, true);",
              "err": {},
              "uuid": "86192e2a-d6de-4708-a1f4-4ea2965edacb",
              "parentUUID": "86ca1a53-02ef-47e8-ba29-cfccae29445b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C982338 & C1024963 - Verify editing and deleting an appointment on patient appointment calendar #smoke #stable",
              "fullTitle": "Appointments - Verify editing and deleting an appointment on patient appointment calendar C982338 & C1024963 - Verify editing and deleting an appointment on patient appointment calendar #smoke #stable",
              "timedOut": false,
              "duration": 33118,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓add new Patient\",\n  \"✓navigate to appointment page\",\n  \"✓navigate to add appointment page\",\n  \"✓adding appointment\",\n  \"✓verify created appointment is visible on calendar\",\n  \"✓edit and save appointment\",\n  \"✓delete appointment\"\n]",
              "code": "await step('add new Patient', this, async () => {\n  await sitesPatientHelper.addPatientPage();\n  await Helper.waitForElement(patients.firstNameCreateInput);\n  await sitesPatientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients\n  });\n  await sitesPatientHelper.submitNewPatient(patients);\n  return Helper.waitForElementToBeVisible(patients.patientName);\n});\nawait step('navigate to appointment page', this, async () => {\n  await sitesAppointmentHelper.appointmentPage();\n  expect(await browser.getCurrentUrl()).to.include('/appointments');\n});\nawait step('navigate to add appointment page', this, async () => {\n  await Helper.waitForElementToBeVisible(appointments.patientAppointmentCalendarTitle);\n  await Helper.waitAndClick(appointments.addAppointmentBtn);\n  await Helper.waitForElementToBeClickable(appointments.patientDropdown);\n  expect(await browser.getCurrentUrl()).to.include(CONSTANTS.ROUTE.addAppointment);\n});\nawait step('adding appointment', this, async () => {\n  await sitesAppointmentHelper.newAppointmentRequiredFields(appointments, helperInstance);\n  await sitesAppointmentHelper.saveAppointment(appointments);\n  expect(await Helper.waitForElementToBeVisible(appointments.createdAppointmentMessage));\n  return Helper.waitForElementToBeInvisible(appointments.closeMessage);\n});\nawait step('verify created appointment is visible on calendar', this, async () => {\n  await Helper.waitAndClick(appointments.weekItem);\n  await Helper.waitAndClick(appointments.monthItem);\n  await Helper.waitForElementToBeVisible(appointments.monthViewCalendar);\n  await Helper.waitForElementToBeVisible(sitesAppointmentHelper.fetchAppointmentByFullPatientName(helperInstance));\n});\nawait step('edit and save appointment', this, async () => {\n  await Helper.waitForElementToBeVisible(sitesAppointmentHelper.fetchAppointmentByFullPatientName(helperInstance));\n  await Helper.scrollToElement(sitesAppointmentHelper.fetchAppointmentByFullPatientName(helperInstance));\n  await Helper.waitAndClick(sitesAppointmentHelper.fetchAppointmentByFullPatientName(helperInstance));\n  await Helper.waitForElementToBeVisible(appointments.deletionMessage);\n  await Helper.waitAndClick(appointments.editAppointment);\n  await sitesAppointmentHelper.editAppointment(appointments);\n});\nawait step('delete appointment', this, async () => {\n  const messagePresent = await appointments.closeMessage.isPresent();\n  if (messagePresent) {\n    await Helper.waitForElementToBeInvisible(appointments.closeMessage);\n  }\n  await sitesAppointmentHelper.appointmentPage();\n  await Helper.waitAndClick(appointments.agendaDay);\n  await Helper.waitAndClick(appointments.month);\n  await Helper.waitForElementToBeVisible(sitesAppointmentHelper.fetchAppointmentByFullPatientName(helperInstance));\n  await Helper.scrollToElement(sitesAppointmentHelper.fetchAppointmentByFullPatientName(helperInstance));\n  await sitesAppointmentHelper.deleteAppointment(appointments, helperInstance);\n  await Helper.waitForElementToBeInvisible(sitesAppointmentHelper.fetchAppointmentByFullPatientName(helperInstance));\n});",
              "err": {},
              "uuid": "383e7b2a-994d-4efb-85ea-923c4c0d4147",
              "parentUUID": "86ca1a53-02ef-47e8-ba29-cfccae29445b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "383e7b2a-994d-4efb-85ea-923c4c0d4147"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 33118,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "fa5d0489-ff3a-4d0e-a91b-0d90b0991e89",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "5893c730-fe58-4c9d-a566-ffa8f62a7ad1",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "cd295ea6-6efb-476a-a839-ed0e7e36b491",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "3ba79a67-9979-4edf-934c-e9b34c89c4b0",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "008dec3e-3044-4772-9701-9042be384444",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "d8e25010-dab8-4068-9ceb-108cca0e1599",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "44a0e8c9-f68b-4abf-9d8e-5d111a65476a",
          "title": "Signup from provider",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/auth/signup-provider-spec.js",
          "file": "/e2e/sites/specs/auth/signup-provider-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C908183 - Verify signup with new provider #smoke #sanity",
              "fullTitle": "Signup from provider C908183 - Verify signup with new provider #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('login', this, async () => {\n  await authHelper.sites();\n  return authHelper.setCodeAndSubmit();\n});\nawait step('Navigate to request new user screen', this, async () => {\n  await Helper.waitForUrlToChange(CONSTANTS.ROUTE.site);\n  await Helper.waitAndClick(login.signupBtn);\n  return Helper.waitForUrlToHave(CONSTANTS.ROUTE.requestNewUser);\n});\nawait step('Entering firstname, lastname and email', this, async () => {\n  const input = {}; // TODO: BW-21219 clean up the form inputs\n  await Helper.waitAndClick(signUp.firstName);\n  await Helper.replaceInputValue(signUp.firstName, '', input.firstName || chance.first());\n  await Helper.waitAndClick(signUp.lastName);\n  await Helper.replaceInputValue(signUp.lastName, '', input.lastName || chance.last());\n  await Helper.waitAndClick(signUp.email);\n  return helperInstance.replaceInputAndSaveValue(settings.email, '', input.email || Helper.generateEmail(CONSTANTS.EMAIL_DOMAIN, config.site.login.gmailUsername));\n});\nawait step('Request access', this, async () => {\n  await Helper.waitAndClick(signUp.requestAccessBtn);\n  return Helper.waitAndClick(signUp.backToLogin);\n});\nawait step('Login into sites', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('should navigate to settings page ', this, () => {\n  return browser.get(`${config.site.url}#${CONSTANTS.ROUTE.settingsUsers}`);\n});\nawait step('should select user role', this, async () => {\n  savedEmail = await helperInstance.getSavedValues().find(Obj => Obj.id === 'email').value;\n  await Helper.waitForUrlToHave(CONSTANTS.ROUTE.settingsUsers);\n  await Helper.waitForElementToBeVisible(signUp.profileTable);\n  await Helper.scrollToElement(signUp.newUserRequest);\n  await Helper.waitAndClick(signUp.roleSelectionDropdown);\n  await Helper.scrollToElement(signUp.rolesOptionProvider);\n  return Helper.waitAndClick(signUp.rolesOptionProvider);\n});\nawait step('Approve and send email to approved user', this, async () => {\n  await Helper.waitAndClick(signUp.userApprove);\n  return Helper.waitForElementToBeVisible(signUp.resendEmail);\n});\nawait step('Join site', this, async () => {\n  savedEmail = await helperInstance.getSavedValues().find(Obj => Obj.id === 'email').value;\n  await settingsHelper.joinSite(settings, helperInstance, {\n    user: savedEmail\n  });\n  return Helper.waitForUrlToHave(CONSTANTS.ROUTE.profile);\n});\nawait step('Assert new user on profile page', this, async () => {\n  await Helper.waitForElementToBeVisible(profileGeneral.profileAndAccount);\n  await Helper.waitForElementToBeVisible(signUp.email);\n  const newUserEmail = await signUp.email.getAttribute('value');\n  expect(savedEmail).to.equal(newUserEmail);\n});",
              "err": {},
              "uuid": "8b19b532-76db-4787-9abc-f8dd22fe59d1",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "8b19b532-76db-4787-9abc-f8dd22fe59d1"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "3809b330-35d0-4307-b5ec-87a0d870ab6a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 118,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "080828f2-6b7c-491f-b5c4-95d1ccba3c97",
          "parentUUID": "3809b330-35d0-4307-b5ec-87a0d870ab6a",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "a2bac750-3f38-4dab-8195-cf70861e4e43",
          "parentUUID": "3809b330-35d0-4307-b5ec-87a0d870ab6a",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "728b7450-f353-47f7-9f18-c1a270436d75",
          "parentUUID": "3809b330-35d0-4307-b5ec-87a0d870ab6a",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "b6bdefb8-0d09-4daf-976c-31ccfde62cda",
          "parentUUID": "3809b330-35d0-4307-b5ec-87a0d870ab6a",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "65561585-e10d-40d4-bdb7-3f0c70c4cddd",
          "parentUUID": "3809b330-35d0-4307-b5ec-87a0d870ab6a",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "e48c0b3a-1af7-4c9b-bf0d-3c8d5f242612",
          "title": "SignUp page",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/auth/signup-spec.js",
          "file": "/e2e/sites/specs/auth/signup-spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook: ret",
              "fullTitle": "SignUp page \"before each\" hook: ret",
              "timedOut": false,
              "duration": 2050,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return authHelper.setCodeAndSubmit();",
              "err": {},
              "uuid": "bf252aa4-6dc7-4df0-84d4-f00efed5d5ba",
              "parentUUID": "e48c0b3a-1af7-4c9b-bf0d-3c8d5f242612",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C908184 - Verify signup with user which already existing in system throw error \"Unable to register. Please contact your local IT Administrator #smoke #sanity #stable",
              "fullTitle": "SignUp page C908184 - Verify signup with user which already existing in system throw error \"Unable to register. Please contact your local IT Administrator #smoke #sanity #stable",
              "timedOut": false,
              "duration": 1940,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"✓Verify Signup with existing email show proper message (should throw an error)\"",
              "code": "await step('Verify Signup with existing email show proper message (should throw an error)', this, async () => {\n  await Helper.waitForElementToBeVisible(login.signupBtn);\n  const chooseLogin = await browser.getCurrentUrl();\n  if (chooseLogin.includes(CONSTANTS.ROUTE.chooseLogin)) {\n    await Helper.waitForElementToBeVisible(login.signupBtn);\n    await Helper.clickElement(login.signupBtn);\n  }\n  await Helper.waitForElementToBeVisible(signUp.email);\n  await Helper.waitForElementToBeVisible(signUp.firstName);\n  await Helper.waitForElementToBeVisible(signUp.lastName);\n  await Helper.replaceInputValue(signUp.firstName, '', chance.name());\n  await Helper.replaceInputValue(signUp.lastName, '', chance.name());\n  await Helper.replaceInputValue(signUp.email, '', config.site.login.user);\n  await Helper.waitForElementToBeVisible(signUp.requestAccess);\n  await Helper.clickElement(signUp.requestAccess);\n  await Helper.waitForElementToBeVisible(signUp.emailErrorMsg);\n  expect(await signUp.emailErrorMsg.getText()).to.include(CONSTANTS.ERROR_MESSAGE.unableToRegister);\n});",
              "err": {},
              "uuid": "f8caaee6-c32a-4674-a88e-6ca0e2612b9f",
              "parentUUID": "e48c0b3a-1af7-4c9b-bf0d-3c8d5f242612",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C1834152 - Verify Signup with new email #smoke #sanity #stable",
              "fullTitle": "SignUp page C1834152 - Verify Signup with new email #smoke #sanity #stable",
              "timedOut": false,
              "duration": 2319,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"✓Verify Signup with new email\"",
              "code": "await step('Verify Signup with new email', this, async () => {\n  const firstName = chance.name();\n  const lastName = chance.name();\n  const url = await browser.getCurrentUrl();\n  if (url.includes(CONSTANTS.ROUTE.chooseLogin)) {\n    await Helper.waitForElementToBeVisible(login.signupBtn);\n    await Helper.clickElement(login.signupBtn);\n  }\n  if (url.includes(CONSTANTS.ROUTE.requestNewUser)) {\n    await Helper.waitForElementToBeVisible(signUp.email);\n    await Helper.waitForElementToBeVisible(signUp.firstName);\n    await Helper.waitForElementToBeVisible(signUp.lastName);\n  }\n  await helperInstance.replaceInputAndSaveValue(signUp.firstName, '', firstName);\n  await helperInstance.replaceInputAndSaveValue(signUp.lastName, '', lastName);\n  await helperInstance.replaceInputAndSaveValue(signUp.email, '', chance.email());\n  await Helper.waitForElementToBeVisible(signUp.requestAccess);\n  await Helper.clickElement(signUp.requestAccess);\n  expect(await Helper.waitForUrlToHave(CONSTANTS.ROUTE.requestNewUserSent)).to.be.true;\n});",
              "err": {},
              "uuid": "026e88c6-24ca-4e07-a6d1-da3c3c14579e",
              "parentUUID": "e48c0b3a-1af7-4c9b-bf0d-3c8d5f242612",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f8caaee6-c32a-4674-a88e-6ca0e2612b9f",
            "026e88c6-24ca-4e07-a6d1-da3c3c14579e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4259,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "90880e3c-5dc0-42d4-871c-ad29c1c227a9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "80b45ce9-77db-45bf-a19e-f4ce39517b82",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "23eb47b4-bfbe-41f0-b632-4fb58f90d9bf",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "afc00416-733f-4456-82c9-154c95ca6d0d",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "70b8a0f4-fe13-4c8d-baef-90e4147a4496",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "7e4a6132-0bfe-416f-89a6-7d012c88e9ba",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "602c4ed6-7e3b-4140-9144-7c0fdfe81bc4",
          "title": "SSO login",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/auth/sso-login-spec.js",
          "file": "/e2e/sites/specs/auth/sso-login-spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "SSO login \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// clear sso login allowed group field.\nawait enterpriseAuthHelper.loginEnterprise();\nawait settingsHelper.selectDesiredClinicalPortal();\nawait Helper.waitAndClick(settings.securityTab);\nawait helperInstance.replaceInputAndSaveValue(settings.ssoAllowedGroups, '', '');\nawait Helper.waitAndClick(settings.buttonSubmit);\nreturn Helper.waitAndClick(settings.modalConfirm);",
              "err": {},
              "uuid": "65ca7645-9f91-4979-a1cc-861eb80e465a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C780038 - Verify if AD groups and allowed groups miss match, SSO login should not work #smoke #sanity #envstable",
              "fullTitle": "SSO login C780038 - Verify if AD groups and allowed groups miss match, SSO login should not work #smoke #sanity #envstable",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('enterprise login', this, () => enterpriseAuthHelper.loginEnterprise());\nawait step('should login on enterprise successfully', this, async () => {\n  expect(await enterprise.pageTitle.isPresent()).to.be.true;\n});\nawait step('Should select any desired clinical portal', this, async () => settingsHelper.selectDesiredClinicalPortal());\nawait step('should enable SSO if not already enabled', this, async () => settingsHelper.enableSSOIfNotEnabled(helperInstance));\nawait step('should try to login using single sign on option', this, async () => ssoHelper.loginSSO(helperInstance));\nawait step('should display error message on sso login fail', this, async () => {\n  await Helper.waitForUrlToHave(CONSTANTS.SSO.ssoLoginForbiddenUrl);\n  await Helper.waitForElementToBeVisible(login.ssoLoginFailMsg);\n  expect(await login.ssoLoginFailMsg.getText()).to.include(CONSTANTS.SSO.ssoLoginFailMessage);\n});\nawait step('should login on enterprise successfully', this, async () => {\n  await enterpriseAuthHelper.loginEnterprise();\n  await Helper.waitForElementToBeVisible(enterprise.pageTitle);\n  expect(await enterprise.pageTitle.getText()).to.include(CONSTANTS.DASHBOARD.welcome);\n});\nawait step('should disable local logins for SSO users if not disabled already', this, async () => settingsHelper.disableLocalLoginForSSOUsers());\nawait step('SSO user should not be able to log in directly on portal and should see an error page', this, async () => {\n  await ssoHelper.localLoginWithSSOCreds();\n  await Helper.waitForUrlToHave(CONSTANTS.ROUTE.secureLoginRequired);\n});",
              "err": {},
              "uuid": "ffcbe60e-8d6e-4ce9-aa01-b140a663c293",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "ffcbe60e-8d6e-4ce9-aa01-b140a663c293"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "c49ec3ef-d7e4-4a0a-af38-469d87c47879",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 117,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "767409e7-47d4-4a24-bfa9-2b59dba0072e",
          "parentUUID": "c49ec3ef-d7e4-4a0a-af38-469d87c47879",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "abda82b1-4277-487f-aaf0-9812cb0c3e1f",
          "parentUUID": "c49ec3ef-d7e4-4a0a-af38-469d87c47879",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "bade3d4c-2fcf-4b79-ac5f-04314189b2be",
          "parentUUID": "c49ec3ef-d7e4-4a0a-af38-469d87c47879",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "1da91434-8be6-4849-8dc0-ffd53a1fcac5",
          "parentUUID": "c49ec3ef-d7e4-4a0a-af38-469d87c47879",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "98fa6cf1-1b69-4c0b-bc6a-01d7a06eaf13",
          "parentUUID": "c49ec3ef-d7e4-4a0a-af38-469d87c47879",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "89fb1a27-5b50-4a06-83b6-53ffc4500b4f",
          "title": "Account lock error message",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/auth/account-lock-error-message-spec.js",
          "file": "/e2e/sites/specs/auth/account-lock-error-message-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C341 - Verify account lock error message is appearing for valid user when no of try extends 3 or 5 #smoke #sanity #stable",
              "fullTitle": "Account lock error message C341 - Verify account lock error message is appearing for valid user when no of try extends 3 or 5 #smoke #sanity #stable",
              "timedOut": false,
              "duration": 70865,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓login\",\n  \"✓Invite user and join with newly created user\",\n  \"✓Login with invalid credentials\"\n]",
              "code": "let savedEmail;\nawait step('login', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('Invite user and join with newly created user', this, async () => {\n  await settingsHelper.inviteUserSettings(settings, helperInstance);\n  await settingsHelper.submitSettings(settings);\n  const savedValues = helperInstance.getSavedValues();\n  savedEmail = savedValues.find(Obj => Obj.id === 'email').value;\n  await settingsHelper.joinSite(settings, helperInstance, {\n    user: savedEmail\n  }); // sometimes in automation mode the browser freezes the logout dropdown, but refresh helps\n  // happens only in automation mode\n  await browser.refresh();\n  return authHelper.logout(header);\n});\nawait step('Login with invalid credentials', this, async () => {\n  // the account lock error occurs on 5th attempt.\n  // first attempt.\n  await authHelper.loginSites({\n    user: savedEmail,\n    password: config.site.login.invalidPassword\n  });\n  await Helper.waitForElementToBeVisible(login.invalidEmailErrorMsg);\n  expect(await login.invalidEmailErrorMsg.getText()).to.include(CONSTANTS.AUTH.loginError);\n  /* eslint-disable no-await-in-loop */\n  // 2-4 attempts.\n  for (let i = 0; i < 3; i += 1) {\n    await Helper.replaceInputValue(login.password, '', config.site.login.invalidPassword);\n    await Helper.clickElement(login.loginBtn);\n    await Helper.waitForElementToBeVisible(login.invalidEmailErrorMsg);\n    expect(await login.invalidEmailErrorMsg.getText()).to.include(CONSTANTS.AUTH.loginError);\n  } // fifth attempt.\n\n  await Helper.replaceInputValue(login.password, '', config.site.login.invalidPassword);\n  await Helper.clickElement(login.loginBtn);\n  await Helper.waitForElementToBeVisible(login.invalidLockedMsg); // account is locked now.\n  const accountLocked = await login.invalidEmailErrorMsg.getText();\n  expect(accountLocked).to.include(CONSTANTS.AUTH.accountLocked);\n});",
              "err": {},
              "uuid": "d1c80b86-db20-4f32-94ce-5a5ee8a65d0a",
              "parentUUID": "89fb1a27-5b50-4a06-83b6-53ffc4500b4f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d1c80b86-db20-4f32-94ce-5a5ee8a65d0a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 70865,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "c0aa0ec0-adec-47be-92d6-939d01c587ce",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 122,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "3994d7bd-40e6-4d51-9783-4799b680765d",
          "parentUUID": "c0aa0ec0-adec-47be-92d6-939d01c587ce",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "67bd9f23-db5d-41f3-ad2e-be5e7f61f64d",
          "parentUUID": "c0aa0ec0-adec-47be-92d6-939d01c587ce",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "428e8a4b-f350-4df5-97d7-8fb3987ccef5",
          "parentUUID": "c0aa0ec0-adec-47be-92d6-939d01c587ce",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "8a401488-861b-4052-b51b-904300fedad9",
          "parentUUID": "c0aa0ec0-adec-47be-92d6-939d01c587ce",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "7af7d9f7-b5ae-47b0-8a7d-c7c85dbb4b51",
          "parentUUID": "c0aa0ec0-adec-47be-92d6-939d01c587ce",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "8b0c792f-bec4-41b9-bfc0-4d116e489203",
          "title": "forget and change password",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/auth/forget-and-change-password-flow-spec.js",
          "file": "/e2e/sites/specs/auth/forget-and-change-password-flow-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C345 - Verify change password flow along with password rules as defined in system and user should able to login with new creds. #smoke #sanity #stable",
              "fullTitle": "forget and change password C345 - Verify change password flow along with password rules as defined in system and user should able to login with new creds. #smoke #sanity #stable",
              "timedOut": false,
              "duration": 68023,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓login\",\n  \"✓should invite a new user\",\n  \"✓should join site for new user\",\n  \"✓should change user password\",\n  \"✓should assert password is changed\",\n  \"✓should login with new password\"\n]",
              "code": "await step('login', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn(header);\n});\nawait step('should invite a new user', this, async () => {\n  await settingsHelper.inviteUserSettings(settings, helperInstance);\n  return settingsHelper.submitSettings(settings);\n});\nawait step('should join site for new user', this, async () => {\n  savedEmail = helperInstance.getSavedValues().find(obj => obj.id === 'email').value; // TODO: BW-22249 Investigage why id can be null\n  await settingsHelper.joinSite(settings, helperInstance, {\n    user: savedEmail\n  });\n});\nawait step('should change user password', this, async () => {\n  await profileHelper.changePassword(profilePassword, {\n    password: config.site.login.password,\n    new_password: config.site.login.new_password,\n    confirm_password: config.site.login.confirm_password\n  });\n  return profileHelper.submitProfilePassword(profilePassword);\n});\nawait step('should assert password is changed', this, async () => {\n  await Helper.waitForElementToBeVisible(profilePassword.toastText);\n  expect(await profilePassword.toastText.getText()).to.include(CONSTANTS.PASSWORD_UPDATE_MESSAGE);\n});\nawait step('should login with new password', this, async () => {\n  await authHelper.loginSites({\n    user: savedEmail,\n    password: config.site.login.new_password\n  });\n  await Helper.waitForElementToBeVisible(dashboard.welcomeMessage);\n  expect(await dashboard.welcomeMessage.getText()).to.include(CONSTANTS.DASHBOARD.welcome);\n});",
              "err": {},
              "uuid": "ff94f420-7393-419c-ae11-9c007427624d",
              "parentUUID": "8b0c792f-bec4-41b9-bfc0-4d116e489203",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ff94f420-7393-419c-ae11-9c007427624d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 68023,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "f8d997fa-14ea-4e30-9a09-878dadb61c5b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "533c3969-f94c-468f-a924-eca0eb762d29",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "a7f1a8eb-4d70-4c0c-be13-1594ff0e6132",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "97c2ac9e-0365-44d9-ac54-2d6cc364313e",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "18a7314a-28bc-4c03-9994-045f9fee1107",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "a5506001-8ed7-4f44-b5f7-b251201e1a74",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "c41444ce-2f0a-4b09-bb30-c55c8fde3839",
          "title": "Verify user is able to print my calendar schedules entries in month view",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/calendar/my-calendar-spec.js",
          "file": "/e2e/sites/specs/calendar/my-calendar-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify user is able to print my calendar schedules entries in month view \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "1dd2ca7e-578a-419d-96e8-b81ac7bd0d92",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C950603 -  Calendar - Verify user is able to print my calendar schedules entries in month view #smoke #sanity",
              "fullTitle": "Verify user is able to print my calendar schedules entries in month view C950603 -  Calendar - Verify user is able to print my calendar schedules entries in month view #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should navigate to calendar tab', this, async () => {\n  await helper.waitAndClick(myCalendar.calendarDropdown);\n  await helper.waitAndClick(myCalendar.myCalendarOption);\n  await helper.waitAndClick(myCalendar.buttonsDayView);\n  await helper.waitAndClick(myCalendar.monthItem);\n  await helper.waitAndClick(myCalendar.printBtn);\n  await helper.waitAndClick(myCalendar.printModalBtn);\n  const browsers = await helper.waitForWindowsToEqual(3, 5);\n  await browser.driver.switchTo().window(browsers[2]);\n  await browser.driver.close();\n  await browser.driver.switchTo().window(browsers[0]);\n  await helper.waitForElementToBeVisible(myCalendar.calendarModalHeading);\n  expect(await myCalendar.calendarModalHeading.getText()).to.equal(CONSTANTS.CALENDAR_PRINT_VISIBLITY);\n});",
              "err": {},
              "uuid": "ba9034af-eac1-4727-b4b1-d78c9dc77793",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "ba9034af-eac1-4727-b4b1-d78c9dc77793"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "83202a0f-eb20-4bf3-b0d8-0629bf98ae1d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "96dc803c-dbae-438a-aa9e-929b76500851",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "16a38d37-9410-47bb-8dab-7cfad46074a4",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "67963914-79e8-497e-98c2-6d3b6147bdd2",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "cdab710c-3fa1-410f-b8fc-bf195e813ae7",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "65732f40-23c1-4e7b-9d8b-d3ab5201fece",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "70112876-a3c3-4426-bbb3-67682beeb6d9",
          "title": "reassign a case to a different user",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/assign-case-to-different-user-spec.js",
          "file": "/e2e/sites/specs/cases/assign-case-to-different-user-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "reassign a case to a different user \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "295df4e4-5cf1-467a-9689-e31a59692cd7",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C981 - Verify assigning a case to provider #regression",
              "fullTitle": "reassign a case to a different user C981 - Verify assigning a case to provider #regression",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('Create a new case', this, async () => {\n  await caseHelper.createCase(createCase.clinicalModule, createCase.facility);\n  return helper.waitForElement(caseDetail.videoMessagePane);\n});\nawait step('should assign a user', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetail.assignToOther);\n  await helper.clickElement(caseDetail.assignToOther);\n  await helper.waitAndClick(caseDetail.superPickerUser1);\n  chosenSuperPickerUser = await caseDetail.superPickerChosenUser.getText();\n  await helper.waitForElementToBeVisible(caseDetail.selectButton);\n  await helper.clickElement(caseDetail.selectButton);\n});\nawait step('should go to case details and verify', this, async () => {\n  await helper.waitForUrlToHave(CONSTANTS.ROUTE.caseDetail);\n  await helper.waitForElementToBeVisible(caseDetail.assignedTo);\n  await caseDetail.assignedTo.getText();\n  await (user => {\n    expect(chosenSuperPickerUser).to.include.any.string(user);\n  });\n});",
              "err": {},
              "uuid": "443918d6-4db5-4398-a995-98079dc56108",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "443918d6-4db5-4398-a995-98079dc56108"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "bbc7a829-c1da-4a5c-a3dd-a87bbb650e22",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "ea2710be-b244-42c1-9a16-99d2c7ebc8d9",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "d567c574-8a34-4089-bdaf-4270e97c225f",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "57a1d97d-c0c5-4cc2-847e-856004b72458",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "48bcd8d9-558d-4bb2-a245-1d50abb1dc07",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "72cf6a8b-871a-48c8-93bf-15914aca1311",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "e483a8c4-95c5-4f1d-bcb1-dc53d22cdef6",
          "title": "Verify attachements on Clinial Portal are allowed / not allowed when check is Disabled / Enabled from settings",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/attachments-spec.js",
          "file": "/e2e/sites/specs/cases/attachments-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify attachements on Clinial Portal are allowed / not allowed when check is Disabled / Enabled from settings \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return enterpriseAuthHelper.loginEnterprise();",
              "err": {},
              "uuid": "8e024d36-74ee-4375-9fbf-275df034fa94",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook: ret",
              "fullTitle": "Verify attachements on Clinial Portal are allowed / not allowed when check is Disabled / Enabled from settings \"after each\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return caseHelper.cancelCase();",
              "err": {},
              "uuid": "02dfe095-3583-4c76-8130-f500f6eb4dea",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C383 - Verify attachements on Clinial Portal are allowed when check is Disabled from settings. #smoke #sanity",
              "fullTitle": "Verify attachements on Clinial Portal are allowed / not allowed when check is Disabled / Enabled from settings C383 - Verify attachements on Clinial Portal are allowed when check is Disabled from settings. #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should login on enterprise successfully', this, async () => {\n  await helper.waitForElementToBeVisible(enterprise.pageTitle);\n  expect(await enterprise.pageTitle.getText()).to.include(CONSTANTS.DASHBOARD.welcome);\n});\nawait step('should uncheck hidden attachments checkbox if already checked', this, async () => {\n  await attachmentHelper.toggleHideAttachmentCheckbox();\n  const isHideAttachmentsSelected = await enterprise.hideAttachmentsCheckbox.isPresent();\n  if (isHideAttachmentsSelected) {\n    await attachmentHelper.saveHideAttachmentChanges();\n  }\n  expect(await enterprise.hideAttachmentsCheckbox.isPresent()).to.equal(false);\n});\nawait step('should login on sites and create a case', this, async () => {\n  await sitesAuthHelper.loginSites();\n  await helper.waitForElementToBeVisible(sitesAttachments.sitesWelcomeScreen);\n  return caseHelper.createCase(createCase.clinicalCardiology, createCase.facility);\n});\nawait step('should verify attachments section is visible on case details', this, async () => {\n  await helper.waitAndClick(sitesAttachments.attachmentsNavIcon);\n  await helper.waitForElementToBeVisible(sitesAttachments.attachmentThumbnail);\n  expect(await sitesAttachments.attachmentThumbnail.getText()).to.equal(CONSTANTS.UPLOAD);\n});",
              "err": {},
              "uuid": "f04d1f34-4a9f-4191-ba80-afac232c1684",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "C384 - Verify attachements on Clinial Portal are not allowed when check is Enabled from settings. #smoke #sanity",
              "fullTitle": "Verify attachements on Clinial Portal are allowed / not allowed when check is Disabled / Enabled from settings C384 - Verify attachements on Clinial Portal are not allowed when check is Enabled from settings. #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should login on enterprise successfully', this, async () => {\n  await enterpriseAuthHelper.loginEnterprise();\n  await helper.waitForElementToBeVisible(enterprise.pageTitle);\n  expect(await enterprise.pageTitle.getText()).to.include(CONSTANTS.DASHBOARD.welcome);\n});\nawait step('should check-mark hidden attachments checkbox if unchecked', this, async () => {\n  await attachmentHelper.toggleHideAttachmentCheckbox();\n  const isHideAttachmentsSelected = await enterprise.hideAttachmentsCheckbox.isPresent();\n  if (!isHideAttachmentsSelected) {\n    await attachmentHelper.saveHideAttachmentChanges();\n  }\n  expect(await enterprise.hideAttachmentsCheckbox.isPresent()).to.equal(true);\n});\nawait step('should login on sites and create a case', this, async () => {\n  await sitesAuthHelper.loginSites();\n  await helper.waitForElementToBeVisible(sitesAttachments.sitesWelcomeScreen);\n  return caseHelper.createCase(createCase.clinicalCardiology, createCase.facility);\n});\nawait step('should assign the case', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetails.assignToMeButton);\n  await helper.clickElement(caseDetails.assignToMeButton);\n});\nawait step('should verify attachments in navbar section is not visible on case details', this, async () => {\n  await helper.waitForElementToBeInvisible(sitesAttachments.attachmentsNavIcon);\n  expect(await sitesAttachments.attachmentsNavIcon.isPresent()).to.equal(false);\n});",
              "err": {},
              "uuid": "316b8a4e-3a2e-40d7-8bc9-b7a55384bbeb",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "f04d1f34-4a9f-4191-ba80-afac232c1684",
            "316b8a4e-3a2e-40d7-8bc9-b7a55384bbeb"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "6b765c45-9763-466d-b687-f2046df48229",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "bede04d8-61a6-4a5d-9bca-c33f270ca093",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "6c702e31-f40b-4f1b-8e96-4ef344a79000",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "514e93ca-05e0-49ef-9334-7ad15b01d90c",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "26776737-d220-4e7b-8dd3-5d2229fe5caf",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "e52aaff5-b831-4eb3-a700-0dd34d8d4cc8",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "33645d85-c0de-4fda-9545-0702fe7a46c4",
          "title": "Verify if any case form is deactivated at enterprise level, it should not appear in forms list",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/case-form-disabling-spec.js",
          "file": "/e2e/sites/specs/cases/case-form-disabling-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify if any case form is deactivated at enterprise level, it should not appear in forms list \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return enterpriseAuthHelper.loginEnterprise();",
              "err": {},
              "uuid": "a929c543-b616-48e5-bde6-e44f2bd4303b",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Verify if any case form is deactivated at enterprise level, it should not appear in forms list \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return caseHelper.cancelCase();",
              "err": {},
              "uuid": "1ef1bd97-3fe5-453e-b5e3-9f94c92108b0",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C780049 - Verify if any case form is deactivated at enterprise level, it should not appear in forms list #smoke #sanity",
              "fullTitle": "Verify if any case form is deactivated at enterprise level, it should not appear in forms list C780049 - Verify if any case form is deactivated at enterprise level, it should not appear in forms list #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should login on enterprise successfully', this, async () => {\n  await Helper.waitForElementToBeVisible(enterprise.pageTitle);\n  expect(await enterprise.pageTitle.getText()).to.includes(CONSTANTS.DASHBOARD.welcome);\n});\nawait step('should navigate and select desired workflow', this, async () => {\n  await caseFormHelper.navigateToWorkflow();\n  return Helper.waitAndClick(enterprise.workflow);\n});\nawait step('should add desired case form if not exists', this, () => {\n  return caseFormHelper.addFormIfNotExist(enterprise.patientNoteCaseForm, enterprise.patientNoteFormOption, helperInstance);\n});\nawait step('should disabled any desired case form if enabled', this, () => {\n  return caseFormHelper.disableCaseForm(enterprise.patientNoteCaseForm);\n});\nawait step('should login on sites successfully', this, () => {\n  return sitesAuthHelper.loginSites({}, true);\n});\nawait step('should create a case', this, () => {\n  return caseHelper.createCase(createCase.clinicalCardiology, createCase.facility);\n});\nawait step('should verify that disabled case form is not visible on case details page', this, async () => {\n  await Helper.waitForElementToBeVisible(caseForm.caseDetailNavList);\n  expect(await caseForm.caseDetailNavListItem.isPresent()).to.equal(false);\n});",
              "err": {},
              "uuid": "a131aaa7-057c-40ad-8cd6-9a2fa934a0c5",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "a131aaa7-057c-40ad-8cd6-9a2fa934a0c5"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "a8c14d51-f89d-4b73-b53d-b9e3511130fc",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "de01d1f6-248d-469d-9655-f616ae6a4244",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "253dedcc-4915-4d98-bc64-884daf888829",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "6278b46a-55f4-4beb-a3e6-cd23112b92e5",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "20b0d3d2-4bee-464f-9b6d-e0469e873d93",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "8b4b1ca9-2858-4f13-b182-0ed1e98ff3c6",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "d6fd59f1-ed7c-4bea-a549-52b11f4d7f98",
          "title": "Add imaging form if not exist on any selected service line",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/case-imaging-form-spec.js",
          "file": "/e2e/sites/specs/cases/case-imaging-form-spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Add imaging form if not exist on any selected service line \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return caseHelper.cancelCase();",
              "err": {},
              "uuid": "63ae7423-2c41-4ce9-9390-c1084dc98936",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C388 - add imaging form if not exist on any selected service line #sanity #smoke",
              "fullTitle": "Add imaging form if not exist on any selected service line C388 - add imaging form if not exist on any selected service line #sanity #smoke",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should login on enterprise successfully', this, async () => {\n  await enterpriseAuthHelper.loginEnterprise();\n  await Helper.waitForElementToBeVisible(enterprise.pageTitle);\n});\nawait step('should add imaging form case if not already added on any specific workflow', this, async () => {\n  return imagingFormHelper.addImagingFormIfNotExist(helperInstance);\n});\nawait step('should disable fuzzy match checkbox if enabled', this, async () => {\n  await imagingFormHelper.ambraSettingsPage();\n  return imagingFormHelper.deSelectFuzzyMatchIfSelected();\n});\nawait step('should login on sites successfully', this, async () => {\n  return sitesAuthHelper.loginSites({}, true);\n});\nawait step('should create a patient', this, async () => {\n  await imagingFormHelper.createPatient(helperInstance);\n  await Helper.waitForElementToBeVisible(patients.patientDetailsDemographicsHeading);\n  await Helper.waitForElementToBeClickable(patients.patientDetailsDemographicsEditFormButton);\n  await Helper.anyTextToBePresentInElement(patients.patientFileDemographicsName);\n  await Helper.anyTextToBePresentInElement(patients.patientName);\n  const patientName = await patientHelper.getSavedPatientFullName(helperInstance);\n  expect(await patients.patientName.getText()).to.equal(patientName);\n});\nawait step('should create a case', this, async () => {\n  const patient = await patientHelper.getPatientFirstAndLastName(helperInstance);\n  const caseObj = caseBuilder.setClinicalModulePosition(1, createCase.clinicalCardiology).setClinicalModuleElm(createCase.clinicalCardiology).setFacilityModulePosition(1).setFacilityModuleElm(createCase.facility);\n  caseObj.searchNewlyCreatedPatient = true;\n  caseObj.patientName = patient;\n  await createCaseHelper.addEditCase(caseObj);\n  await createCaseHelper.submitNewCase();\n  await Helper.waitForElementToBeVisible(caseDetail.patientName);\n  expect(await caseDetail.patientName).to.exist;\n});\nawait step('should check in imaging form and display message if patient does not have MRN', this, async () => {\n  await Helper.waitForElementToBeVisible(caseDetail.patientName);\n  await imagingFormHelper.displayMRNErrorMessage();\n  expect(await caseForm.swalContent.getText()).to.includes(CONSTANTS.ERROR_MESSAGE.mrnNotExist);\n  return Helper.waitAndClick(caseForm.modalConfirm);\n});",
              "err": {},
              "uuid": "db10734c-36b9-4d5c-91c6-34f2e18f1918",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "db10734c-36b9-4d5c-91c6-34f2e18f1918"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "db639121-5716-45f1-b1bc-e0e826a23707",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "4f5f098e-4b5c-43ac-82e0-a1361c124113",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "6c62ac3c-f408-4a7d-81fb-83266aee31b3",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "22ea168b-d36b-42fb-b1eb-b49aee14a578",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "bce87701-acf6-4e2a-86fb-6ad0cd6c0eb9",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "06a853ae-7b52-4fcc-b45c-84ab816bd028",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "3ab227c1-b685-4aa3-b855-f115390b9646",
          "title": "Verify the presence of share option after archiving the cases",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/cases-detail/allow-share-on-archived-cases-spec.js",
          "file": "/e2e/sites/specs/cases/cases-detail/allow-share-on-archived-cases-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify the presence of share option after archiving the cases \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "dc332b1e-ae7a-4de3-92bc-e2371394e4f3",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1840649 - Verify the presence of share option after archiving the cases #regression #envstable",
              "fullTitle": "Verify the presence of share option after archiving the cases C1840649 - Verify the presence of share option after archiving the cases #regression #envstable",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should build and submit a new case', this, async () => {\n  const caseObj = caseBuilder.setClinicalModulePosition(1, createCase.clinicalModule).setClinicalModuleElm(createCase.clinicalModule).setFacilityModulePosition(1).setFacilityModuleElm(createCase.facility).setNewPatientFlag().setPatientDetails(CONSTANTS.PATIENT1);\n  await createCaseHelper.addEditCase(caseObj);\n  return createCaseHelper.submitNewCase();\n});\nawait step('should assign to me', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetail.assignToMeButton);\n  await helper.clickVisibleElement(caseDetail.assignToMeButton);\n  await helper.waitForElementToBeVisible(caseDetail.mrn);\n  const mrn = await caseDetail.mrn.getText();\n  mrnToSearch = mrn.split(': ')[1].slice(0, -1);\n  caseId = await caseDetail.caseId.getText();\n});\nawait step('should complete a case', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetail.completeCaseButton);\n  await helper.clickVisibleElement(caseDetail.completeCaseButton);\n  await helper.waitForElementToBeVisible(caseDetail.modalConfirm);\n  await helper.clickVisibleElement(caseDetail.modalConfirm);\n  return helper.waitForElementToBeInvisible(caseDetail.completeCaseButton);\n});\nawait step('should archive a case', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetail.archiveCaseButton);\n  await helper.clickVisibleElement(caseDetail.archiveCaseButton);\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.caseDetail);\n  await browser.driver.navigate().refresh();\n});\nawait step('search patient in the list', this, async () => {\n  await patientHelper.patientSearchPage();\n  await helper.waitForElementToBeVisible(patients.searchTypeDropdown);\n  await helper.waitAndClick(patients.searchTypeDropdown);\n  await helper.waitAndClick(patients.searchTypeDropdownOptionsMrn);\n  await helper.replaceInputValue(patients.searchTypeMRNInput, '', mrnToSearch);\n  await helper.clickElement(patients.searchPatientSubmit);\n  return helper.waitForElementToBePresent(patients.searchedPatientBlock);\n});\nawait step('click on patient details', this, async () => {\n  await helper.waitAndClick(patients.selectPatient);\n  await helper.waitAndClick(patients.clickOnCaseHistoryDetails(caseId));\n  await helper.waitForUrlToHave(CONSTANTS.ROUTE.caseDetail);\n});\nawait step('should click on case option', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetail.caseOption);\n  await helper.clickVisibleElement(caseDetail.caseOption);\n  await helper.waitForElementToBeVisible(caseDetail.shareBtn);\n  const isVisible = await caseDetail.shareBtn.isDisplayed();\n  expect(isVisible).to.be.true;\n});",
              "err": {},
              "uuid": "b1d8f759-7180-46e9-b9d4-c92d30d0b1f3",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "b1d8f759-7180-46e9-b9d4-c92d30d0b1f3"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "cc2c2532-c92e-4a41-86a2-2cf51cd9ad45",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 120,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "cc433f41-baaa-4318-bb43-c836ba6dbd9d",
          "parentUUID": "cc2c2532-c92e-4a41-86a2-2cf51cd9ad45",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "c535193b-c0e5-45b4-b76d-47b7f93a21c5",
          "parentUUID": "cc2c2532-c92e-4a41-86a2-2cf51cd9ad45",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "6503bf5f-d1ce-42d4-8444-0063137b11d4",
          "parentUUID": "cc2c2532-c92e-4a41-86a2-2cf51cd9ad45",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "f8ad6b47-b95e-4b43-944b-6460ba7fc4f8",
          "parentUUID": "cc2c2532-c92e-4a41-86a2-2cf51cd9ad45",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "30bec89c-4297-4cf8-b449-c7d6ec153df5",
          "parentUUID": "cc2c2532-c92e-4a41-86a2-2cf51cd9ad45",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "80f3ab7c-01d8-4a18-955b-db531e2a20e5",
          "title": "Login page",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/auth/login-spec.js",
          "file": "/e2e/sites/specs/auth/login-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Login page \"before all\" hook: ret",
              "timedOut": false,
              "duration": 106,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const api = new ApiHelper(enterpriseCode);\nconst userLoginIsReset = await api.resetLoginAttempts(config.site.login.user);\nexpect(userLoginIsReset).is.true;",
              "err": {},
              "uuid": "54c178b5-722b-431b-9abe-2940d25cfcaf",
              "parentUUID": "80f3ab7c-01d8-4a18-955b-db531e2a20e5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: ret",
              "fullTitle": "Login page \"before each\" hook: ret",
              "timedOut": false,
              "duration": 904,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await sitesAuthHelper.sites();",
              "err": {},
              "uuid": "31ed0c65-a174-4535-8278-4d2f7f6526ff",
              "parentUUID": "80f3ab7c-01d8-4a18-955b-db531e2a20e5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C338 - Verify login using existing user #smoke #sanity #stable",
              "fullTitle": "Login page C338 - Verify login using existing user #smoke #sanity #stable",
              "timedOut": false,
              "duration": 9379,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"✓login using an existing user\"",
              "code": "await step('login using an existing user', this, async () => {\n  await sitesAuthHelper.loginSites();\n  await sitesAuthHelper.loggedIn();\n  await sitesAuthHelper.logout(header);\n});",
              "err": {},
              "uuid": "222e545d-c265-4c5b-9a0c-d53234017303",
              "parentUUID": "80f3ab7c-01d8-4a18-955b-db531e2a20e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C11695 - Verify details on the login page #regression #stable",
              "fullTitle": "Login page C11695 - Verify details on the login page #regression #stable",
              "timedOut": false,
              "duration": 2579,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"✓navigate to login page\"",
              "code": "await step('navigate to login page', this, async () => {\n  await sitesAuthHelper.setCodeAndSubmit();\n  await Helper.waitForUrlToChange(CONSTANTS.ROUTE.site);\n  await Helper.waitForElementToBeVisible(login.loginBtn);\n  const chooseLogin = await browser.getCurrentUrl();\n  if (chooseLogin.includes(CONSTANTS.ROUTE.chooseLogin)) {\n    await Helper.clickElement(login.loginBtn);\n  }\n  await Helper.waitForElementToBeVisible(login.password);\n  expect(await browser.getTitle()).to.include(CONSTANTS.DASHBOARD.login);\n});",
              "err": {},
              "uuid": "a0889d14-80bb-4993-9e61-2f7daa833f1b",
              "parentUUID": "80f3ab7c-01d8-4a18-955b-db531e2a20e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C11697 - should throw an error when an empty email is entered #regression #stable",
              "fullTitle": "Login page C11697 - should throw an error when an empty email is entered #regression #stable",
              "timedOut": false,
              "duration": 4223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"✓attempt login with an empty email\"",
              "code": "await step('attempt login with an empty email', this, async () => {\n  await sitesAuthHelper.loginSites({\n    user: ''\n  });\n  await Helper.waitForElementToBeVisible(login.emailBlankErrorMsg);\n  expect(await login.emailBlankErrorMsg.getText()).that.does.include(CONSTANTS.ERROR_MESSAGE.emailBlank);\n});",
              "err": {},
              "uuid": "1c44e63a-53ba-4c09-a6ac-fb83fd3078df",
              "parentUUID": "80f3ab7c-01d8-4a18-955b-db531e2a20e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C11698 - leaving password field empty and clicking login button shows proper validation #regression #stable",
              "fullTitle": "Login page C11698 - leaving password field empty and clicking login button shows proper validation #regression #stable",
              "timedOut": false,
              "duration": 4085,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"✓login with an empty password\"",
              "code": "await step('login with an empty password', this, async () => {\n  await sitesAuthHelper.loginSites({\n    password: ''\n  });\n  await Helper.waitForElementToBePresent(login.passwordBlankErrorMsg);\n  expect(await login.passwordBlankErrorMsg.getText()).that.does.include(CONSTANTS.ERROR_MESSAGE.passwordBlank);\n});",
              "err": {},
              "uuid": "a498863b-d39e-4fb5-b1ba-f0abe0ed4348",
              "parentUUID": "80f3ab7c-01d8-4a18-955b-db531e2a20e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C1836208 - should throw an error when an invalidly formatted email is entered #sanity #stable",
              "fullTitle": "Login page C1836208 - should throw an error when an invalidly formatted email is entered #sanity #stable",
              "timedOut": false,
              "duration": 3776,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"✓login with email in invalid format\"",
              "code": "await step('login with email in invalid format', this, async () => {\n  await sitesAuthHelper.loginSites({\n    user: 'someinvalidemail'\n  });\n  await Helper.waitForElementToBeVisible(login.emailBlankErrorMsg);\n  expect(await login.emailBlankErrorMsg.getText()).that.does.include(CONSTANTS.ERROR_MESSAGE.emailInvalidFormat);\n});",
              "err": {},
              "uuid": "f0aeb440-f384-4037-94ac-bfd544169022",
              "parentUUID": "80f3ab7c-01d8-4a18-955b-db531e2a20e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C342 - Verify login with invalid credentials shows error message #smoke #sanity #stable",
              "fullTitle": "Login page C342 - Verify login with invalid credentials shows error message #smoke #sanity #stable",
              "timedOut": false,
              "duration": 7707,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓attempt login using an invalid user\",\n  \"✓login with an incorrect password\"\n]",
              "code": "await step('attempt login using an invalid user', this, async () => {\n  await sitesAuthHelper.loginSites({\n    user: 'invalidemailthatdoesntexist@invalidemail.com'\n  });\n  await Helper.waitForElementToBeVisible(login.invalidEmailErrorMsg);\n  expect(await login.invalidEmailErrorMsg.getText()).that.does.include(CONSTANTS.ERROR_MESSAGE.incorrectEmailPass);\n});\nawait step('login with an incorrect password', this, async () => {\n  await sitesAuthHelper.loginSites({\n    user: config.site.login.user,\n    password: config.site.login.invalidPassword\n  });\n  await Helper.waitForElementToBeVisible(login.invalidEmailErrorMsg);\n  expect(await login.invalidEmailErrorMsg.getText()).that.does.include(CONSTANTS.ERROR_MESSAGE.incorrectEmailPass);\n});",
              "err": {},
              "uuid": "231a3383-87ce-4e19-a905-82dc07944347",
              "parentUUID": "80f3ab7c-01d8-4a18-955b-db531e2a20e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C1838431 - Verify login with the user save checkbox checked(default) #smoke #stable",
              "fullTitle": "Login page C1838431 - Verify login with the user save checkbox checked(default) #smoke #stable",
              "timedOut": false,
              "duration": 8598,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓login with the user save checkbox checked(default)\",\n  \"✓login again to view saved user\",\n  \"✓change user\"\n]",
              "code": "await step('login with the user save checkbox checked(default)', this, async () => {\n  await sitesAuthHelper.loginSites();\n  await sitesAuthHelper.loggedIn();\n  await Helper.waitForElementToBePresent(login.siteHeader);\n  await sitesAuthHelper.logout(header);\n});\nawait step('login again to view saved user', this, async () => {\n  await sitesAuthHelper.setCodeAndSubmit();\n  await Helper.waitForUrlToChange(CONSTANTS.ROUTE.site);\n  const chooseLoginUrl = await browser.getCurrentUrl();\n  if (chooseLoginUrl.includes(CONSTANTS.ROUTE.chooseLogin)) {\n    return Helper.clickElement(login.loginBtn);\n  }\n  return Helper.waitForElementToBeClickable(login.changeUserLinkInLogin);\n});\nawait step('change user', this, async () => {\n  await Helper.clickElement(login.changeUserLinkInLogin);\n  return Helper.waitForElementToBeVisible(login.email);\n});",
              "err": {},
              "uuid": "ad911359-3a81-485e-b96b-6d902c5e6eb3",
              "parentUUID": "80f3ab7c-01d8-4a18-955b-db531e2a20e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C1836209 - Verify login with the user save checkbox unchecked #stable",
              "fullTitle": "Login page C1836209 - Verify login with the user save checkbox unchecked #stable",
              "timedOut": false,
              "duration": 7606,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓login with the user save checkbox unchecked\",\n  \"✓login again to view user is not saved\"\n]",
              "code": "await step('login with the user save checkbox unchecked', this, async () => {\n  await sitesAuthHelper.setCodeAndSubmit();\n  await Helper.waitForUrlToChange(CONSTANTS.ROUTE.site);\n  await Helper.waitAndClick(login.loginBtn);\n  await Helper.waitAndClick(login.saveCheckBox);\n  expect(login.rememberMe.isSelected()).to.eventually.be.false;\n  await sitesAuthHelper.enterLogin();\n  await sitesAuthHelper.enterPassword();\n  await Helper.clickElement(login.loginBtn);\n  await sitesAuthHelper.loggedIn();\n  await Helper.waitForElementToBePresent(login.siteHeader);\n  expect(login.siteHeader).to.be.displayed;\n});\nawait step('login again to view user is not saved', this, async () => {\n  await sitesAuthHelper.logout(header);\n  await sitesAuthHelper.setCodeAndSubmit();\n  await Helper.waitForUrlToChange(CONSTANTS.ROUTE.site);\n  await Helper.waitAndClick(login.loginBtn);\n  return Helper.waitForElementToBeVisible(login.email);\n});",
              "err": {},
              "uuid": "1977f88b-6701-4823-9726-127299bf10f8",
              "parentUUID": "80f3ab7c-01d8-4a18-955b-db531e2a20e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C344 - Verify login via SSO #smoke #sanity #envstable",
              "fullTitle": "Login page C344 - Verify login via SSO #smoke #sanity #envstable",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('login into enterprise and clear sso login allowed group', this, async () => {\n  await enterpriseAuthHelper.loginEnterprise();\n  await settingsHelper.selectDesiredClinicalPortal();\n  await Helper.waitAndClick(settings.securityTab);\n  await helperInstance.replaceInputAndSaveValue(settings.ssoAllowedGroups, '', '');\n  await Helper.waitAndClick(settings.buttonSubmit);\n  return Helper.waitAndClick(settings.modalConfirm);\n});\nawait step('login with SSO', this, async () => {\n  await sitesAuthHelper.sites();\n  await sitesAuthHelper.setCodeAndSubmit();\n  await Helper.clickElement(login.ssoBtn);\n  await browser.waitForAngularEnabled(false);\n  await Helper.waitForElementToBeVisible(login.userNameInputSSO);\n  await Helper.replaceInputValue(login.userNameInputSSO, '', config.site.ssoLogin.user);\n  await Helper.replaceInputValue(login.passwordInputSSO, '', config.site.ssoLogin.password);\n  await Helper.clickElement(login.submitBtnSSO);\n  await Helper.waitForUrlToChange(CONSTANTS.ROUTE.ssoURL);\n  expect((await browser.getCurrentUrl()).split('#')[1]).to.be.oneOf([CONSTANTS.ROUTE.allCases, CONSTANTS.ROUTE.dashboard, CONSTANTS.ROUTE.profile, CONSTANTS.ROUTE.termsAndCond]);\n});",
              "err": {},
              "uuid": "0432f8da-b9bb-4ec9-94ae-3cb054a683bc",
              "parentUUID": "80f3ab7c-01d8-4a18-955b-db531e2a20e5",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [
            "222e545d-c265-4c5b-9a0c-d53234017303",
            "a0889d14-80bb-4993-9e61-2f7daa833f1b",
            "1c44e63a-53ba-4c09-a6ac-fb83fd3078df",
            "a498863b-d39e-4fb5-b1ba-f0abe0ed4348",
            "f0aeb440-f384-4037-94ac-bfd544169022",
            "231a3383-87ce-4e19-a905-82dc07944347",
            "ad911359-3a81-485e-b96b-6d902c5e6eb3",
            "1977f88b-6701-4823-9726-127299bf10f8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [
            "0432f8da-b9bb-4ec9-94ae-3cb054a683bc"
          ],
          "duration": 47953,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "9597d7b9-76d1-4642-b6c6-f3de1f2be609",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "15ece8c3-fa60-4378-9e35-c4efc205c976",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "ddd57ae1-89d5-4b3c-be5f-43fd0957f457",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "59561000-b70c-49fc-911d-4f38895c6f1b",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "6cc9b0d7-8f61-4442-ad6d-99f7da3e980b",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "c05241c7-d91d-44d1-b5ab-0b06aabdcba2",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "1d9126ba-202a-4473-bcae-2cf95dcca33f",
          "title": "Verify user should unassign assigned case",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/cases-detail/assign-unassign-case-spec.js",
          "file": "/e2e/sites/specs/cases/cases-detail/assign-unassign-case-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify user should unassign assigned case \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "ba3eae95-47ff-40ec-9171-a5bfeefcdc7f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Verify user should unassign assigned case \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return caseHelper.cancelCase();",
              "err": {},
              "uuid": "436e014d-dac4-4321-8f0b-14d4cb692b06",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C349 - Verify user should unassign assigned case #smoke #sanity",
              "fullTitle": "Verify user should unassign assigned case C349 - Verify user should unassign assigned case #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('Create a new case', this, async () => {\n  await caseHelper.createCase(createCase.clinicalModule, createCase.facility);\n  return helper.waitForElement(caseDetail.videoMessagePane);\n});\nawait step('Case assigned and assert assign notification', this, async () => {\n  await helper.waitAndClick(caseDetail.assignToMeButton);\n  return helper.waitForElementToBeVisible(caseDetail.secondCollabMsg);\n});\nawait step('Click on Unassign and validate assign button', this, async () => {\n  await helper.waitAndClick(caseDetail.unassignCase);\n  await helper.waitForElementToBeVisible(caseDetail.assignToMeButton);\n  const isAssignBtnVisible = await caseDetail.assignToMeButton.isDisplayed();\n  expect(isAssignBtnVisible).to.be.true;\n});",
              "err": {},
              "uuid": "f836f81f-99bc-4c10-9786-030a7277b93e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "f836f81f-99bc-4c10-9786-030a7277b93e"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "85cc9913-33ea-4c7c-98bd-749de8ea7659",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "5c759723-8089-4c57-8b07-d3991122e5dd",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "88f00aa8-323c-4864-b22a-968f57b67e79",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "47bb7c3f-9850-4a2b-ac95-85e4a44866c1",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "8147e5a7-44d9-4b9f-b3a5-4e1026493e7d",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "32752285-0b96-49f5-814c-13cca03f5497",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "143b0639-63bb-43d9-87c8-0bfda6983b3d",
          "title": "Verify notification appears once the case is assigned/Reassigned and complete",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/cases-detail/assigned-reassigned-complete-notification-spec.js",
          "file": "/e2e/sites/specs/cases/cases-detail/assigned-reassigned-complete-notification-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C360 & C908188 - Verify notification appears once the case is assigned/Reassigned and complete #smoke",
              "fullTitle": "Verify notification appears once the case is assigned/Reassigned and complete C360 & C908188 - Verify notification appears once the case is assigned/Reassigned and complete #smoke",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('Should login on enterprise', this, async () => {\n  await enterpriseAuthHelper.loginEnterprise();\n  expect(await enterprise.pageTitle.isPresent()).to.be.true;\n});\nawait step('Should select any desired clinical portal', this, () => {\n  return serviceLineHelper.navigateToWorkflow();\n});\nawait step('navigate to notification settings', this, () => {\n  return helper.waitAndClick(workflow.notificationsTab);\n});\nawait step('add case assigned notification', this, async () => {\n  const hasCaseAssignedTrigger = await workflow.caseTriggerType(CONSTANTS.NOTIFICATIONS.triggerType.assigned).isPresent();\n  const isSetToAssignedIndividual = await workflow.assignedIndividual(CONSTANTS.NOTIFICATIONS.triggerType.assigned).isPresent();\n  const {\n    hasTriggerAdded,\n    hasRoleRecipientAdded\n  } = await settingsHelper.addNotificationTrigger(hasCaseAssignedTrigger, isSetToAssignedIndividual, CONSTANTS.NOTIFICATIONS.triggerType.assigned);\n  expect(hasTriggerAdded).to.be.true;\n  expect(hasRoleRecipientAdded).to.be.true;\n});\nawait step('add case completion notification', this, async () => {\n  const hasCaseCompletionTrigger = await workflow.caseTriggerType(CONSTANTS.NOTIFICATIONS.triggerType.completed).isPresent();\n  const isSetToAssignedIndividual = await workflow.assignedIndividual(CONSTANTS.NOTIFICATIONS.triggerType.completed).isPresent();\n  const {\n    hasTriggerAdded,\n    hasRoleRecipientAdded\n  } = await settingsHelper.addNotificationTrigger(hasCaseCompletionTrigger, isSetToAssignedIndividual, CONSTANTS.NOTIFICATIONS.triggerType.completed);\n  expect(hasTriggerAdded).to.be.true;\n  expect(hasRoleRecipientAdded).to.be.true;\n});\nawait step('Should login on sites', this, async () => {\n  await sitesAuthHelper.loginSites();\n  return sitesAuthHelper.loggedIn();\n});\nawait step('Create a new case', this, async () => {\n  await caseHelper.createCase(createCase.clinicalCardiology, createCase.facility);\n  return helper.waitForElement(caseDetail.videoMessagePane);\n});\nawait step('Case assigned and assert assign notification', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetail.patientName);\n  await helper.waitAndClick(caseDetail.assignToMeButton);\n  await helper.waitForElementToBeVisible(caseDetail.toastNotification);\n  const notification = await caseDetail.toastNotification.isDisplayed();\n  expect(notification).to.be.true;\n});\nawait step('Assert Complete case notification', this, async () => {\n  await helper.waitAndClick(caseDetail.completeCaseButton);\n  await helper.waitAndClick(caseDetail.modalConfirm);\n  await helper.waitForElementToBeVisible(caseDetail.toastNotification, 2);\n  const notification = await caseDetail.toastNotification.isDisplayed();\n  expect(notification).to.be.true;\n});",
              "err": {},
              "uuid": "fc82562f-610b-4ba8-a9c0-04c328ca9ec1",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "fc82562f-610b-4ba8-a9c0-04c328ca9ec1"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "943e52c6-eec2-467a-bd4f-17dfdd6d602c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "13fe36db-1874-4494-99a0-2b843521d697",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "993f63dc-b22d-491d-bf22-f8bf256aa7e8",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "1f0f4248-865d-4d76-aa14-8e7e198639cd",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "4f50a2e0-1dc0-4a58-a117-c2e14fa9b1b5",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "15a4d0f9-fb2b-4210-9f8f-0bdd8fe80497",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "026aec3a-4d79-4d62-8e97-86179b6c5c2d",
          "title": "Verify user can cancel a case",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/cases-detail/cancel-case-spec.js",
          "file": "/e2e/sites/specs/cases/cases-detail/cancel-case-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify user can cancel a case \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "67ea72b4-f4b2-488f-907d-241bd5949a04",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C352 - Verify user can cancel a case #smoke #sanity",
              "fullTitle": "Verify user can cancel a case C352 - Verify user can cancel a case #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should build and submit a new case', this, async () => {\n  return caseHelper.createCase(createCase.clinicalModule, createCase.facility);\n});\nawait step('should save the cancelled case Id', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetail.caseId);\n  const caseNum = await caseDetail.caseId.getText();\n  caseIdCancel = `${caseNum} has been cancelled`;\n});\nawait step('should click on the case options dropdown', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetail.caseOption);\n  return helper.clickVisibleElement(caseDetail.caseOption);\n});\nawait step('should cancel the case', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetail.caseCancel);\n  await helper.clickVisibleElement(caseDetail.caseCancel);\n  await helper.waitForElementToBeVisible(caseDetail.caseModalDropdown);\n  await helper.clickElement(caseDetail.caseModalDropdown);\n  await helper.waitForElementToBeClickable(caseDetail.caseModalDropdownOptionsOther);\n  await caseDetail.caseModalDropdownOptionsOther.click();\n  await helper.waitForElementToBeClickable(caseDetail.caseCancelButton);\n  await helper.clickElement(caseDetail.caseCancelButton);\n});\nawait step('verify that the case cancelled toast message displays the right case number for the cancelled case', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetail.bottomToast);\n  const toast = await caseDetail.bottomToast.getText();\n  expect(toast.includes(caseIdCancel)).to.be.true;\n});",
              "err": {},
              "uuid": "b2807c4f-711a-41dc-b63b-47fb9bc6adcd",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "b2807c4f-711a-41dc-b63b-47fb9bc6adcd"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "a7a5fffa-9433-4a81-b448-4b7f2b56ae3f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "973d0f56-3957-4341-bc97-972ea0d8c128",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "36bb4824-66e4-41d0-b589-58af1d4a6642",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "21901fd1-c4b5-4f83-893d-6506e8584ad5",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "302d0af1-efa6-48ad-8b14-763e160f1013",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "488e53aa-9741-45d4-9f77-28c10c9ab528",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "a2f0294c-5bc7-4062-ad6c-92e2fddfd9a8",
          "title": "Verifying case creation and collaboration messages",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/cases-detail/case-collaboration-details-spec.js",
          "file": "/e2e/sites/specs/cases/cases-detail/case-collaboration-details-spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Verifying case creation and collaboration messages \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return caseHelper.cancelCase();",
              "err": {},
              "uuid": "842dad84-e714-4e7c-b727-56c563b0c17c",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C485154 - Case details - verifying collaboration details on case details page #smoke",
              "fullTitle": "Verifying case creation and collaboration messages C485154 - Case details - verifying collaboration details on case details page #smoke",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('login to enterprise successfully', this, async () => {\n  await enterpriseAuthHelper.loginEnterprise();\n});\nawait step('navigate and select desired workflow', this, async () => {\n  await caseFormHelper.navigateToWorkflow();\n  return Helper.waitAndClick(enterprise.workflow);\n});\nawait step('add the Intake form if it does not exist', this, () => {\n  return caseFormHelper.addFormIfNotExist(enterprise.intakeCaseForm, helperInstance);\n});\nawait step('login to sites', this, async () => {\n  return sitesAuthHelper.loginSites({}, true);\n});\nawait step('build and submit a new case', this, () => {\n  return caseHelper.createCase(createCase.clinicalModule, createCase.facility);\n});\nawait step('edit the intake form', this, async () => {\n  await Helper.waitAndClick(caseDetail.intakeFormEditLink);\n  await Helper.waitForElementToBeVisible(caseDetail.saveAndSubmitForm);\n  /* The scrollIntoView function is called here because when the case is created and updated the \"Case Details updated\" toast\n  message appears on the page which sometimes intercepts the click on the \"saveAndSubmitForm\" button. This method ensures that this\n  problem is avoided by clicking on the \"saveAndSubmitForm\" button all the time.\n  */\n  await Helper.scrollElemFinderIntoView(caseDetail.saveAndSubmitForm);\n  await Helper.clickElement(caseDetail.saveAndSubmitForm);\n});\nawait step('verify that the intake form link shows up in the collaboration column', this, async () => {\n  await Helper.waitForElementToBeVisible(caseDetail.intakeLink);\n});\nawait step('verify that the collaboration message states the form has been modified', this, async () => {\n  const editMessage = 'Modified Form';\n  await Helper.waitForElementToBeVisible(caseDetail.intakeFormEditMessage);\n  const formEditMessage = await caseDetail.intakeFormEditMessage.getText();\n  expect(formEditMessage.includes(editMessage)).to.be.true;\n});",
              "err": {},
              "uuid": "4539ce8a-aaee-4fc8-8805-30432b23d576",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "4539ce8a-aaee-4fc8-8805-30432b23d576"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "87cd3d21-1f1a-407c-8e50-d9122c6fbbbc",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "2df6eec9-54a7-470e-bb9e-bac9d332ce4d",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "b071a3c9-bf4b-48b4-bfbd-f1f083de5008",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "5f5b82b5-e40c-40c9-b757-7ce5eb5068e3",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "7dc510c0-707a-4aef-baa5-c7eab610ae09",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "543b8c0b-f7cd-43ab-9377-5c42f788e380",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "793eac4b-3322-415b-bc5d-b27147137009",
          "title": "Verifying that cancelling a form should not display the \"Modified Form\" message on the collaboration panel",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/cases-detail/cancel-case-collaboration-details-spec.js",
          "file": "/e2e/sites/specs/cases/cases-detail/cancel-case-collaboration-details-spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Verifying that cancelling a form should not display the \"Modified Form\" message on the collaboration panel \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return caseHelper.cancelCase();",
              "err": {},
              "uuid": "172a381a-f661-46ea-b27f-6e7b65a8db9f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C1307595 - Case details - cancelling a form does not display the form modified message #smoke",
              "fullTitle": "Verifying that cancelling a form should not display the \"Modified Form\" message on the collaboration panel C1307595 - Case details - cancelling a form does not display the form modified message #smoke",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('Login to enterprise successfully', this, async () => {\n  await enterpriseAuthHelper.loginEnterprise();\n});\nawait step('Navigate and select desired workflow', this, async () => {\n  await caseFormHelper.navigateToWorkflow();\n  return Helper.waitAndClick(enterprise.workflow);\n});\nawait step('Add the Intake form if not exists', this, () => {\n  return caseFormHelper.addFormIfNotExist(enterprise.intakeCaseForm, helperInstance);\n});\nawait step('Login to sites', this, async () => {\n  return sitesAuthHelper.loginSites({}, true);\n});\nawait step('Build and submit a new case', this, async () => {\n  return caseHelper.createCase(createCase.clinicalModule, createCase.facility);\n});\nawait step('Open the Intake form for editing and cancel the changes without saving', this, async () => {\n  await Helper.waitAndClick(caseDetail.intakeFormEditLink);\n  await Helper.waitForElementToBeVisible(caseDetail.cancelIntakeForm);\n  /* The scrollIntoView function is called here because when the case is created and updated the \"Case Details updated\" toast\n  message appears on the page which sometimes intercepts the click on the \"cancelInakeForm\" button. This method ensures that this\n  problem is avoided by clicking on the \"cancelInakeForm\" button all the time.\n  */\n  await Helper.scrollElemFinderIntoView(caseDetail.cancelIntakeForm);\n  await Helper.waitAndClick(caseDetail.cancelIntakeForm);\n});\nawait step('Verify that the intake form link does not  show up in the collab column', this, async () => {\n  const intakeLink = await caseDetail.intakeLink.isPresent();\n  expect(intakeLink).to.be.false;\n});\nawait step('Verify that the collab panel does not get updated with \"Form Modified\" message', this, async () => {\n  const formEditMessage = await caseDetail.intakeFormEditMessage.isPresent();\n  expect(formEditMessage).to.be.false;\n});",
              "err": {},
              "uuid": "f6614ab0-c071-4732-ba22-64ba2cd238b3",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "f6614ab0-c071-4732-ba22-64ba2cd238b3"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "51888b0c-ef53-4cc4-a5d2-36c57c6685d1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 118,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "0983ff8c-128b-409d-b2fb-cd6a2737f5a0",
          "parentUUID": "51888b0c-ef53-4cc4-a5d2-36c57c6685d1",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "09dc9c58-ade4-46af-9f67-5fdceae31978",
          "parentUUID": "51888b0c-ef53-4cc4-a5d2-36c57c6685d1",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "8df54f3e-4501-465f-87bc-fc0a975a9798",
          "parentUUID": "51888b0c-ef53-4cc4-a5d2-36c57c6685d1",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 243,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "52040481-74b2-4458-bb84-525f3d67bdc0",
          "parentUUID": "51888b0c-ef53-4cc4-a5d2-36c57c6685d1",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "c34669df-9039-439d-b909-a5ff4f703a10",
          "parentUUID": "51888b0c-ef53-4cc4-a5d2-36c57c6685d1",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "6f9eba28-ca05-43e4-a986-3e03ba5ffeda",
          "title": "Appointments Regression TestCases ",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/calendar/create-appointment-spec.js",
          "file": "/e2e/sites/specs/calendar/create-appointment-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Appointments Regression TestCases  \"before all\" hook: ret",
              "timedOut": false,
              "duration": 5421,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return sitesAuthHelper.loginSites().then(() => {\n  return sitesAuthHelper.loggedIn();\n});",
              "err": {},
              "uuid": "dcd1e4de-fa60-4318-a241-2bf4067a916f",
              "parentUUID": "6f9eba28-ca05-43e4-a986-3e03ba5ffeda",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1838462 - Verify adding a new patient with MRN #regression #stable",
              "fullTitle": "Appointments Regression TestCases  C1838462 - Verify adding a new patient with MRN #regression #stable",
              "timedOut": false,
              "duration": 2378,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"✓Verify adding a new patient with MRN\"",
              "code": "await step('Verify adding a new patient with MRN', this, async () => {\n  browser.waitForAngularEnabled(false);\n  await sitesPatientHelper.addPatientPage();\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include('/add-patient');\n  await Helper.waitForElement(patients.firstNameCreateInput);\n  await sitesPatientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients\n  });\n  await sitesPatientHelper.submitNewPatient(patients);\n  expect(Helper.waitForElement(patients.caseForm));\n});",
              "err": {},
              "uuid": "733a1f1b-5b80-41ab-a2a7-160c71d1911e",
              "parentUUID": "6f9eba28-ca05-43e4-a986-3e03ba5ffeda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C1838463 - Verify Screen should navigate to the appointments page #regression #stable",
              "fullTitle": "Appointments Regression TestCases  C1838463 - Verify Screen should navigate to the appointments page #regression #stable",
              "timedOut": false,
              "duration": 886,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"✓Verify Screen should navigate to the appointments page\"",
              "code": "await step('Verify Screen should navigate to the appointments page', this, async () => {\n  await sitesAppointmentHelper.appointmentPage();\n  const currentUrl = await browser.getCurrentUrl();\n  expect(await currentUrl).to.include('/appointments');\n});",
              "err": {},
              "uuid": "b89765b4-17d1-487e-8a29-937e132275d5",
              "parentUUID": "6f9eba28-ca05-43e4-a986-3e03ba5ffeda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C1838464 - Verify creating an appointment #regression #stable",
              "fullTitle": "Appointments Regression TestCases  C1838464 - Verify creating an appointment #regression #stable",
              "timedOut": false,
              "duration": 18954,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"✓Verify creating an appointment\"",
              "code": "await step('Verify creating an appointment', this, async () => {\n  await sitesAppointmentHelper.appointmentPage();\n  await Helper.waitAndClick(appointments.addAppointmentBtn);\n  await sitesAppointmentHelper.newAppointmentRequiredFields(appointments, helperInstance);\n  await sitesAppointmentHelper.saveAppointment(appointments);\n  expect(await Helper.waitForElementToBeVisible(appointments.createdAppointmentMessage));\n});",
              "err": {},
              "uuid": "3b268915-5f12-4f69-b919-e8ba522a81ed",
              "parentUUID": "6f9eba28-ca05-43e4-a986-3e03ba5ffeda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C1838484 - Verify created appointment is displayed in the day, week, and month view of calendar #regression #stable",
              "fullTitle": "Appointments Regression TestCases  C1838484 - Verify created appointment is displayed in the day, week, and month view of calendar #regression #stable",
              "timedOut": false,
              "duration": 2664,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓Verify created appointment is displayed in month view of calendar\",\n  \"✓Verify created appointment is displayed in week view of calendar\",\n  \"✓Verify created appointment is displayed in day view of calendar\"\n]",
              "code": "await step('Verify created appointment is displayed in month view of calendar', this, async () => {\n  await sitesAppointmentHelper.appointmentPage();\n  await Helper.waitForElementToBeVisible(appointments.selectingItem);\n  await Helper.clickElement(appointments.selectingItem);\n  await Helper.waitAndClick(appointments.monthItem);\n  await Helper.waitForElementToBeVisible(sitesAppointmentHelper.fetchFirstNameOfPatient(helperInstance));\n  expect(await sitesAppointmentHelper.fetchFirstNameOfPatient(helperInstance).isPresent()).to.be.true;\n});\nawait step('Verify created appointment is displayed in week view of calendar', this, async () => {\n  await Helper.clickElement(appointments.selectingItem);\n  await Helper.waitAndClick(appointments.weekItem);\n  await Helper.waitForElementToBeVisible(sitesAppointmentHelper.fetchFirstNameOfPatient(helperInstance));\n  expect(await sitesAppointmentHelper.fetchFirstNameOfPatient(helperInstance).isPresent()).to.be.true;\n});\nawait step('Verify created appointment is displayed in day view of calendar', this, async () => {\n  await Helper.clickElement(appointments.selectingItem);\n  await Helper.waitAndClick(appointments.dayItem);\n  await Helper.waitForElementToBeVisible(sitesAppointmentHelper.fetchFirstNameOfPatient(helperInstance));\n  expect(await sitesAppointmentHelper.fetchFirstNameOfPatient(helperInstance).isPresent()).to.be.true;\n});",
              "err": {},
              "uuid": "b1c1f1f7-57ec-4637-ba1d-cc5c2d40e553",
              "parentUUID": "6f9eba28-ca05-43e4-a986-3e03ba5ffeda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C1838465 - Verify created Appointment has been clicked and should able to checkIn #regression #stable",
              "fullTitle": "Appointments Regression TestCases  C1838465 - Verify created Appointment has been clicked and should able to checkIn #regression #stable",
              "timedOut": false,
              "duration": 1646,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "[\n  \"✗Verify above created Appointment has been clicked\",\n  \"screenshots/screenshot-1602903289749.png\"\n]",
              "code": "await step('Verify above created Appointment has been clicked', this, async () => {\n  await Helper.scrollToElement(sitesAppointmentHelper.fetchFirstNameOfPatient(helperInstance));\n  await Helper.waitForElementToBeClickable(sitesAppointmentHelper.fetchFirstNameOfPatient(helperInstance));\n  await Helper.clickElement(sitesAppointmentHelper.fetchFirstNameOfPatient(helperInstance));\n  expect(Helper.waitForElementToBeVisible(appointments.confirmCheckIn));\n});\nawait step('Verify checkIn an appointment', this, async () => {\n  await Helper.clickElement(appointments.confirmCheckIn);\n  expect(Helper.waitForElementToBeVisible(appointments.patientDetailFromCaseDetailBtn));\n});",
              "err": {
                "message": "WebDriverError: element click intercepted: Element <a class=\"fc-time-grid-event fc-v-event fc-event fc-start fc-end fc-draggable fc-resizable primary\" style=\"top: 619.6px; bottom: -833.6px; z-index: 1; left: 0%; right: 50%;\">...</a> is not clickable at point (737, 994). Other element would receive the click: <p class=\"wrapper__text\">...</p>\n  (Session info: headless chrome=81.0.4044.92)\nBuild info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:25:53'\nSystem info: host: 'b9af055c3756', ip: '192.168.224.3', os.name: 'Linux', os.arch: 'amd64', os.version: '4.15.0-1077-aws', java.version: '11.0.6'\nDriver info: driver.version: unknown",
                "estack": "WebDriverError: element click intercepted: Element <a class=\"fc-time-grid-event fc-v-event fc-event fc-start fc-end fc-draggable fc-resizable primary\" style=\"top: 619.6px; bottom: -833.6px; z-index: 1; left: 0%; right: 50%;\">...</a> is not clickable at point (737, 994). Other element would receive the click: <p class=\"wrapper__text\">...</p>\n  (Session info: headless chrome=81.0.4044.92)\nBuild info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:25:53'\nSystem info: host: 'b9af055c3756', ip: '192.168.224.3', os.name: 'Linux', os.arch: 'amd64', os.version: '4.15.0-1077-aws', java.version: '11.0.6'\nDriver info: driver.version: unknown\n    at Object.checkLegacyResponse (node_modules/selenium-webdriver/lib/error.js:546:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:509:13)\n    at /home/circleci/avizia/one/node_modules/selenium-webdriver/lib/http.js:441:30\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)Error\n    at ElementArrayFinder.applyAction_ (node_modules/protractor/built/element.js:459:27)\n    at ElementArrayFinder.<computed> [as click] (node_modules/protractor/built/element.js:91:29)\n    at ElementFinder.<computed> [as click] (node_modules/protractor/built/element.js:831:22)\n    at /home/circleci/avizia/one/e2e/lib/common/helper.js:146:25\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\n    at /home/circleci/avizia/one/e2e/sites/specs/calendar/create-appointment-spec.js:79:7\n    at step (e2e/lib/common/test-step/test-step-logger.js:23:7)\n    at Context.<anonymous> (e2e/sites/specs/calendar/create-appointment-spec.js:76:5)",
                "diff": null
              },
              "uuid": "d581a60f-3315-40d5-bd16-de206b967a9b",
              "parentUUID": "6f9eba28-ca05-43e4-a986-3e03ba5ffeda",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "733a1f1b-5b80-41ab-a2a7-160c71d1911e",
            "b89765b4-17d1-487e-8a29-937e132275d5",
            "3b268915-5f12-4f69-b919-e8ba522a81ed",
            "b1c1f1f7-57ec-4637-ba1d-cc5c2d40e553"
          ],
          "failures": [
            "d581a60f-3315-40d5-bd16-de206b967a9b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 26528,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "a844dc65-02e3-47cc-81ad-1c7521d43ab9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "8439919d-499c-4044-a971-958315f8cdb4",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "2144e964-41b0-4910-98b4-0bc6ccf648f0",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "d5f15fce-da65-4351-92e3-4d977ebf4ebc",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "144275f5-65aa-4911-98cc-ffd124361077",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "94f1e180-c496-4367-b039-8d32dc6893f5",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "d1cec774-bb71-4ca2-bd5c-808c38e83ba9",
          "title": "Assigned case should show up in my cases",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/cases-detail/create-and-assign-cases-spec.js",
          "file": "/e2e/sites/specs/cases/cases-detail/create-and-assign-cases-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Assigned case should show up in my cases \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "3eb8eea7-0c1a-4416-ba0c-28f9a55b93b0",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Assigned case should show up in my cases \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await helper.waitAndClick(myCases.viewCaseElement);\nreturn caseHelper.cancelCase();",
              "err": {},
              "uuid": "59037e15-83ca-4b2f-86d0-403151c04b10",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C199 - Assigned case should show up in my cases #smoke #sanity",
              "fullTitle": "Assigned case should show up in my cases C199 - Assigned case should show up in my cases #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('create case object', this, () => {\n  return caseHelper.createCase(createCase.clinicalModule, createCase.facility);\n});\nawait step('should click assign to me', this, async () => {\n  await helper.waitAndClick(caseDetail.assignToMeButton);\n  return helper.waitForElementToBeInvisible(caseDetail.assignToMeButton);\n});\nawait step('Navigate to my cases page', this, async () => {\n  patientInfo = await caseDetail.patientName.getText();\n  await helper.waitAndClick(header.clinicDropdown);\n  await helper.waitAndClick(header.myCases);\n});\nawait step('should show My Cases list', this, async () => {\n  await myCasesHelper.getPage();\n  await helper.waitForElementToBeVisible(myCases.appBody);\n  const createdPatient = myCases.myPatientName(patientInfo); // created patient should be visible in My Cases\n  await helper.waitForElementToBeVisible(createdPatient);\n});",
              "err": {},
              "uuid": "3658135b-17bb-461d-8b27-653d8609fb05",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "3658135b-17bb-461d-8b27-653d8609fb05"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "7a050005-636d-4e7a-905c-5468ff796ee8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "c581f2f5-b976-46e9-9df6-520c3be6c6a1",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "ea1bc607-6b17-4d22-ae1d-e90b85dc0f91",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "5925ae12-b487-4a57-b1e3-2a1191163e24",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "46232e4d-f405-4f78-9e5e-7602a2bb7cae",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "e6089524-8c15-4937-ac56-760d5ce2cbc0",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "538bd733-83bc-42a6-ba76-09d1c323d750",
          "title": "Verify user is able to edit pending case (atleast twice)",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/cases-detail/edit-pending-case-spec.js",
          "file": "/e2e/sites/specs/cases/cases-detail/edit-pending-case-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify user is able to edit pending case (atleast twice) \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "340f4eae-a339-4e1d-b002-0967fa6a6c1a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Verify user is able to edit pending case (atleast twice) \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await browser.get(caseUrl);\nreturn caseHelper.cancelCase();",
              "err": {},
              "uuid": "8f1f9ac1-79e5-44c9-a0a8-7ab7631d0432",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C350 - cases - Verify user is able to edit pending case #smoke #sanity",
              "fullTitle": "Verify user is able to edit pending case (atleast twice) C350 - cases - Verify user is able to edit pending case #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let caseObj;\nawait step('should build and submit a new case', this, () => {\n  return caseHelper.createCase(createCase.clinicalModule, createCase.facility);\n});\nawait step('wait for the video message pane', this, () => {\n  return helper.waitForElement(caseDetail.videoMessagePane);\n});\nawait step('verify that the user lands on the case detail page', this, async () => {\n  caseUrl = await browser.getCurrentUrl();\n  expect(caseUrl).to.include(CONSTANTS.ROUTE.caseDetail);\n});\nawait step('click the editCase button to edit the case for the first time', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetail.caseOption);\n  await helper.clickVisibleElement(caseDetail.caseOption);\n  await helper.waitForElementToBeVisible(caseDetail.editCaseButton);\n  await helper.clickVisibleElement(caseDetail.editCaseButton);\n});\nawait step('edits the case for the first time', this, async () => {\n  caseObj = caseBuilder.setClinicalModulePosition(1).setClinicalModuleElm(createCase.clinicalModule).setFacilityModulePosition(1).setFacilityModuleElm(createCase.facility);\n  await createCaseHelper.addEditCase(caseObj);\n  await createCaseHelper.submitNewCase();\n});\nawait step('click the editCase button to edit the case for the second time', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetail.caseOption);\n  await helper.clickVisibleElement(caseDetail.caseOption);\n  await helper.waitForElementToBeVisible(caseDetail.editCaseButton);\n  await helper.clickVisibleElement(caseDetail.editCaseButton);\n});\nawait step('edits the case for the second time', this, async () => {\n  await createCaseHelper.addEditCase(caseObj);\n  await createCaseHelper.submitNewCase();\n});\nawait step('verifies that the case was modified twice', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetail.caseOption);\n  await helper.waitForElementToBeVisible(caseDetail.firstCollabMsg);\n  const collabMessages = await Promise.all([caseDetail.secondCollabMsg.getText(), caseDetail.thirdCollabMsg.getText()]);\n  const secondText = collabMessages[0];\n  const thirdText = collabMessages[1];\n  const collabMsg = 'Modified case';\n  expect(secondText.includes(collabMsg) && thirdText.includes(collabMsg)).to.be.true;\n});",
              "err": {},
              "uuid": "66abfeeb-849c-43d6-bcf3-bcc3d566d03b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "66abfeeb-849c-43d6-bcf3-bcc3d566d03b"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "4f16c262-1013-4c12-a100-1dd0b527e356",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "f18b6a75-cce2-4a43-aea3-1a3eed18a71d",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "70cb7c09-e064-4a35-af91-7beb818bd8bf",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "6f694e0e-52a2-45fe-ab60-4429f1396e1c",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "03c9af92-1a8c-4c97-8166-6618824e87a1",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "3138f8c5-4a19-483f-be5b-c73aa1216c76",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "f7b2ded6-1343-4251-abc8-c28afab0bbf7",
          "title": "Verify user is able to share case details via fax",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/cases-detail/share-case-detail-spec.js",
          "file": "/e2e/sites/specs/cases/cases-detail/share-case-detail-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify user is able to share case details via fax \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return enterpriseAuthHelper.loginEnterprise();",
              "err": {},
              "uuid": "956033df-9a9e-4815-baf8-cfda3fba8434",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C402 - Verify user is able to share case details via fax #smoke #sanity",
              "fullTitle": "Verify user is able to share case details via fax C402 - Verify user is able to share case details via fax #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should login on enterprise successfully', this, async () => {\n  await helper.waitForElementToBeVisible(enterprise.pageTitle);\n  expect(await enterprise.pageTitle.getText()).to.includes(CONSTANTS.DASHBOARD.welcome);\n});\nawait step('should enable fax option from Phaxio if already disabled', this, () => {\n  return settingsHelper.toggleFaxOption(true);\n});\nawait step('should login on sites successfully', this, async () => {\n  await sitesAuthHelper.loginSites();\n  return sitesAuthHelper.loggedIn();\n});\nawait step('should create a case', this, async () => {\n  await caseHelper.createCase(createCase.clinicalModule, createCase.facility);\n  return helper.waitForElement(caseDetail.videoMessagePane);\n});\nawait step('should share a case detail using fax', this, async () => {\n  await caseSharingHelper.shareCaseDetailsViaFax();\n  await helper.waitAndClick(caseDetail.shareDetailDropDown);\n  await caseDetail.faxNumber.sendKeys(CONSTANTS.FAX_NUMBER);\n  await helper.waitAndClick(caseDetail.sendCaseDetailsViaFax);\n  await helper.waitForElementToBeVisible(caseDetail.faxToast);\n  expect(await caseDetail.faxToastMessage.getText()).to.equal(CONSTANTS.SENDING_PDF_TO_FAX);\n  await helper.waitForElementToBeVisible(caseDetail.collabMessage);\n  expect(await caseDetail.collabMessage.getText()).to.exist;\n});",
              "err": {},
              "uuid": "80afdfbc-50f8-4ec1-bcfd-6fa476296046",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "80afdfbc-50f8-4ec1-bcfd-6fa476296046"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "2509c3e9-a27d-4877-912d-2f025bc3ef42",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "2452a2fe-9966-4f37-a8cd-a9fdd99fac68",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "cad15cb7-8cf2-48b5-a451-805e3b9f8423",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "ad65b006-281f-48f0-80a8-323051c12b44",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "49a3109e-6c9d-4460-92d5-78e4a4963f15",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "0665dc37-37af-405d-bb34-013f61fc4060",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "bf1ade60-8568-4531-9d45-d5ec177656af",
          "title": "Verify user can edit patient name and MRN on intake - case details page",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/cases-detail/editing-patient-name-and-mrn-on-intake-form-spec.js",
          "file": "/e2e/sites/specs/cases/cases-detail/editing-patient-name-and-mrn-on-intake-form-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify user can edit patient name and MRN on intake - case details page \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "fc28dd87-3dc8-4bf3-9c5c-8903817c1f20",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Verify user can edit patient name and MRN on intake - case details page \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await browser.get(caseUrl);\nreturn caseHelper.cancelCase();",
              "err": {},
              "uuid": "b556571c-1984-431f-9b15-5c2a90123c26",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C356 - Verify user can edit patient name and MRN on intake - case details page #smoke #sanity",
              "fullTitle": "Verify user can edit patient name and MRN on intake - case details page C356 - Verify user can edit patient name and MRN on intake - case details page #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should build and submit a new case', this, async () => {\n  return caseHelper.createCase(createCase.clinicalModule, createCase.facility);\n});\nawait step('should check that the side bar is not hidden', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetail.menuIcon);\n  caseUrl = await browser.getCurrentUrl();\n  const menu = await caseDetail.showMenu;\n  const value = await menu.isDisplayed();\n  if (value !== false) {\n    await helper.clickElement(caseDetail.menuIcon);\n  }\n});\nawait step('should edit the intake form', this, async () => {\n  await helper.waitForElementToBeClickable(caseDetail.editIntakeForm);\n  await helper.waitForElementToBeClickable(caseDetail.intakeFormEditLink);\n  await helper.clickElement(caseDetail.intakeFormEditLink);\n  await helper.waitForElementToBeClickable(caseDetail.intakeFirstName, 500);\n  await helper.replaceInputValue(caseDetail.intakeFirstName, '', firstName);\n  await helper.waitForElement(caseDetail.intakeLastName);\n  await helper.replaceInputValue(caseDetail.intakeLastName, '', lastName);\n  await helper.waitForElement(caseDetail.intakeMrn);\n  await helper.replaceInputValue(caseDetail.intakeMrn, '', MRN);\n  const signatureBox = await caseDetail.formSignatureCheckbox.isPresent();\n  if (signatureBox) {\n    await caseHelper.checkSignatureBox();\n  }\n  await helper.dismissToastIfPresent();\n  await helper.waitAndClick(caseDetail.intakeSubmit);\n});\nawait step('should refresh the page and wait for the page to reload and update the patient name', this, async () => {\n  await browser.driver.navigate().refresh();\n  await helper.waitForElement(caseDetail.videoMessagePane);\n});\nawait step('should save and verify the patient name', this, async () => {\n  await helper.waitForHelperMethodToExecute(helper.anyTextToBePresentInElement(caseDetail.patientName));\n  const name = await caseDetail.patientName.getText();\n  expect(`${firstName} ${lastName}`).to.includes(name);\n});\nawait step('should verify the mrn', this, async () => {\n  await helper.waitForElement(caseDetail.patientMrn);\n  await helper.waitForHelperMethodToExecute(helper.anyTextToBePresentInElement(caseDetail.patientMrn));\n  const mrn = await caseDetail.patientMrn.getText();\n  expect(mrn).contain(MRN);\n});",
              "err": {},
              "uuid": "5a754444-1d25-4afc-8d26-6e8f27bbadb5",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "5a754444-1d25-4afc-8d26-6e8f27bbadb5"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "cd34af20-b318-477d-9b17-36ad58dabd3a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "1ad06f3d-b318-4093-a25a-96c4a6a6beee",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "c2d0925e-ec8c-451f-924d-a0ecf3b36521",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "fc0f158c-2f36-4fbc-9d7e-4bbab9ea1277",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "bf513495-a8e2-4b33-beee-0b9b73ec7d36",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "ed8bcbd5-4ab0-4b9f-b36a-7dd2181f8ff0",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "4df30aa0-3c93-44de-8a06-d788c9bce6ee",
          "title": "Verify user should not see fax sharing option if Faxing using Phaxio is disabled at enterprise level",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/cases-detail/disable-fax-option-for-case-sharing-spec.js",
          "file": "/e2e/sites/specs/cases/cases-detail/disable-fax-option-for-case-sharing-spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Verify user should not see fax sharing option if Faxing using Phaxio is disabled at enterprise level \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await enterpriseAuthHelper.loginEnterprise();\nreturn settingsHelper.toggleFaxOption(true);",
              "err": {},
              "uuid": "5eaef1b5-a5be-41f8-b16b-08ec5f3803a4",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C940103 - Verify user should not see fax sharing option if Faxing using Phaxio is disabled at enterprise level #smoke #sanity",
              "fullTitle": "Verify user should not see fax sharing option if Faxing using Phaxio is disabled at enterprise level C940103 - Verify user should not see fax sharing option if Faxing using Phaxio is disabled at enterprise level #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should login on enterprise successfully', this, async () => {\n  await enterpriseAuthHelper.loginEnterprise();\n  await helper.waitForElementToBeVisible(enterprise.pageTitle);\n  expect(await enterprise.pageTitle.getText()).to.includes(CONSTANTS.DASHBOARD.welcome);\n});\nawait step('should disable fax option from Phaxio if enabled', this, async () => {\n  return settingsHelper.toggleFaxOption(false);\n});\nawait step('should login on sites successfully', this, async () => {\n  return sitesAuthHelper.loginSites({}, true);\n});\nawait step('should create a case', this, async () => {\n  return caseHelper.createCase(createCase.clinicalModule, createCase.facility);\n});\nawait step('shouldnot have a fax option while sharing case detail in dropdown', this, async () => {\n  await caseSharingHelper.shareCaseDetailsViaFax();\n  const isFaxVisible = await caseDetail.shareDetailDropDown.isPresent();\n  expect(isFaxVisible).to.equal(false);\n});",
              "err": {},
              "uuid": "54b568b0-c2f7-4b4f-8878-d91152e94a31",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "54b568b0-c2f7-4b4f-8878-d91152e94a31"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "db8263a7-9e8f-4567-8e51-23c69020244f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "0f34b988-907a-4bad-bda9-56e066e19493",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "1ac6331a-3e5d-49a9-91e3-dda7b3e4a572",
          "title": "Verify adding new case with patient creation including EHR/MRN and verify the patient name",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/cases-detail/verify-EHR-MRN-and-patient-name-spec.js",
          "file": "/e2e/sites/specs/cases/cases-detail/verify-EHR-MRN-and-patient-name-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify adding new case with patient creation including EHR/MRN and verify the patient name \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "7e295579-ddbf-4e13-a123-77823cde41cc",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C378 - Verify adding new case with patient creation including EHR/MRN and verify the patient name #smoke #sanity",
              "fullTitle": "Verify adding new case with patient creation including EHR/MRN and verify the patient name C378 - Verify adding new case with patient creation including EHR/MRN and verify the patient name #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should build and submit a new case', this, async () => {\n  // I am not calling the \"caseHelper.createCase()\" method here because I need to add a new patient during the case creation so I can verify the patient's\n  // fullName and MRN at the case-detail page. Modifying the \"caseHelper.createCase()\" would add this additional step for all the other test cases that is\n  // calling this method which would not be efficient and prolong the execution time of those tests.\n  const caseObj = caseBuilder.setClinicalModulePosition(1, createCase.clinicalModule).setClinicalModuleElm(createCase.clinicalModule).setFacilityModulePosition(1).setFacilityModuleElm(createCase.facility).setNewPatientFlag().setPatientDetails(CONSTANTS.PATIENT1);\n  newCase = await CreateCaseHelper.addEditCase(caseObj);\n  return CreateCaseHelper.submitNewCase();\n});\nawait step('should verify that the user is on case detail page', this, () => {\n  return helper.waitForElement(caseDetail.videoMessagePane);\n});\nawait step('verify the patient name appearing on the case detail page', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetail.assignToMeButton);\n  await helper.clickVisibleElement(caseDetail.assignToMeButton);\n  await helper.waitForElementToBeInvisible(caseDetail.assignToMeButton);\n  const patientName = await caseDetail.patientName.getText();\n  expect(patientName).contain(newCase.caseDetails.fullName);\n});\nawait step('verify the MRN appearing on the case detail page', this, async () => {\n  await helper.waitForHelperMethodToExecute(helper.anyTextToBePresentInElement(caseDetail.mrn));\n  const patientMRN = await caseDetail.mrn.getText();\n  expect(patientMRN).equal(`(MRN - ${newCase.caseDetails.ehr}: ${newCase.caseDetails.mrn})`);\n});",
              "err": {},
              "uuid": "bf6d93d8-a81d-4f92-8a46-495ea9af4f2e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "bf6d93d8-a81d-4f92-8a46-495ea9af4f2e"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "0dbde569-04fc-4339-a5f5-ae0ffee7fdff",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "ede85cb2-271d-4d4f-b4ba-375dc6e9e89e",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "21d5f7f7-85ee-4c91-9ff9-d2898e1672ca",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "829cb23a-f8d1-4a45-aec0-e843313b6c93",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "ffcbb6e0-4d55-4d7c-a7da-a1882ad9595b",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "e9ed8a3d-da98-4f25-a45c-466953d755cb",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "76bb403c-7407-422c-8afd-b95dbfec2951",
          "title": "Verify editing patient details [MRN, DOB and First and Last Name] via edit button on patient demographics and check the patient information is updated on header",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/cases-detail/verifying-patient-edit-button-spec.js",
          "file": "/e2e/sites/specs/cases/cases-detail/verifying-patient-edit-button-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify editing patient details [MRN, DOB and First and Last Name] via edit button on patient demographics and check the patient information is updated on header \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "3a07f327-3116-4f0e-b998-cc259811f1ac",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Verify editing patient details [MRN, DOB and First and Last Name] via edit button on patient demographics and check the patient information is updated on header \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await browser.get(caseUrl);\nreturn caseHelper.cancelCase();",
              "err": {},
              "uuid": "9c19b04f-563c-4bff-b292-9fa1b8612425",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C1451916 - Verify editing patient details [MRN, DOB and First and Last Name] via edit button on patient demographics and check the patient information is updated on header #smoke #sanity",
              "fullTitle": "Verify editing patient details [MRN, DOB and First and Last Name] via edit button on patient demographics and check the patient information is updated on header C1451916 - Verify editing patient details [MRN, DOB and First and Last Name] via edit button on patient demographics and check the patient information is updated on header #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should build and submit a new case', this, async () => {\n  const caseObj = caseBuilder.setClinicalModulePosition(1, createCase.clinicalModule).setClinicalModuleElm(createCase.clinicalModule).setFacilityModulePosition(1).setFacilityModuleElm(createCase.facility).setNewPatientFlag().setPatientDetails(CONSTANTS.PATIENT1);\n  await createCaseHelper.addEditCase(caseObj);\n  return createCaseHelper.submitNewCase();\n});\nawait step('should navigate to demographics edit form', this, async () => {\n  await Helper.waitAndClick(caseDetails.assignToMeButton); // wait for case details page to load properly - will be fixed in BW-21082\n  browser.sleep(5000);\n  caseUrl = await browser.getCurrentUrl();\n  await Helper.waitAndClick(caseDetails.patientDemographicsNavItem);\n  await Helper.scrollElemFinderIntoView(caseDetails.demographicsEditForm); // wait for demographics edit form to be visible  - will be fixed in BW-21082\n  browser.sleep(1000);\n  return Helper.waitAndClick(caseDetails.demographicsEditForm);\n});\nawait step('should edit patient details[MRN, DOB, FirstName, Lastname] via edit button on patient demographics', this, () => {\n  return patientHelper.editExistingPatient(helperInstance, {\n    casePatientObject: createCase,\n    input: {\n      isMRNRequired: true\n    },\n    patientConstant: CONSTANTS.PATIENT2\n  });\n});\nawait step('should save the updated patient demographic details', this, async () => {\n  await Helper.scrollToElement(caseDetails.saveEditedPatientDemographics);\n  await Helper.waitForElementToBeClickable(caseDetails.saveEditedPatientDemographics);\n  return Helper.clickElement(caseDetails.saveEditedPatientDemographics);\n});\nawait step('should refresh the page to make sure changes are updated', this, () => {\n  return browser.driver.navigate().refresh();\n});\nawait step('should verify patient details are updated on case details summary', this, async () => {\n  const savedMRN = await helperInstance.getSavedValues().find(savedObject => savedObject.id === 'ext-mrn-0').value; // wait for case details page to load data - will be fixed in BW-21082\n  browser.sleep(3000);\n  await Helper.waitForElementToBeVisible(caseDetails.patientNameWithMRN);\n  expect(await caseDetails.patientNameWithMRN.getText()).to.include(CONSTANTS.PATIENT2.FIRST_NAME);\n  expect(await caseDetails.patientNameWithMRN.getText()).to.include(CONSTANTS.PATIENT2.LAST_NAME);\n  expect(await caseDetails.mrn.getText()).to.include(savedMRN);\n});",
              "err": {},
              "uuid": "89a2ceb4-507f-42be-bbb0-4024edf43431",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "89a2ceb4-507f-42be-bbb0-4024edf43431"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "34aa75f0-bd08-44c7-9944-a409308ea890",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "5e977f5c-f98b-46a5-a708-6c384641f329",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "4d015751-95b9-4308-9ae5-aa0123aad474",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "930f46f9-ec52-4695-9cde-738ebe6d7345",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "550c866a-a3e3-413f-bffe-acc77f9b5f5e",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "16c8d7ef-b33e-4e2b-b950-30484948dc70",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "76877899-0b44-4ecf-8df0-3239e510dc8e",
          "title": "Verify user can view all the data on case detail page which was entered during case creation (Service line and facility)",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/cases-detail/verifying-case-detail-page-data-spec.js",
          "file": "/e2e/sites/specs/cases/cases-detail/verifying-case-detail-page-data-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify user can view all the data on case detail page which was entered during case creation (Service line and facility) \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "e253ecef-0855-4685-b31a-10f51be241fb",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Verify user can view all the data on case detail page which was entered during case creation (Service line and facility) \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await browser.get(caseUrl);\nreturn caseHelper.cancelCase();",
              "err": {},
              "uuid": "46adb2e6-be9f-4c8c-84c8-79cb1921e484",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C355 - Verify user can view all the data on case detail page which was entered during case creation (Service line and facility) #smoke #sanity",
              "fullTitle": "Verify user can view all the data on case detail page which was entered during case creation (Service line and facility) C355 - Verify user can view all the data on case detail page which was entered during case creation (Service line and facility) #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should create and submit a case', this, async () => {\n  newCase = await caseHelper.createCase(createCase.clinicalModule, createCase.facility);\n});\nawait step('should verify that the user is on the caseDetail page', this, async () => {\n  await helper.waitForElement(caseDetail.videoMessagePane);\n  await helper.waitForElement(caseDetail.clinicalModule);\n  caseUrl = await browser.getCurrentUrl();\n  return browser.wait(helper.waitForElementToBeVisible(caseDetail.clinicalModule), CONSTANTS.MAX_TIME_FOR_BROWSER_WAIT, 'Clinical Module in expected element.');\n});\nawait step('should verify that the clinical module name appears on the caseDetail page', this, () => {\n  return browser.wait(helper.anyTextToBePresentInElement(caseDetail.clinicalModule), CONSTANTS.MAX_TIME_FOR_BROWSER_WAIT, 'Clinical Module in expected element.');\n});\nawait step('should verify the caseDetail page shows the clinical module name that was selected during case creation', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetail.clinicalModule);\n  await helper.waitAndClick(caseDetail.assignToMeButton);\n  let text = await caseDetail.clinicalModule.getText();\n  text = text.split('-')[0].trim();\n  expect(text).to.equal(newCase.caseDetails.clinicalModule);\n  return helper.waitForElement(caseDetail.facilityModule);\n});\nawait step('should verify that the facility name appears on the caseDetail page', this, () => {\n  return browser.wait(helper.anyTextToBePresentInElement(caseDetail.facilityModule), CONSTANTS.MAX_TIME_FOR_BROWSER_WAIT, 'Facility Module in expected element.');\n});\nawait step('should verify the caseDetail page shows the facility name that was selected during case creation', this, async () => {\n  const text = await caseDetail.facilityModule.getText();\n  expect(text).to.equal(newCase.caseDetails.facilityModule);\n});",
              "err": {},
              "uuid": "9342851d-e992-49fd-9bc7-0349cee7d4db",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "9342851d-e992-49fd-9bc7-0349cee7d4db"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "3c9c85fb-4ca4-4b30-9529-b8ef3601e19d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "062cbbe9-91ff-4585-96f6-7eb5bb69a2ad",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "881271a7-55d5-4231-a550-f85dfd010e06",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "e8af93b1-358d-46c7-b7a7-b40515fb4096",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "969b9417-17a8-4f31-bf09-5c97efb18c38",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "724a4f00-9069-46e9-9546-d68db88a7c1d",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "eb52a2bb-5301-4b66-93de-aa1fe4e941fc",
          "title": "Verify recommend prescription is appearing on provider notes v2(once case is completed)",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/cases-detail/verifying-recommended-prescription-is-displayed-on-provider-notes-form-spec.js",
          "file": "/e2e/sites/specs/cases/cases-detail/verifying-recommended-prescription-is-displayed-on-provider-notes-form-spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Verify recommend prescription is appearing on provider notes v2(once case is completed) \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// uncheck signature on provider notes case form.\nawait enterpriseAuthHelper.loginEnterprise();\nawait Helper.waitForElementToBeVisible(enterprise.pageTitle);\nawait serviceLineHelper.navigateToWorkflow();\nreturn caseFormHelper.disableSignatureCheck(enterprise.providerNotesVTwo);",
              "err": {},
              "uuid": "26b22071-7c3d-4ee7-9ccb-e05a73295769",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C369 - Verify recommend prescription is appearing on provider notes v2(once case is completed) #smoke #sanity",
              "fullTitle": "Verify recommend prescription is appearing on provider notes v2(once case is completed) C369 - Verify recommend prescription is appearing on provider notes v2(once case is completed) #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('login into enterprise', this, async () => {\n  await enterpriseAuthHelper.loginEnterprise(); // login on enterprise successfully\n  await Helper.waitForElementToBeVisible(enterprise.pageTitle);\n  await expect(enterprise.pageTitle.getText()).to.eventually.includes(CONSTANTS.DASHBOARD.welcome);\n});\nawait step('navigate to service line settings page', this, async () => {\n  await serviceLineHelper.serviceLineSettingsPage();\n});\nawait step('enable ePrescribe from enterprise if disabled', this, async () => {\n  await serviceLineHelper.toggleEPrescribeCheckbox();\n});\nawait step('enable provider notes v2 from enterprise', this, async () => {\n  await serviceLineHelper.navigateToEnterpriseDashboard();\n  await serviceLineHelper.navigateToWorkflow();\n  return caseFormHelper.addFormIfNotExist(enterprise.providerNotesVTwo, enterprise.providerNotesFormOption, helperInstance, true);\n});\nawait step('should login on sites successfully', this, async () => {\n  await sitesAuthHelper.loginSites();\n  return sitesAuthHelper.loggedIn();\n});\nawait step('should create a case', this, async () => {\n  return caseHelper.createCase(createCase.clinicalCardiology, createCase.facility);\n});\nawait step('should successfully update the form with recommended prescription notes', this, async () => {\n  await Helper.waitAndClick(caseDetail.providerNotesNavItem);\n  await Helper.waitForElementToBeVisible(caseDetail.addProviderNotesLink);\n  await Helper.waitAndClick(caseDetail.addProviderNotesLink);\n  await Helper.waitForElementToBeVisible(caseDetail.providerFormTypeSelect);\n  await Helper.waitAndClick(caseDetail.providerFormTypeSelect);\n  await Helper.waitAndClick(caseDetail.providerFormType);\n  await Helper.waitForElementToBeVisible(caseDetail.providerPatientDispositionDropdown);\n  await Helper.clickElement(caseDetail.providerPatientDispositionDropdown);\n  await Helper.scrollToElement(caseDetail.providerPatientDispositionList);\n  await Helper.waitForElementToBeVisible(caseDetail.providerPatientDispositionList);\n  await Helper.waitAndClick(caseDetail.providerPatientDispositionOptionTwo);\n  await Helper.waitAndClick(caseDetail.prescriptionRecommendation);\n  await helperInstance.replaceInputAndSaveValue(caseDetail.prescriptionRecommendation, '', recommendedPrescription);\n  const signaturecheckbox = await caseDetail.formSignatureCheckbox.isPresent();\n  if (signaturecheckbox) {\n    await caseHelper.checkSignatureBox();\n  }\n  await Helper.scrollToElement(caseDetail.providerPatientFormSubmit);\n  return Helper.waitAndClick(caseDetail.providerPatientFormSubmit);\n});\nawait step('should complete a case ', this, async () => {\n  await browser.driver.navigate().refresh();\n  await caseHelper.checkIfFormIsRequired();\n  await Helper.waitAndClick(caseDetail.assignToMeButton);\n  await Helper.waitAndClick(caseDetail.completeCaseButton);\n  return Helper.waitAndClick(caseDetail.modalConfirm);\n});\nawait step('should verify that added prescription is visible on case details summary', this, async () => {\n  await Helper.waitAndClick(caseDetail.providerNotesNavItem);\n  expect(await caseDetail.recommendedPrescription.getText()).to.equal(recommendedPrescription);\n});",
              "err": {},
              "uuid": "e5a2374d-ca08-4d64-9cd2-e1207b4ba1d5",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "e5a2374d-ca08-4d64-9cd2-e1207b4ba1d5"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "0f36ac56-f880-4ed1-bc7d-42babd24e93c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "452556cf-6066-4aa3-b594-57350367b4d5",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "834deb37-2f5a-4859-bd54-4d153292ad94",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "2221bed5-8ed7-4c25-9e81-b554f0a6baf0",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "ad18771b-3287-4505-8a30-595ead062906",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "896eda04-492f-4098-a32e-46480b6b24ae",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "96b5fb18-4899-424e-8e90-aef24967f56b",
          "title": "Verify snippets can be added on provider notes",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/cases-detail/verifying-snippets-can-be-added-to-provider-notes-spec.js",
          "file": "/e2e/sites/specs/cases/cases-detail/verifying-snippets-can-be-added-to-provider-notes-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify snippets can be added on provider notes \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return enterpriseAuthHelper.loginEnterprise();",
              "err": {},
              "uuid": "76857a1e-0a30-4d9e-809c-a42a76d4a7ed",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C375 - Verify snippets can be added on provider notes #smoke #sanity",
              "fullTitle": "Verify snippets can be added on provider notes C375 - Verify snippets can be added on provider notes #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should login on enterprise successfully', this, async () => {\n  await Helper.waitForElementToBeVisible(enterprise.pageTitle);\n  expect(await enterprise.pageTitle.getText()).to.includes(CONSTANTS.DASHBOARD.welcome);\n});\nawait step('should navigate to worflow screen and select cardiology service line', this, () => {\n  return caseFormHelper.navigateAndSelectWorkFlow(enterprise.workflow, enterprise.caseForm);\n});\nawait step('should disable provider notes 1.0 version on cardiology service line if enabled', this, () => {\n  return caseFormHelper.disableCaseForm(enterprise.providerNotesVOne);\n});\nawait step('should add intake form on cardiology service line if not already added', this, () => {\n  return caseFormHelper.addFormIfNotExist(enterprise.intakeCaseForm, enterprise.intakeFormOption, helperInstance);\n});\nawait step('should add provider notes 2.0 on cardiology service line if not already added', this, () => {\n  return caseFormHelper.addFormIfNotExist(enterprise.providerNotesVTwo, enterprise.providerNotesFormOption, helperInstance);\n});\nawait step('should navigate to manage snippet screen', this, () => {\n  return caseFormHelper.navigateToManageSnippet();\n});\nawait step('should add a new snippet', this, () => {\n  return settingsHelper.addSnippetIfNotExist(helperInstance);\n});\nawait step('login to clinical Portal', this, async () => {\n  await sitesAuthHelper.loginSites();\n  return sitesAuthHelper.loggedIn();\n});\nawait step('create a case with cardiology serviceline', this, async () => {\n  const caseObj = caseBuilder.setClinicalModulePosition(1, createCase.clinicalCardiology).setClinicalModuleElm(createCase.clinicalCardiology).setFacilityModulePosition(1).setFacilityModuleElm(createCase.facility).setNewPatientFlag().setPatientDetails(CONSTANTS.PATIENT1);\n  caseObj.isSnippetRequiredOnIntakeForm = true;\n  await createCaseHelper.addEditCase(caseObj);\n  return createCaseHelper.submitNewCase();\n});\nawait step('should verify that snippet is added on intake form on case details page', this, async () => {\n  await Helper.waitForElementToBeVisible(caseDetail.assignToMeButton);\n  await Helper.waitAndClick(caseDetail.assignToMeButton);\n  await Helper.waitForElement(caseDetail.unassignCase);\n  expect(await caseDetail.unassignCase.getText()).to.equal(CONSTANTS.UNASSIGN);\n  await Helper.waitAndClick(caseDetail.intakeNavItem);\n  await Helper.scrollToElement(caseDetail.intakeReferringNotes);\n  expect(await caseDetail.intakeReferringNotes.getText()).to.equal(CONSTANTS.SNIPPET.description);\n});\nawait step('should navigate to provider notes form on case details page', this, () => {\n  return Helper.waitAndClick(caseDetail.providerNotesNavItem);\n});\nawait step('should add provider notes', this, async () => {\n  await Helper.waitForElementToBeVisible(caseDetail.addProviderNotesLink);\n  return Helper.waitAndClick(caseDetail.addProviderNotesLink);\n});\nawait step('should select provider form type as Free Text', this, async () => {\n  await Helper.waitForElementToBeVisible(caseDetail.providerFormTypeSelect);\n  await Helper.waitAndClick(caseDetail.providerFormTypeSelect);\n  await Helper.waitForElementToBeVisible(caseDetail.providerFormType);\n  return Helper.waitAndClick(caseDetail.providerFormType);\n});\nawait step('should add snippet on providers notes form', this, async () => {\n  await Helper.waitAndClick(caseDetail.snippetIcon);\n  await Helper.waitForElementToBeVisible(createCase.selectAddedSnippet);\n  await Helper.clickElement(createCase.selectAddedSnippet);\n  return Helper.waitAndClick(createCase.insertSnippet);\n});\nawait step('should add patient disposition on provider notes form', this, async () => {\n  await Helper.scrollToElement(caseDetail.providerPatientDispositionDropdown); // here wait for bottom black popup to hide\n  await Helper.scrollToElement(caseDetail.providerPatientFormSubmit);\n  await Helper.waitForElementToBeVisible(caseDetail.providerPatientDispositionDropdown);\n  await Helper.clickElement(caseDetail.providerPatientDispositionDropdown);\n  await Helper.scrollToElement(caseDetail.providerPatientDispositionList);\n  await Helper.waitForElementToBeVisible(caseDetail.providerPatientDispositionList);\n  await Helper.waitAndClick(caseDetail.patientDispositionOptionOne);\n  await Helper.waitAndClick(caseDetail.prescriptionRecommendation);\n  await helperInstance.replaceInputAndSaveValue(caseDetail.prescriptionRecommendation, '', recommendedPrescription);\n  const signaturecheckbox = await caseDetail.formSignatureCheckbox.isPresent();\n  if (signaturecheckbox) {\n    await caseHelper.checkSignatureBox();\n  }\n});\nawait step('should save and submit provider notes form', this, async () => {\n  await Helper.scrollToElement(caseDetail.providerPatientFormSubmit);\n  const isToastMessageVisible = await caseDetail.faxToastMessage.isPresent();\n  if (isToastMessageVisible) {\n    await Helper.waitForElementToBeInvisible(caseDetail.faxToastMessage);\n  }\n  return Helper.waitAndClick(caseDetail.providerPatientFormSubmit);\n});\nawait step('should refresh the page to ensure changes are updated', this, () => {\n  return browser.driver.navigate().refresh();\n});\nawait step('should complete a case ', this, async () => {\n  await Helper.waitForElement(caseDetail.reassignBtn);\n  await Helper.waitForElementToBeVisible(caseDetail.completeCaseButton);\n  await Helper.clickVisibleElement(caseDetail.completeCaseButton);\n  await Helper.waitForElementToBeVisible(caseDetail.modalConfirm);\n  return Helper.clickVisibleElement(caseDetail.modalConfirm);\n});\nawait step('should verify that snippet is added on privder notes form on case details page', this, async () => {\n  await Helper.waitAndClick(caseDetail.providerNotesNavItem);\n  await Helper.waitForElementToBeVisible(caseDetail.patientNotes);\n  expect(await caseDetail.patientNotes.getText()).to.equal(CONSTANTS.SNIPPET.description);\n});",
              "err": {},
              "uuid": "1e436434-31d6-4a89-a736-3e22864e1c95",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "1e436434-31d6-4a89-a736-3e22864e1c95"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "6e77f4a4-bc65-4c5e-9c41-fea0c399a1de",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "84748453-785c-4125-9b0b-8d0801c31d83",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "00078b3d-a451-4e56-8770-a602c568c496",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "f52a4f62-d649-4561-8a1c-27169f887029",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "ced32d4c-a4fb-46c7-8006-d9fa7183b155",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "f1f03fe0-fa2f-4a6c-b327-6dd03a2ae6db",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "f12975e7-5726-4662-8c25-a5c781b8fbea",
          "title": "Verify creating case with endpoint for any patient user",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/create-case-with-endpoint-for-any-patient-spec.js",
          "file": "/e2e/sites/specs/cases/create-case-with-endpoint-for-any-patient-spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Verify creating case with endpoint for any patient user \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await browser.get(caseUrl);\nreturn caseHelper.cancelCase();",
              "err": {},
              "uuid": "d20299e8-918c-4df9-a019-0d56d97305ee",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C405 - Verify creating case with endpoint for any patient user #smoke #sanity",
              "fullTitle": "Verify creating case with endpoint for any patient user C405 - Verify creating case with endpoint for any patient user #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should login on sites', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('Go to Add Case page', this, () => {\n  return createCaseHelper.addCasePage();\n});\nawait step('Select Clinical Module', this, () => {\n  return helper.waitAndClick(createCase.clinicalModule);\n});\nawait step('Select Facility', this, () => {\n  return helper.waitAndClick(createCase.facilityWithEndPoint);\n});\nawait step('Select Endpoint', this, () => {\n  return helper.waitAndClick(createCase.endpointOption);\n});\nawait step('Add patient', this, async () => {\n  await helper.waitAndClick(patients.searchPatientSubmit);\n  return helper.waitAndClick(patients.searchPatientSelect);\n});\nawait step('Submit intake', this, () => {\n  return helper.waitAndClick(createCase.intakePageContinueBtn);\n});\nawait step('Submitting case should create a new case', this, async () => {\n  await helper.waitAndClick(createCase.submitCaseBtn);\n  await helper.waitForUrlToHave(CONSTANTS.ROUTE.caseDetail);\n  expect(await browser.getCurrentUrl()).to.include(CONSTANTS.ROUTE.caseDetail);\n  caseUrl = await browser.getCurrentUrl();\n  await helper.waitForElementToBePresent(CaseDetail.endpointName);\n  expect(await CaseDetail.endpointName.isPresent()).to.be.true;\n});",
              "err": {},
              "uuid": "26da2ca0-61f0-4685-a0f9-0ae2c09f3752",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "26da2ca0-61f0-4685-a0f9-0ae2c09f3752"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "40ef119b-c44e-4e2a-98e9-3af7128129eb",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "1f9428db-f861-4766-8fe1-5d36c2dc965b",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "e9bffb63-bd18-42c4-a801-b8fc48c277dd",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "c3626b61-b5cd-4996-99b2-22774a59fd8c",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "b84710b5-de03-43d6-9b2f-6d80f2afbe5f",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "393abc4a-1210-40bf-b316-b273d6661db7",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "31b217a7-ef0b-4701-a8b5-0c8c17da570a",
          "title": "User should successfully mark and unmark a case as Test Case",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/mark-and-unmark-case-as-test-spec.js",
          "file": "/e2e/sites/specs/cases/mark-and-unmark-case-as-test-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C940133 - Verify user can mark/unmark the case as test via Flag test option on case details page #smoke #sanity",
              "fullTitle": "User should successfully mark and unmark a case as Test Case C940133 - Verify user can mark/unmark the case as test via Flag test option on case details page #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let caseUrl;\nawait step('Login to the Clinical Portal', this, async () => {\n  await authHelper.loginSites();\n  await authHelper.loggedIn();\n});\nawait step('Create case', this, async () => {\n  await casesHelper.createCase(createCase.clinicalModule, createCase.facility);\n});\nawait step('Flag the case as test case', this, async () => {\n  await helper.clickElement(caseDetail.caseOption);\n  await helper.waitForElementToBeVisible(caseDetail.flagOrUnflagTestCase);\n  await helper.clickElement(caseDetail.flagOrUnflagTestCase);\n  await helper.waitForElementToBeVisible(caseDetail.addOrRemoveFlagTest);\n  await helper.clickElement(caseDetail.addOrRemoveFlagTest);\n  await helper.waitForElementToBeVisible(caseDetail.testCaseTitle);\n  expect(await caseDetail.testCaseTitle.getText()).to.equal(CONSTANTS.CASES.caseHasBeenMarkedAsTest);\n});\nawait step('Unflag the case as test', this, async () => {\n  caseUrl = await browser.getCurrentUrl();\n  await helper.clickElement(caseDetail.caseOption);\n  await helper.waitForElementToBeVisible(caseDetail.flagOrUnflagTestCase);\n  await helper.clickElement(caseDetail.flagOrUnflagTestCase);\n  await helper.waitForElementToBeVisible(caseDetail.addOrRemoveFlagTest);\n  await helper.clickElement(caseDetail.addOrRemoveFlagTest);\n  await helper.waitForElementToBeInvisible(caseDetail.testCaseTitle);\n  expect(await caseDetail.testCaseTitle.isPresent()).to.equal(false);\n});\nawait step('Delete the case', this, async () => {\n  await browser.get(caseUrl);\n  return casesHelper.cancelCase();\n});",
              "err": {},
              "uuid": "01cfee56-d055-46af-aceb-8e078f6a2ba2",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "01cfee56-d055-46af-aceb-8e078f6a2ba2"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "c5128b21-94a6-410a-8f26-f41ec65e1fd8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "b2659dd8-919d-4039-b392-9255a9054a77",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "bf6ae5bc-34d7-47bf-ba3a-2a56d66157d8",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "2087304c-372d-438e-962b-854d1bef15da",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "7439d912-4136-46ce-a47d-1e1ba0d0b25a",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "bb047f50-3ed6-4be3-ac18-7d4e8efebf74",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "b56dca87-d61c-49b1-8194-86e89acccdd5",
          "title": "Verify that provider should able to link case with patient to already created case without patient",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/provider-should-able-to-link-case-with-patient-to-already-created-case-without-patient-spec.js",
          "file": "/e2e/sites/specs/cases/provider-should-able-to-link-case-with-patient-to-already-created-case-without-patient-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify that provider should able to link case with patient to already created case without patient \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return authHelper.loginSites({}, true);",
              "err": {},
              "uuid": "5a140a90-6fc1-481c-8220-6e0354dcc3a2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1425571 - Verify that provider should able to link case with patient to already created case without patient #smoke",
              "fullTitle": "Verify that provider should able to link case with patient to already created case without patient C1425571 - Verify that provider should able to link case with patient to already created case without patient #smoke",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('navigate to add patient screen', this, async () => {\n  await patientHelper.patientSearchPage();\n  await Helper.waitAndClick(patients.addPatientBtn);\n  return Helper.waitForElementToBeVisible(patients.firstNameCreateInput);\n});\nawait step('add patient and save', this, async () => {\n  await patientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients\n  });\n  await patientHelper.submitNewPatient(patients);\n});\nawait step('should build and submit a new case', this, async () => {\n  await caseHelper.createCase(createCase.clinicalCardiology, createCase.facility);\n  return Helper.waitForElement(caseDetail.videoMessagePane);\n});\nawait step('click on link to patient account', this, async () => {\n  await Helper.waitAndClick(caseDetail.IntakeNavList);\n  return Helper.waitAndClick(caseDetail.linkToPatient);\n});\nawait step('search patient', this, async () => {\n  const firstName = await patientHelper.getSavedPatientFullName(helperInstance).split(' ')[0];\n  const lastName = await patientHelper.getSavedPatientFullName(helperInstance).split(' ')[1];\n  await helperInstance.replaceInputAndSaveValue(caseDetail.searchPatientFirstName, '', firstName);\n  await helperInstance.replaceInputAndSaveValue(caseDetail.searchPatientLastName, '', lastName);\n  await Helper.waitAndClick(caseDetail.search);\n  await Helper.waitAndClick(caseDetail.selectPatient);\n  await Helper.waitAndClick(caseDetail.clickLinkCase);\n});\nawait step('verify case updated with patient details', this, async () => {\n  await Helper.waitForUrlToHave(CONSTANTS.ROUTE.caseDetail);\n  await Helper.waitForElementToBeVisible(caseDetail.patientName);\n  const patientName = await caseDetail.patientNameWithMRN.getText();\n  expect(patientName).to.equal(patientHelper.getSavedPatientFullName(helperInstance));\n});",
              "err": {},
              "uuid": "eb9aa031-fc85-45bd-95eb-e20a79b8163f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "eb9aa031-fc85-45bd-95eb-e20a79b8163f"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "3627a69c-a562-4f4f-9e6c-c4f50dfdb7d9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "f5cd39bb-2c82-4e56-b3f8-55265f396097",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "e71bf395-66ff-4ce1-87fe-0c790058ffdf",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "1303e537-2dbb-4ee8-be7b-5ed87ac2dcd6",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "8dac7a80-1534-4707-ae30-d74e65e92162",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "0c66185a-f754-4389-8cd6-cf61cc681fc3",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "af9b4fd2-cdf0-4a1b-b810-b2b133a91638",
          "title": "Verify that My Cases screen is displayed upon clicking My Cases button on dashboard",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/my-cases-list-spec.js",
          "file": "/e2e/sites/specs/cases/my-cases-list-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify that My Cases screen is displayed upon clicking My Cases button on dashboard \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "30ed2ca2-64c5-4df3-94f5-37248116186f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C11365 - Verify that My Cases screen is displayed upon clicking My Cases button on dashboard #regression",
              "fullTitle": "Verify that My Cases screen is displayed upon clicking My Cases button on dashboard C11365 - Verify that My Cases screen is displayed upon clicking My Cases button on dashboard #regression",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should get my cases page.', this, async () => {\n  await helper.waitAndClick(header.clinicDropdown);\n  await helper.waitAndClick(header.myCases);\n  await helper.waitForUrlToHave(CONSTANTS.ROUTE.myCase);\n});\nawait step('should show My Cases list', this, async () => {\n  await myCasesHelper.getPage();\n  await helper.waitForElementToBeVisible(myCases.appBody);\n  const caseList = await myCasesHelper.getAllMyCases();\n  expect(caseList).to.be.an('array').that.is.not.empty;\n});\nawait step('should get <avz-tabs-component> component on My Cases HTML', this, async () => {\n  await myCasesHelper.getPage();\n  await helper.waitForElementToBeVisible(myCases.tabsComponent);\n  const tabName = await myCases.tabsComponent.getText();\n  expect(tabName).to.include(CONSTANTS.MY_CASES.tabActiveCasesName.toUpperCase());\n  expect(tabName).to.include(CONSTANTS.MY_CASES.tabCompletedCasesName.toUpperCase());\n  expect(tabName).to.include(CONSTANTS.MY_CASES.tabActiveAppointmentsName.toUpperCase());\n  expect(tabName).to.include(CONSTANTS.MY_CASES.tabCompletedAppointmentsName.toUpperCase());\n});\nawait step('should get ACTIVE tab of My Cases page', this, async () => {\n  await helper.clickElement(myCases.myCasesActiveTab);\n  await helper.waitForElementToBeVisible(myCases.h1Active);\n  const activeTabDescription = await myCases.h1Active.getText();\n  expect(activeTabDescription).to.include('You are working on');\n});\nawait step('should get COMPLETED tab of My Cases page', this, async () => {\n  await helper.clickElement(myCases.myCasesCompletedTab);\n  await helper.waitForElementToBeVisible(myCases.h1Completed);\n  const completedTabDescription = await myCases.h1Completed.getText();\n  expect(completedTabDescription).to.include('You have');\n});\nawait step('should get ACTIVE APPOINTMENTS tab of My Cases page', this, async () => {\n  await helper.clickElement(myCases.myCasesActiveAppointmentsTab);\n  await helper.waitForElementToBeVisible(myCases.appBody);\n  const activeAppointmentsTabDescription = await myCases.appBody.getText();\n  expect(activeAppointmentsTabDescription).to.include('Active Appointments');\n});\nawait step('should get COMPLETED APPOINTMENTS tab of My Cases page', this, async () => {\n  await helper.waitAndClick(myCases.myCasesCompletedAppointmentsTab);\n  await helper.waitForElementToBeVisible(myCases.appBody);\n  const completedAppointmentsTabDescription = await myCases.appBody.getText();\n  expect(completedAppointmentsTabDescription).to.include('Completed Appointments');\n});\nawait step('verify \"View Case\" button present on My Cases page', this, async () => {\n  await helper.clickElement(myCases.myCasesActiveTab);\n  await helper.waitForElementToBeVisible(myCases.h1Active);\n  const text = await myCases.viewCaseElement.getText();\n  expect(text).to.be.equal('View Case');\n});\nawait step('should click \"View Case\" button', this, async () => {\n  await helper.clickElement(myCases.viewCaseElement);\n  return helper.waitForUrlToHave(CONSTANTS.ROUTE.caseDetail);\n});",
              "err": {},
              "uuid": "ac93b531-cf4f-43e6-92ff-2dcf4873d7af",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "ac93b531-cf4f-43e6-92ff-2dcf4873d7af"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "0e79ad0e-e575-41e9-9102-645d05dc7dff",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "dedcd4de-3846-4613-81ba-70b30020bd12",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "4e9c9b93-f098-46d3-a8f2-2f5191a71553",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "c772b881-38dd-4313-85b7-5044f9b9829a",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "6c818c8c-68ff-4c1e-961f-4556960ff3f5",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "e46f8ef7-0397-4564-a594-706942c84792",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "fcfa78a8-6b9e-4c51-9cae-9bf4473ab127",
          "title": "Verify adding MRN on intake form when creating visit without patient",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/verify-adding-mrn-on-intake-form-when-creating-visit-without-patient-spec.js",
          "file": "/e2e/sites/specs/cases/verify-adding-mrn-on-intake-form-when-creating-visit-without-patient-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify adding MRN on intake form when creating visit without patient \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "8eb36773-0172-4858-9d2c-653e1ab0ffb4",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C382 - Verify adding MRN on intake form when creating visit without patient #smoke",
              "fullTitle": "Verify adding MRN on intake form when creating visit without patient C382 - Verify adding MRN on intake form when creating visit without patient #smoke",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('Go to Add Case page', this, () => {\n  return CreateCaseHelper.addCasePage();\n});\nawait step('Select Clinical Module', this, () => {\n  return helper.waitAndClick(createCase.clinicalModule);\n});\nawait step('Select Facility', this, () => {\n  return helper.waitAndClick(createCase.facilityWithEndPoint);\n});\nawait step('Skip Endpoint', this, () => {\n  return helper.waitAndClick(createCase.skipDeviceCallback);\n});\nawait step('skip patient', this, () => {\n  return helper.waitAndClick(createCase.skipPatientBtn);\n});\nawait step('Add MRN in intake step', this, async () => {\n  await helper.waitForElement(createCase.patientMrn);\n  MRN = chance.string();\n  await helper.replaceInputValue(createCase.patientMrn, '', MRN);\n  return helper.waitAndClick(createCase.intakePageContinueBtn);\n});\nawait step('should verify that the MRN is on case detail page', this, async () => {\n  await helper.waitAndClick(createCase.submitCaseBtn);\n  await helper.waitForUrlToHave(CONSTANTS.ROUTE.caseDetail);\n  expect(await browser.getCurrentUrl()).to.include(CONSTANTS.ROUTE.caseDetail);\n  await helper.waitForElement(caseDetail.patientMrn);\n  const patientMrn = await caseDetail.patientMrn.getText();\n  expect(patientMrn).contain(MRN);\n});",
              "err": {},
              "uuid": "4300ef80-ed8f-4db0-8387-0994750bacfa",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "4300ef80-ed8f-4db0-8387-0994750bacfa"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "9b31a76f-9768-4d87-975b-d5fa5759ca2b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "e4d9c882-f0d3-4494-bfb7-5cbadf586247",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "b8e25df3-fdeb-4a4d-90f1-352b1d2b9b4c",
          "title": "Verify downloaded PDF before archiving case and downloaded PDF after archiving case are exactly same [Created case without Patient]",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/verify-case-file-pdf-spec.js",
          "file": "/e2e/sites/specs/cases/verify-case-file-pdf-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify downloaded PDF before archiving case and downloaded PDF after archiving case are exactly same [Created case without Patient] \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "ddffb23c-8b4a-4bc6-a8ed-fbb01b768418",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C855640 - Verify downloaded PDF before archiving case and downloaded PDF after archiving case are exactly same [Created case without Patient] #smoke #sanity",
              "fullTitle": "Verify downloaded PDF before archiving case and downloaded PDF after archiving case are exactly same [Created case without Patient] C855640 - Verify downloaded PDF before archiving case and downloaded PDF after archiving case are exactly same [Created case without Patient] #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('Create case without patient and assign to self', this, async () => {\n  await caseHelper.createCase(createCase.clinicalModule, createCase.facility);\n  await helper.waitForElementToBeVisible(caseDetail.patientName);\n  return helper.waitAndClick(caseDetail.assignToMeButton);\n});\nawait step('Mark case complete', this, async () => {\n  await helper.waitAndClick(caseDetail.completeCaseButton);\n  return helper.waitAndClick(caseDetail.modalConfirm);\n});\nlet pdfFileSizeOnComplete;\nawait step('Download completed case detail in PDF', this, async () => {\n  await helper.waitAndClick(caseDetail.downloadPdf);\n  const windowHandle = await browser.getAllWindowHandles();\n  await browser.driver.switchTo().window(windowHandle[1]);\n  const currentUrl = await browser.getCurrentUrl();\n  pdfFileSizeOnComplete = (await request.downloadFile(currentUrl)).length;\n  await browser.driver.close();\n  await browser.driver.switchTo().window(windowHandle[0]);\n  expect(pdfFileSizeOnComplete).to.be.greaterThan(minValidPdfSize);\n});\nawait step('Archive completed case', this, async () => {\n  await helper.waitForElementToBeVisible(caseDetail.archiveCaseButton);\n  await helper.waitAndClick(caseDetail.archiveCaseButton);\n  return helper.waitForElementToBeVisible(allCases.addNewCase);\n});\nawait step('Download archived case detail in PDF', this, async () => {\n  browser.navigate().back();\n  await helper.waitAndClick(caseDetail.downloadPdf);\n  const windowHandle = await browser.getAllWindowHandles();\n  await browser.driver.switchTo().window(windowHandle[1]);\n  const currentUrl = await browser.getCurrentUrl();\n  const pdfFileSizeOnArchive = (await request.downloadFile(currentUrl)).length;\n  await browser.driver.close();\n  await browser.driver.switchTo().window(windowHandle[0]);\n  expect(pdfFileSizeOnComplete).to.equal(pdfFileSizeOnArchive);\n});",
              "err": {},
              "uuid": "9cfa0300-349f-4cb0-a782-81fad0c11826",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "9cfa0300-349f-4cb0-a782-81fad0c11826"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "0b289717-6204-42da-8e10-19390c88e374",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "e4c632ba-4432-4a77-ac43-3598165a7a23",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "85df80ed-701f-4bd4-be99-3134a2bd13ef",
          "title": "Verify downloaded PDF before archiving case and downloaded PDF after archiving case are exactly same in terms of data [Created case with Patient]",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/verify-case-file-patient-pdf-spec.js",
          "file": "/e2e/sites/specs/cases/verify-case-file-patient-pdf-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify downloaded PDF before archiving case and downloaded PDF after archiving case are exactly same in terms of data [Created case with Patient] \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "794e0474-8765-4901-a309-e0f3fce982f2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C855641 - Verify downloaded PDF before archiving case and downloaded PDF after archiving case are exactly same in terms of data [Created case with Patient] #smoke #sanity",
              "fullTitle": "Verify downloaded PDF before archiving case and downloaded PDF after archiving case are exactly same in terms of data [Created case with Patient] C855641 - Verify downloaded PDF before archiving case and downloaded PDF after archiving case are exactly same in terms of data [Created case with Patient] #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should create a patient', this, async () => {\n  await patientHelper.addPatientPage();\n  await Helper.waitForElementToBeVisible(patients.firstNameCreateInput);\n  await patientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients,\n    input: {\n      isMRNRequired: true\n    }\n  });\n  await patientHelper.submitNewPatient(patients);\n  await Helper.waitForUrlToHave(CONSTANTS.ROUTE.patientDetail);\n  await Helper.waitForElementToBeClickable(patients.uploadFileBtn);\n  await Helper.waitForElementToBeVisible(patients.patientAge);\n  await Helper.waitAndClick(patients.patientName);\n  const patientName = await patientHelper.getSavedPatientFullName(helperInstance);\n  expect(await patients.patientName.getText()).to.equal(patientName);\n});\nawait step('should create case with patient and assign to self', this, async () => {\n  const patient = await patientHelper.getPatientFirstAndLastName(helperInstance);\n  const caseObj = caseBuilder.setClinicalModulePosition(1, createCase.clinicalModule).setClinicalModuleElm(createCase.clinicalModule).setFacilityModulePosition(1).setFacilityModuleElm(createCase.facility);\n  caseObj.searchNewlyCreatedPatient = true;\n  caseObj.patientName = patient;\n  await createCaseHelper.addEditCase(caseObj);\n  await createCaseHelper.submitNewCase();\n  await Helper.waitForElementToBeVisible(caseDetail.patientName);\n  await Helper.waitForElementToBeVisible(caseDetail.assignToMeButton);\n  return Helper.waitAndClick(caseDetail.assignToMeButton);\n});\nawait step('Mark case complete', this, async () => {\n  await Helper.waitForElementToBeVisible(caseDetail.completeCaseButton);\n  await Helper.clickVisibleElement(caseDetail.completeCaseButton);\n  await Helper.waitForElementToBeVisible(caseDetail.modalConfirm);\n  return Helper.clickVisibleElement(caseDetail.modalConfirm);\n});\nlet pdfFileSizeOnComplete;\nawait step('Download completed case detail in PDF', this, async () => {\n  await Helper.waitAndClick(caseDetail.downloadPdf);\n  const windowHandle = await browser.getAllWindowHandles();\n  await browser.driver.switchTo().window(windowHandle[1]);\n  const currentUrl = await browser.getCurrentUrl();\n  pdfFileSizeOnComplete = (await request.downloadFile(currentUrl)).length;\n  await browser.driver.close();\n  await browser.driver.switchTo().window(windowHandle[0]);\n  expect(pdfFileSizeOnComplete).to.be.greaterThan(minValidPdfSize);\n});\nawait step('Archive completed case', this, async () => {\n  await Helper.waitForElementToBeVisible(caseDetail.archiveCaseButton);\n  await Helper.waitAndClick(caseDetail.archiveCaseButton);\n  return Helper.waitForElementToBeVisible(allCases.addNewCase);\n});\nawait step('Download archived case detail in PDF', this, async () => {\n  browser.navigate().back();\n  await Helper.waitAndClick(caseDetail.downloadPdf);\n  const windowHandle = await browser.getAllWindowHandles();\n  await browser.driver.switchTo().window(windowHandle[1]);\n  const currentUrl = await browser.getCurrentUrl();\n  const pdfFileSizeOnArchive = (await request.downloadFile(currentUrl)).length;\n  await browser.driver.close();\n  await browser.driver.switchTo().window(windowHandle[0]);\n  expect(pdfFileSizeOnComplete).to.equal(pdfFileSizeOnArchive);\n});",
              "err": {},
              "uuid": "617ed685-0d08-4141-9784-d31459a9b0f2",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "617ed685-0d08-4141-9784-d31459a9b0f2"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "11b13789-0b98-4588-b6d2-49c6b9a809b1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "3b425d78-7c71-40f5-9aa5-a305101ce113",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "2b89f1bb-5ccb-4db1-9fef-40f4d41c7b6d",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "585b2c6f-669e-4276-aa02-04dbfe37a7f9",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "70ff136d-eb07-4f7d-a0d1-043bb778bb3c",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "d6ae745b-755c-4f5d-b95d-b28dce65fcef",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "d928c6bd-adfa-45e2-a071-3a9b39b5803b",
          "title": "Verify created cases are appearing on all case screen",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/verify-created-cases-all-cases-spec.js",
          "file": "/e2e/sites/specs/cases/verify-created-cases-all-cases-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify created cases are appearing on all case screen \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "61c53d67-9469-484c-8c19-2732cb2546cd",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C845364 - Verify created cases are appearing on all case screen #smoke #sanity",
              "fullTitle": "Verify created cases are appearing on all case screen C845364 - Verify created cases are appearing on all case screen #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('Create case', this, async () => {\n  await caseHelper.createCase(createCase.clinicalModule, createCase.facility);\n  await Helper.waitForElementToBeVisible(caseDetail.patientName);\n  caseName = await caseDetail.patientName.getText();\n});\nawait step('Navigate to all cases screen', this, async () => {\n  await Helper.waitAndClick(header.clinicDropdown);\n  await Helper.waitAndClick(header.allCases);\n  return Helper.waitForElementToBeVisible(allCases.addNewCase);\n});\nawait step('Search created case in all cases', this, async () => {\n  await helperInstance.replaceInputAndSaveValue(allCases.searchInput, '', caseName);\n  await Helper.waitForElementToBeVisible(allCases.firstCaseName);\n  const resultingCaseId = await allCases.firstCaseName.getText();\n  expect(resultingCaseId).to.include(caseName);\n});",
              "err": {},
              "uuid": "e74ce0d1-009b-4a4f-8669-cba5fb107c38",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "e74ce0d1-009b-4a4f-8669-cba5fb107c38"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "bb93faa1-06cf-4cdc-a1a7-de6881113aaf",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "004129e8-44d6-4acd-a008-b062c5491f57",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "a7f64df0-3095-4306-a2fe-cac83141888e",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "f5067cb4-4373-47ff-a1c6-f90be0ce7457",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "37ca7474-4f21-4f2e-abc1-e2bb4a9539e4",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "d07652d5-c993-406d-8f6d-90f17d1694df",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "61be0eff-67bb-4596-846f-5e6dcf74789b",
          "title": "Verify my cases tab is showing cases which are assigned to logged provider",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/verify-my-cases-tab-showing-recently-assigned-case-spec.js",
          "file": "/e2e/sites/specs/cases/verify-my-cases-tab-showing-recently-assigned-case-spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Verify my cases tab is showing cases which are assigned to logged provider \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await browser.get(caseUrl);\nreturn caseHelper.cancelCase();",
              "err": {},
              "uuid": "e4a3c8e9-1682-42d6-860b-798fecbb766b",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C348 - Verify my cases tab is showing cases which are assigned to logged provider #smoke #sanity",
              "fullTitle": "Verify my cases tab is showing cases which are assigned to logged provider C348 - Verify my cases tab is showing cases which are assigned to logged provider #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should login on sites', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('should create a case', this, async () => {\n  await caseHelper.createCase(createCase.clinicalModule, createCase.facility);\n  await helper.waitAndClick(caseDetail.assignToMeButton);\n  caseId = await caseDetail.caseId.getText();\n  await caseDetail.patientName.getText();\n  caseUrl = await browser.getCurrentUrl();\n});\nawait step('create case showing in My Cases tab', this, async () => {\n  await browser.driver.get(`${config.site.url}/#${CONSTANTS.ROUTE.myCase}`);\n  await helper.waitForElementToBeVisible(myCases.myCaseActive);\n  expect(await myCases.myCasePatientName.getText()).to.include(caseId);\n});",
              "err": {},
              "uuid": "45751116-d0eb-40b2-a741-2929e22d759e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "45751116-d0eb-40b2-a741-2929e22d759e"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "29b44a5a-2ef0-476b-a8f5-5ad241fc965a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "c79e5606-5de1-40ce-80e6-79a9ddd3a29f",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "6b1a16ba-fe42-491e-83e5-a6e258add33c",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "cda36ef1-cb69-42d6-a558-fdca9db52da6",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "8f4b1049-6fca-4e32-85c0-4700f0c86b67",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "6c635b05-00c0-47f3-9a71-1d0037162619",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "1f75e58e-490f-4cd8-b026-1359e839ea76",
          "title": "Verify duplicate cases are not showing on all cases page due to multiple MRN against patient",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/verify-duplicate-cases-are-not-showing-spec.js",
          "file": "/e2e/sites/specs/cases/verify-duplicate-cases-are-not-showing-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C855635 - Verify duplicate cases are not showing on all cases page due to multiple MRN against patient #smoke",
              "fullTitle": "Verify duplicate cases are not showing on all cases page due to multiple MRN against patient C855635 - Verify duplicate cases are not showing on all cases page due to multiple MRN against patient #smoke",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('Should login on sites', this, () => {\n  return authHelper.loginSites({}, true);\n});\nawait step('Should create a patient and add multiple MRNs', this, async () => {\n  await patientHelper.addPatientPage();\n  await Helper.waitForElementToBeVisible(patients.firstNameCreateInput);\n  await patientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients,\n    input: {\n      isMRNRequired: true,\n      EHR: patients.ehrOption\n    }\n  });\n  await patientHelper.inputSecondMRN();\n  await patientHelper.submitNewPatient(patients);\n  return Helper.waitForUrlToHave(CONSTANTS.ROUTE.patientDetail);\n});\nawait step('Should create a case with recently created patient having multiple MRNs', this, async () => {\n  const patient = await patientHelper.getPatientFirstAndLastName(helperInstance);\n  const caseObj = caseBuilder.setClinicalModulePosition(1, createCase.clinicalCardiology).setClinicalModuleElm(createCase.clinicalCardiology).setFacilityModulePosition(1).setFacilityModuleElm(createCase.facility);\n  caseObj.searchNewlyCreatedPatient = true;\n  caseObj.patientName = patient;\n  await createCaseHelper.addEditCase(caseObj);\n  await createCaseHelper.submitNewCase();\n  return Helper.waitForElementToBeVisible(caseDetail.patientName);\n});\nawait step('Should verify that multiple cases are not showing with patient having multiple MRNs', this, async () => {\n  patientFullName = await patientHelper.getSavedPatientFullName(helperInstance);\n  await caseHelper.openAllCasesPage(); // cases table data takes time to load\n  await Helper.waitForElementToBeVisible(allCases.firstCaseId);\n  await Helper.waitAndClick(allCases.leftPaneCardiologyCaseModule);\n  const patientCasesCount = await allCases.newPatientCaseCount(patientFullName);\n  expect(patientCasesCount).to.equal(1);\n});",
              "err": {},
              "uuid": "9916bb38-3e4e-4f66-b837-d72e9021b31c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "9916bb38-3e4e-4f66-b837-d72e9021b31c"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "42eecfb2-8394-4883-be7a-fb7d36a0ca5b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 125,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "634c5c6d-61cd-4417-ab67-84783e450036",
          "parentUUID": "42eecfb2-8394-4883-be7a-fb7d36a0ca5b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "72ba96cb-f51e-4501-b41e-e149e267e19f",
          "parentUUID": "42eecfb2-8394-4883-be7a-fb7d36a0ca5b",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "f01c8174-bc44-422a-b4c7-3516af91e1db",
          "parentUUID": "42eecfb2-8394-4883-be7a-fb7d36a0ca5b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "c22c9a06-99ed-4a2d-a918-f9d0a7d67641",
          "parentUUID": "42eecfb2-8394-4883-be7a-fb7d36a0ca5b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "22865678-5a12-4142-ae15-60b45ac6d842",
          "parentUUID": "42eecfb2-8394-4883-be7a-fb7d36a0ca5b",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "c6ba5e13-1a99-4c06-8704-0ac6cc59384f",
          "title": "Verify callBack Device and facility filters on all case screen",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/verify-call-back-device-and-facility-filters-on-all-cases-spec.js",
          "file": "/e2e/sites/specs/cases/verify-call-back-device-and-facility-filters-on-all-cases-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify callBack Device and facility filters on all case screen \"before all\" hook: ret",
              "timedOut": false,
              "duration": 4933,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// create needed cases to enable filters\napi = new ApiHelper(enterpriseCode);\ncasesIds = await api.createCasesForFiltersTesting(siteCode);\nexpect(casesIds.length).equal(2); // login\nawait authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "8e5f35f4-42a8-4616-b616-fb0c43e9e7e0",
              "parentUUID": "c6ba5e13-1a99-4c06-8704-0ac6cc59384f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Verify callBack Device and facility filters on all case screen \"after all\" hook: ret",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// clean up = delete cases\nconst result = await api.deleteCases(casesIds);\nexpect(result).is.true;",
              "err": {},
              "uuid": "829d6512-4aa9-4fe9-9661-94cf29871150",
              "parentUUID": "c6ba5e13-1a99-4c06-8704-0ac6cc59384f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C908179 - Verify callBack Device and facility filters on all case screen #smoke #sanity #stable",
              "fullTitle": "Verify callBack Device and facility filters on all case screen C908179 - Verify callBack Device and facility filters on all case screen #smoke #sanity #stable",
              "timedOut": false,
              "duration": 4035,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓Navigate to all cases screen\",\n  \"✓Click on the filter button\",\n  \"✓Click on available non default Callback Device filter\",\n  \"✓Check that all elements (cases) in the table have correct selected Callback Device\",\n  \"✓Refresh page to reset filters and click filter button\",\n  \"✓Click on available non default Facility filter\",\n  \"✓Check that all elements (cases) in the table have correct selected Facility\"\n]",
              "code": "let callbackDeviceFilterName;\nlet facilityFilterName;\nawait step('Navigate to all cases screen', this, async () => {\n  await helper.waitAndClick(header.clinicDropdown);\n  await helper.waitAndClick(header.allCases);\n  return helper.waitForElementToBeVisible(allCases.addNewCase);\n});\nawait step('Click on the filter button', this, async () => {\n  await helper.waitAndClick(allCases.filterBtn);\n});\nawait step('Click on available non default Callback Device filter', this, async () => {\n  await helper.waitAndClick(allCases.callbackDeviceDropDown); // Wait that at least one not default filter options is loaded because there can be a delay\n  // There should be at least one - we have a precondition\n  await helper.waitForCondition(async () => {\n    callbackDeviceFilterName = await caseHelper.getFirstAvailableCallbackDevicesFilter();\n    return callbackDeviceFilterName !== undefined;\n  }); // Click on the selected not default filter option\n  await helper.waitAndClick(allCases.expandedFilterOption(callbackDeviceFilterName));\n});\nawait step('Check that all elements (cases) in the table have correct selected Callback Device', this, async () => {\n  // It can take time for the page to be loaded.\n  await helper.waitForCondition(async () => {\n    const allCasesHaveCorrectCallbackDevice = await caseHelper.checkAllCallbackDevicesHaveSpecificValue(callbackDeviceFilterName);\n    return allCasesHaveCorrectCallbackDevice;\n  });\n});\nawait step('Refresh page to reset filters and click filter button', this, async () => {\n  await browser.refresh();\n  await helper.waitAndClick(allCases.filterBtn);\n});\nawait step('Click on available non default Facility filter', this, async () => {\n  await helper.waitAndClick(allCases.facilityDropDown); // Wait that at least one not default filter options is loaded because there can be a delay\n  // There should be at least one - we have a precondition\n  await helper.waitForCondition(async () => {\n    facilityFilterName = await caseHelper.getFirstAvailableFacilityFilter();\n    return facilityFilterName !== undefined;\n  }); // Click on the selected not default filter option\n  await helper.waitAndClick(allCases.expandedFilterOption(facilityFilterName));\n});\nawait step('Check that all elements (cases) in the table have correct selected Facility', this, async () => {\n  // It can take time for the page to be loaded.\n  await helper.waitForCondition(async () => {\n    const allCasesHaveCorrectFacility = await caseHelper.checkAllFacilitiesHaveSpecificValue(facilityFilterName);\n    return allCasesHaveCorrectFacility;\n  });\n});",
              "err": {},
              "uuid": "3b447296-dca0-48a0-b88f-f958084849ea",
              "parentUUID": "c6ba5e13-1a99-4c06-8704-0ac6cc59384f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3b447296-dca0-48a0-b88f-f958084849ea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4035,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "0d686d0f-a125-4f4b-bca5-53c7b058463b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "6656cdfb-81a7-43d8-bd44-e31c5689cc13",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "fa2e3f50-0d28-4cdc-957e-575b76ed6086",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "b67a87d5-f4a9-4f1a-84ec-315e6752bf51",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "802da7f5-f19a-43a1-89d6-ffa71b3cdd07",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "b362730e-7b0c-4079-9889-fb2418871a6d",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "a21912b8-b2dd-45ce-b7de-d72e87dddfaf",
          "title": "Verify searching on all cases page",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/verify-searching-all-cases-spec.js",
          "file": "/e2e/sites/specs/cases/verify-searching-all-cases-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C908178 - Verify searching on all cases page #smoke #sanity",
              "fullTitle": "Verify searching on all cases page C908178 - Verify searching on all cases page #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should login on sites', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('should create a patient', this, async () => {\n  await patientHelper.addPatientPage();\n  await Helper.waitForElementToBeVisible(patients.firstNameCreateInput);\n  await patientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients,\n    input: {\n      isMRNRequired: true\n    }\n  });\n  await patientHelper.submitNewPatient(patients);\n  await Helper.waitForUrlToHave(CONSTANTS.ROUTE.patientDetail);\n  await Helper.waitForElementToBeClickable(patients.uploadFileBtn);\n  await Helper.waitForElementToBeVisible(patients.patientAge);\n  await Helper.waitForElementToBeVisible(patients.patientFileDemographicsName);\n  patientName = await patientHelper.getSavedPatientFullName(helperInstance);\n  expect(await patients.patientName.getText()).to.equal(patientName);\n});\nlet caseId;\nawait step('Create case', this, async () => {\n  const patient = patientHelper.getPatientFirstAndLastName(helperInstance);\n  const caseObj = caseBuilder.setClinicalModulePosition(1, createCase.clinicalModule).setClinicalModuleElm(createCase.clinicalModule).setFacilityModulePosition(1).setFacilityModuleElm(createCase.facility);\n  caseObj.searchNewlyCreatedPatient = true;\n  caseObj.patientName = patient;\n  await createCaseHelper.addEditCase(caseObj);\n  await createCaseHelper.submitNewCase();\n  await Helper.waitForElementToBeVisible(caseDetail.patientName);\n  await Helper.waitAndClick(caseDetail.assignToMeButton);\n  caseUrl = await browser.getCurrentUrl();\n  caseId = await caseDetail.caseId.getText();\n});\nawait step('Navigate to all cases screen', this, async () => {\n  await Helper.waitAndClick(header.clinicDropdown);\n  return Helper.waitAndClick(header.allCases);\n});\nawait step('Search created case by Patient Name', this, async () => {\n  await Helper.waitForElementToBeVisible(allCases.searchInput);\n  await Helper.replaceInputValue(allCases.searchInput, '', patientName);\n  await Helper.waitForElementToBeVisible(allCases.firstCaseId);\n  const resultingCaseId = await allCases.firstCaseId.getText();\n  expect(resultingCaseId).to.include(caseId);\n});\nawait step('Search created case by MRN', this, async () => {\n  const savedValues = helperInstance.getSavedValues();\n  const patientMrn = savedValues.find(Obj => Obj.id === 'ext-mrn-0').value;\n  await Helper.replaceInputValue(allCases.searchInput, '', patientMrn);\n  await Helper.waitForElementToBeVisible(allCases.firstCaseId);\n  const resultingCaseId = await allCases.firstCaseId.getText();\n  expect(resultingCaseId).to.include(caseId);\n});\nawait step('Search created case by Case ID', this, async () => {\n  await Helper.replaceInputValue(allCases.searchInput, '', caseId);\n  await Helper.waitForElementToBeVisible(allCases.firstCaseId);\n  const resultingCaseId = await allCases.firstCaseId.getText();\n  expect(resultingCaseId).to.include(caseId);\n});\nawait step('Should cancel a case', this, async () => {\n  await browser.get(caseUrl);\n  return caseHelper.cancelCase();\n});",
              "err": {},
              "uuid": "7e9cef7b-868c-4df6-9259-f0d3986ea5a4",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "7e9cef7b-868c-4df6-9259-f0d3986ea5a4"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "2f5593f1-69c8-4153-9040-93f422e1d440",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "248ffd5b-dfa7-4867-9199-b528bbee1d0c",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "03429887-14c5-427e-9bb2-4f48e931bb1f",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "6db5a8e0-5ffb-42f0-9781-e7c4a2722dc0",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "bffb4b74-1f00-4e82-9fe0-8b9cdc1127c9",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "4dc0566a-0ef5-48c5-b566-ef9dde838f8e",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "7b8d6e42-d122-4148-9d5b-0e6aed388279",
          "title": "Verify that Case is created with stroke intake flow, timer and values should be correct and stored values should preserve in Edit case #smoke",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/verify-stroke-intake-case-creation-spec.js",
          "file": "/e2e/sites/specs/cases/verify-stroke-intake-case-creation-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify that Case is created with stroke intake flow, timer and values should be correct and stored values should preserve in Edit case #smoke \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await enterperiseHelper.loginEnterprise();\nreturn enterperiseHelper.loggedIn();",
              "err": {},
              "uuid": "b702786b-8908-4ffc-9245-29b1684eca52",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1035877 - Verify that Case is created with stroke intake flow, timer and values should be correct and stored values should preserve in Edit case #smoke #sanity",
              "fullTitle": "Verify that Case is created with stroke intake flow, timer and values should be correct and stored values should preserve in Edit case #smoke C1035877 - Verify that Case is created with stroke intake flow, timer and values should be correct and stored values should preserve in Edit case #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('navigate to workflow screen and select cardiology service line', this, () => {\n  return caseFormHelper.navigateAndSelectWorkFlow(enterprise.selectWorkflow, enterprise.selectCaseForms);\n});\nawait step('check stroke intake form on cardiology service line', this, async () => {\n  await caseFormHelper.addFormIfNotExist(enterprise.strokeIntakeCaseForm, enterprise.strokeIntake);\n  return enterperiseHelper.logout();\n});\nawait step('login to clinical Portal', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('create case with stroke intake form', this, async () => {\n  const caseObj = caseBuilder.setClinicalModulePosition(1, createCase.clinicalCardiology).setClinicalModuleElm(createCase.clinicalCardiology).setFacilityModulePosition(1).setFacilityModuleElm(createCase.facility);\n  caseObj.fillIntakeForm = true;\n  await createCaseHelper.addEditCase(caseObj, helperInstance);\n  return createCaseHelper.submitNewCase();\n});\nawait step('verify stroke timer is running', this, async () => {\n  await Helper.waitForElement(caseDetail.videoMessagePane);\n  const url = await browser.getCurrentUrl();\n  expect(url).to.include(CONSTANTS.ROUTE.caseDetail);\n  await Helper.waitForElementToBePresent(createCase.timerBox);\n});\nawait step('verify stroke intake form value present after creation', this, () => {\n  const strokeForm = createCaseHelper.getStrokeIntakeFormValue(helperInstance);\n  expect(strokeForm).to.be.an('object');\n  expect(strokeForm).have.property('roomNumber');\n  expect(strokeForm).have.property('mrn');\n});\nawait step('edit case  with stroke intake new values', this, async () => {\n  await Helper.waitAndClick(createCase.option);\n  await Helper.waitAndClick(createCase.editCase);\n  const caseObj = caseBuilder.setClinicalModulePosition(1, createCase.clinicalCardiology).setClinicalModuleElm(createCase.clinicalCardiology).setFacilityModulePosition(1).setFacilityModuleElm(createCase.facility);\n  caseObj.fillIntakeForm = true;\n  await createCaseHelper.addEditCase(caseObj, helperInstance);\n  return createCaseHelper.submitNewCase();\n});\nawait step('verify stroke intake form value present after editing case', this, () => {\n  const strokeForm = createCaseHelper.getStrokeIntakeFormValue(helperInstance);\n  expect(strokeForm).to.be.an('object');\n  expect(strokeForm).have.property('roomNumber');\n  expect(strokeForm).have.property('mrn');\n});",
              "err": {},
              "uuid": "197be959-90ee-4c3d-99a0-5299c394ccaa",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "197be959-90ee-4c3d-99a0-5299c394ccaa"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "9bb2d904-5fca-4ca4-b82d-d42889c968c6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "4d7cd708-ab9f-4701-84d7-ec011010ea9c",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "9d2c3d32-8e60-44e9-bcf9-6607be79ac50",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "15a10ea5-01c1-4edb-89d0-c8d27b722b10",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "406ffab5-d865-4a43-a010-32291f828caa",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "8cb8690f-6e55-429e-bf58-600749781f6f",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "16499926-9af2-417e-a5e2-3f66774ffcfc",
          "title": "Verify on video call between provider & patient NIHSS button appear/disappear",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/cases/video-call-provider-patient-NIHSS-button-appear-disappear-spec.js",
          "file": "/e2e/sites/specs/cases/video-call-provider-patient-NIHSS-button-appear-disappear-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify on video call between provider & patient NIHSS button appear/disappear \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return enterpriseHelper.loginEnterprise();",
              "err": {},
              "uuid": "68d2e734-c385-4430-b9b5-51686e5ef152",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: ret",
              "fullTitle": "Verify on video call between provider & patient NIHSS button appear/disappear \"before each\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await caseFormHelper.navigateToWorkflow();\nreturn Helper.waitAndClick(enterprise.selectWorkflow);",
              "err": {},
              "uuid": "5497b5ac-579d-4632-a96a-ba89c2573279",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Verify on video call between provider & patient NIHSS button appear/disappear \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await browser.get(caseUrl);\nreturn caseHelper.cancelCase();",
              "err": {},
              "uuid": "f8c9e529-f09d-4cf7-9201-100c44c0edd8",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: ret",
              "fullTitle": "Verify on video call between provider & patient NIHSS button appear/disappear \"after each\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conferenceTag = await video.conferenceTag.getAttribute('value');\nawait videoHelper.endCall(conferenceTag);\nexpect(await Helper.waitForElementToBeVisible(dashboard.patientName));",
              "err": {},
              "uuid": "50009d9f-1900-45e4-9c3b-5e51b05e4852",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C971800 - Verify on video call between provider & patient, NIHSS button doesn't appear when the check is disabled from enterprise #smoke #sanity",
              "fullTitle": "Verify on video call between provider & patient NIHSS button appear/disappear C971800 - Verify on video call between provider & patient, NIHSS button doesn't appear when the check is disabled from enterprise #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should disable Stroke NIHSS option', this, async () => {\n  await Helper.waitForElementToBeVisible(createCase.enableStrokeNIHSSImages);\n  await caseFormHelper.disableCheckbox(workflow.isNIHSSChecked, workflow.isNIHSSCheckedLabel);\n  await Helper.waitAndClick(enterprise.submitFormButton);\n  const successPopup = await createCase.success.getText();\n  expect(successPopup).to.equal('Success!');\n  return Helper.waitAndClick(enterprise.modalConfirm);\n});\nawait step('should login into sites', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('should create case', this, async () => {\n  if (caseUrl) {\n    await browser.get(caseUrl);\n    return Helper.waitForElement(caseDetail.videoMessagePane);\n  }\n  await createCaseHelper.addCasePage();\n  await caseHelper.createCase(createCase.clinicalCardiology, createCase.facility);\n  caseUrl = await browser.getCurrentUrl();\n  return Helper.waitForElement(caseDetail.videoMessagePane);\n});\nawait step('should join video call from case detail page', this, async () => {\n  await caseHelper.caseDetailJoinVideo();\n  return Helper.waitForElementToBeVisible(video.endVideoCallBtn);\n});\nawait step('should verify the NIHSS button is not visible', this, async () => {\n  await Helper.waitForElementToBeInvisible(video.strokeImageShareBtn);\n  expect(await video.strokeImageShareBtn.isPresent()).to.be.false;\n});",
              "err": {},
              "uuid": "7d283bd3-7596-49d6-9861-5930dba08163",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "C971801 - Verify on video call between provider & patient, NIHSS button appear when the check is enabled from enterprise and images are appearing as expected #smoke #sanity",
              "fullTitle": "Verify on video call between provider & patient NIHSS button appear/disappear C971801 - Verify on video call between provider & patient, NIHSS button appear when the check is enabled from enterprise and images are appearing as expected #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should enable Stroke NIHSS option', this, async () => {\n  await Helper.waitForElementToBeVisible(createCase.enableStrokeNIHSSImages);\n  await caseFormHelper.enableCheckbox(workflow.isNIHSSChecked, workflow.isNIHSSCheckedLabel);\n  await Helper.waitAndClick(enterprise.submitFormButton);\n  const successPopup = await createCase.success.getText();\n  expect(successPopup).to.equal('Success!');\n});\nawait step('should login into sites', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('should create case', this, async () => {\n  if (caseUrl) {\n    await browser.get(caseUrl);\n    return Helper.waitForElement(caseDetail.videoMessagePane);\n  }\n  await createCaseHelper.addCasePage();\n  await caseHelper.createCase(createCase.clinicalCardiology, createCase.facility);\n  caseUrl = await browser.getCurrentUrl();\n  return Helper.waitForElement(caseDetail.videoMessagePane);\n});\nawait step('should join video call from case detail page', this, async () => {\n  await caseHelper.caseDetailJoinVideo();\n  return Helper.waitForElementToBeVisible(video.endVideoCallBtn);\n});\nawait step('should verify the NIHSS button is visible', this, async () => {\n  await Helper.waitForElementToBeVisible(video.strokeImageShareBtn);\n  expect(await video.strokeImageShareBtn.isPresent()).to.be.true;\n});\nawait step('should verify NIHSS images are appearing', this, async () => {\n  await Helper.clickElement(video.strokeImageShareBtn);\n  await Helper.waitForElementToBeInvisible(video.bottomToast);\n  await Helper.waitForElementToBeVisible(video.strokeImageContainer);\n  expect(await video.strokeImageContainer.isPresent()).to.be.true;\n});",
              "err": {},
              "uuid": "d934ce92-683f-40f4-96e1-3fcf8c859bd8",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "7d283bd3-7596-49d6-9861-5930dba08163",
            "d934ce92-683f-40f4-96e1-3fcf8c859bd8"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "286a9b09-01ff-43b8-9e66-acc302f2be60",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 118,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "0630e379-00f7-43b9-92de-a8afe312b98a",
          "parentUUID": "286a9b09-01ff-43b8-9e66-acc302f2be60",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "eea0b1b1-b317-4aa4-a2aa-defb5ba3d2ca",
          "parentUUID": "286a9b09-01ff-43b8-9e66-acc302f2be60",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "e67301e1-b1c3-401d-99cf-a6b2c6e98f92",
          "parentUUID": "286a9b09-01ff-43b8-9e66-acc302f2be60",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "c49f2691-9096-4b4b-aed1-2d1be3728a21",
          "parentUUID": "286a9b09-01ff-43b8-9e66-acc302f2be60",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "9582884c-c259-4ba2-8fa6-59213d7d4cab",
          "parentUUID": "286a9b09-01ff-43b8-9e66-acc302f2be60",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "d5583eb1-be64-4808-98d2-b760d80d31de",
          "title": "Verify forget password flow (Reset Password) and password rules are working on forget password flow",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/auth/forgot-password-expire-spec.js",
          "file": "/e2e/sites/specs/auth/forgot-password-expire-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C347 - Verify forget password flow (Reset Password) and password rules are working on forget password flow #smoke #sanity #stable",
              "fullTitle": "Verify forget password flow (Reset Password) and password rules are working on forget password flow C347 - Verify forget password flow (Reset Password) and password rules are working on forget password flow #smoke #sanity #stable",
              "timedOut": false,
              "duration": 106669,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓login\",\n  \"✓invite new user\",\n  \"✓join clinical portal\",\n  \"✓logout user\",\n  \"✓set code for clinical portal\",\n  \"✓forget password and submit\",\n  \"✓Set new password\",\n  \"✓verify login with new password\"\n]",
              "code": "let savedEmail;\nawait step('login', this, async () => {\n  await authHelper.loginSites();\n  await authHelper.loggedIn();\n});\nawait step('invite new user', this, async () => {\n  await settingsHelper.inviteUserSettings(settings, helperInstance);\n  await settingsHelper.submitSettings(settings);\n});\nawait step('join clinical portal', this, async () => {\n  savedEmail = helperInstance.getSavedValues().find(obj => obj.id === 'email').value;\n  await settingsHelper.joinSite(settings, helperInstance, {\n    user: savedEmail\n  });\n});\nawait step('logout user', this, async () => {\n  // sometimes in automation mode the browser freezes the logout dropdown, but refresh helps\n  // happens only in automation mode\n  await browser.refresh();\n  await authHelper.logout(header);\n});\nawait step('set code for clinical portal', this, async () => {\n  await authHelper.sites();\n  await authHelper.setCodeAndSubmit();\n  return Helper.waitForElementToBeVisible(login.loginBtn);\n});\nawait step('forget password and submit', this, async () => {\n  await authHelper.forgotPassword(forgotPassword, {\n    user: savedEmail\n  });\n  await authHelper.submitForgotPassword(forgotPassword);\n});\nawait step('Set new password', this, async () => {\n  await authHelper.resetPassword(resetPassword, helperInstance, {\n    user: savedEmail,\n    password: config.site.login.new_password,\n    repeatPassword: config.site.login.confirm_password\n  });\n});\nawait step('verify login with new password', this, async () => {\n  await authHelper.loginSites({\n    user: savedEmail,\n    password: config.site.login.new_password\n  });\n  await Helper.waitForElementToBeVisible(dashboard.welcomeMessage);\n  expect(await dashboard.welcomeMessage.getText()).to.contains(CONSTANTS.DASHBOARD.welcome);\n});",
              "err": {},
              "uuid": "2387eafc-0766-4440-aada-2720c0410ab5",
              "parentUUID": "d5583eb1-be64-4808-98d2-b760d80d31de",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2387eafc-0766-4440-aada-2720c0410ab5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 106669,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "3568f836-ff6d-45fe-b333-b67e73f9ac2c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "72b38020-4be4-4b8d-9cf4-a40bb14b2682",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "b3921537-bb66-47cb-b40a-b8c3f2464ce8",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "fd02fc7d-9d1a-4a8f-b43b-6ca41e26d59e",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "ea6cc5f2-2390-43ce-a307-b22b1f98c36a",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "de4cc902-9295-4ac2-83fa-ae1bbfd5ba30",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "e6ce0ab7-8cd1-40d0-b30b-79363a249869",
          "title": "Verify when a User A send a message, message is received by the User B at their end",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/collaborate/verify-message-received-spec.js",
          "file": "/e2e/sites/specs/collaborate/verify-message-received-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C494429 - Verify when a User A send a message, message is received by the User B at their end #smoke",
              "fullTitle": "Verify when a User A send a message, message is received by the User B at their end C494429 - Verify when a User A send a message, message is received by the User B at their end #smoke",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should login on sites', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('Invite new user', this, async () => {\n  await settingsHelper.inviteUserSettings(settings, helperInstance);\n  return settingsHelper.submitSettings(settings);\n});\nlet savedEmail;\nlet fromName;\nawait step('Join site by new invited user', this, async () => {\n  const savedValues = helperInstance.getSavedValues();\n  savedEmail = savedValues.find(Obj => Obj.id === 'email').value;\n  await settingsHelper.joinSite(settings, helperInstance, {\n    user: savedEmail\n  });\n  return authHelper.logout(header);\n});\nawait step('Login from User A and Send message to User B', this, async () => {\n  await authHelper.loginSites();\n  await authHelper.loggedIn();\n  const splitEmail = savedEmail.substring(0, savedEmail.indexOf('@'));\n  await collaborationHelper.sendMessage(splitEmail, CONSTANTS.COLLABORATIONS.sampleMessage); // get profile name of the sender\n  await Helper.waitAndClick(header.userProfileDropDown);\n  await Helper.waitAndClick(header.profileAccount);\n  await Helper.waitForElementToBeVisible(profileGeneral.email);\n  const firstName = await profileGeneral.first_name.getAttribute('value');\n  const lastName = await profileGeneral.last_name.getAttribute('value');\n  fromName = `${firstName} ${lastName}`;\n  return authHelper.logout(header);\n});\nawait step('Login from user B and Verify message is received from User A', this, async () => {\n  await authHelper.loginSites({\n    user: savedEmail\n  });\n  await authHelper.loggedIn();\n  const message = await collaborationHelper.getLastMessageReceived(fromName);\n  expect(CONSTANTS.COLLABORATIONS.sampleMessage).to.equal(message);\n});",
              "err": {},
              "uuid": "b63db489-4718-48dd-8cd0-5dcda892f095",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "b63db489-4718-48dd-8cd0-5dcda892f095"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "ab13b154-bbcb-408a-b0f7-22c5219e1a98",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "106e8e6b-8fda-469c-aabc-e6107ac821d0",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "e66f1dc3-7cbb-4030-bbee-e4047a985fbe",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "38c34dc8-c022-4650-96bc-c6548c3f27ab",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "0c9eeb48-1070-4760-8529-9ab5082cc2c4",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "6898f7ee-aeda-451d-ac19-d5ab0eb21e4e",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "8dc811b3-689b-40ef-affd-b0edfcd06b5f",
          "title": "Verify that Admin provider should be able to merge two or more patients by clicking Mark as Duplicate button",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/patients/merge-patients-spec.js",
          "file": "/e2e/sites/specs/patients/merge-patients-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify that Admin provider should be able to merge two or more patients by clicking Mark as Duplicate button \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return authHelper.loginSites({}, true);",
              "err": {},
              "uuid": "f02c31f5-cae4-4449-a309-12ba61decf7d",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1366331 & C1366343 - Verify that Admin provider should be able to merge two or more patients by clicking Mark as Duplicate button and verify provider responsible for merge #smoke",
              "fullTitle": "Verify that Admin provider should be able to merge two or more patients by clicking Mark as Duplicate button C1366331 & C1366343 - Verify that Admin provider should be able to merge two or more patients by clicking Mark as Duplicate button and verify provider responsible for merge #smoke",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('navigate to add patient screen', this, async () => {\n  await patientHelper.patientSearchPage();\n  await Helper.waitAndClick(patients.addPatientBtn);\n  return Helper.waitForElementToBeVisible(patients.firstNameCreateInput);\n});\nawait step('add patient and save', this, async () => {\n  await patientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients\n  });\n  await patientHelper.submitNewPatient(patients);\n  firstPatient = await patientHelper.getSavedPatientFullName(helperInstance);\n});\nawait step('add a second patient', this, async () => {\n  await patientHelper.patientSearchPage();\n  await Helper.waitAndClick(patients.addPatientBtn);\n  await Helper.waitForElementToBeVisible(patients.firstNameCreateInput);\n  await patientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients\n  });\n  await patientHelper.submitNewPatient(patients);\n  secondPatient = await patientHelper.getSavedPatientFullName(helperInstance);\n});\nawait step('click on mark as duplicate and merge patient', this, async () => {\n  await Helper.waitForElementToBeVisible(patientDetail.markAsDuplicate);\n  await Helper.waitAndClick(patientDetail.markAsDuplicate);\n  const firstName = firstPatient.split(' ')[0];\n  const lastName = firstPatient.split(' ')[1];\n  await helperInstance.replaceInputAndSaveValue(patientDetail.searchPatientFirstName, '', firstName);\n  await helperInstance.replaceInputAndSaveValue(patientDetail.searchPatientLastName, '', lastName);\n  await Helper.waitAndClick(patientDetail.search);\n  await Helper.waitAndClick(patientDetail.selectPatient);\n  await Helper.waitAndClick(patientDetail.mergeAccounts);\n  await Helper.waitAndClick(patientDetail.mergePatients);\n  await Helper.waitAndClick(patientDetail.okButton);\n}); // C1366331 - verifying second patient is inactive and merged into first patient\nawait step('verify second patient is inactive and merged into first patient', this, async () => {\n  await Helper.waitForElementToBeVisible(patients.patientName);\n  const patientNameA = await patientDetail.patientName.getText();\n  expect(patientNameA).to.equal(secondPatient);\n  const duplicateAccount = await patientDetail.duplicateAccount.getText();\n  expect(duplicateAccount).to.equal(CONSTANTS.Duplicate_Account);\n  await Helper.waitAndClick(patientDetail.jumpToActivePatient);\n  await Helper.waitForElementToBeVisible(patientDetail.patientName);\n  const patientNameB = await patientDetail.patientName.getText();\n  expect(patientNameB).to.equal(firstPatient);\n}); // C1366343 - verifying provider is responsible for merging\nawait step('verify provider name who did merge', this, async () => {\n  const providerName = await patientDetail.providerName.getText();\n  await profileHelper.editProfileGeneralPage();\n  const providerLastName = await profileGeneral.last_name.getAttribute('value');\n  const providerFirstName = await profileGeneral.first_name.getAttribute('value');\n  const ProviderFullName = `${providerLastName}, ${providerFirstName}`;\n  expect(providerName).to.equal(ProviderFullName);\n});",
              "err": {},
              "uuid": "f0747da5-62ec-4d88-89c8-3dda372c727f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "f0747da5-62ec-4d88-89c8-3dda372c727f"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "b64bb01f-4c8c-4fe8-95b6-07851f914914",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "c4d3944e-7fde-49ce-8681-0f3d2f153ce9",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "d287eb5f-c136-4cf8-bb2d-ff7b227aeaae",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "695b3e3f-a6d8-4a8b-b4ac-ca2f450b379a",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "bc729705-ad2e-461b-a61c-9e022ec2271d",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "3db4cb2b-8adf-4640-8d8d-41189d6e58af",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "5510c2d1-5322-4a27-893f-1cd10333b3b1",
          "title": "Verify searching patient with date of birth",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/patients/search-patient-with-dob-spec.js",
          "file": "/e2e/sites/specs/patients/search-patient-with-dob-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C780032 - Verify searching patient with date of birth #smoke #sanity",
              "fullTitle": "Verify searching patient with date of birth C780032 - Verify searching patient with date of birth #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('Should login on sites', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('Go to add patient page', this, async () => {\n  await patientHelper.addPatientPage();\n  return Helper.waitForElementToBeVisible(patients.firstNameCreateInput);\n});\nawait step('Create new patient', this, async () => {\n  await patientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients\n  });\n  await patientHelper.submitNewPatient(patients);\n  return Helper.waitForUrlToHave(CONSTANTS.ROUTE.patientDetail);\n});\nawait step('Go to Patient Seach Page', this, () => {\n  return patientHelper.patientSearchPage();\n});\nawait step('Enter DOB', this, () => {\n  return patientHelper.fillSearchByDobFieldOnPatientSearchPage(CONSTANTS.PATIENT_DOB_SLASH_FORMAT);\n});\nawait step('Search patients with entered DOB', this, () => {\n  return Helper.waitAndClick(patients.searchPatientSubmit);\n});\nawait step('Verify correct patient records are shown according to DOB entered', this, async () => {\n  await Helper.waitForElementToBePresent(patients.searchedPatients);\n  const allPatients = await patients.searchedPatients.getText();\n  allPatients.forEach(patient => {\n    expect(patient).to.contain(CONSTANTS.PATIENT_DOB_SLASH_FORMAT);\n  });\n});",
              "err": {},
              "uuid": "b804c098-a119-46bd-9a3c-3d286aa7ff3f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "b804c098-a119-46bd-9a3c-3d286aa7ff3f"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "15b77d80-3478-482e-bbf1-c4f4923c0fdb",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "c5f3cb32-46b7-42c6-a3ca-503e6dc37455",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "f85198c0-8091-41c3-9719-06d744b265ad",
          "title": "Verify searching patient from name",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/patients/search-patient-with-name-spec.js",
          "file": "/e2e/sites/specs/patients/search-patient-with-name-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C380 - Verify searching patient from name #smoke #sanity",
              "fullTitle": "Verify searching patient from name C380 - Verify searching patient from name #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('Should login on sites', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('navigate to add patient screen', this, async () => {\n  await patientHelper.patientSearchPage();\n  await Helper.waitAndClick(patients.addPatientBtn);\n  return Helper.waitForElementToBeVisible(patients.firstNameCreateInput);\n});\nawait step('add patient and save', this, async () => {\n  await patientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients\n  });\n  await patientHelper.submitNewPatient(patients);\n  return Helper.waitForElementToBeVisible(patients.patientName);\n});\nawait step('search patient in the list', this, async () => {\n  [firstName, lastName] = patientHelper.getPatientFirstAndLastName(helperInstance);\n  await patientHelper.patientSearchPage();\n  await Helper.waitAndClick(patients.searchTypeDropdown);\n  await Helper.waitAndClick(patients.searchTypeDropdownOptionsName);\n  await Helper.replaceInputValue(patients.firstNameSearchInput, '', firstName);\n  await Helper.replaceInputValue(patients.lastNameSearchInput, '', lastName);\n  await Helper.clickElement(patients.searchPatientSubmit);\n  return Helper.waitForElementToBePresent(patients.searchedPatientBlock);\n});\nawait step('Verify patient in the list exist created', this, async () => {\n  const searchedPatientName = await patients.searchedPatientName.getText();\n  expect(searchedPatientName).to.equal(`${lastName}, ${firstName}`);\n});",
              "err": {},
              "uuid": "40ffd984-82bc-4943-b023-a288f80a376b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "40ffd984-82bc-4943-b023-a288f80a376b"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "ceea0cc4-7e48-4d69-8fe2-16898a4afe22",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "325d505f-6e86-4dbc-a27e-b89421a2a26f",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "055ab06f-09d5-481b-bfa3-d3459fc51123",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "21c08779-918c-4959-bd0e-6ce45557445a",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "8011fcef-cf3f-4df0-bddd-608101b095f4",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "c10d7dd1-4a73-42e1-be0b-f81e12836859",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "fe8fa9e9-c048-4f34-98ff-6a9e61d3a015",
          "title": "Verify creating a patient during visit creation with EHR/MRN which already exist - Application should throw loud error",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/patients/verify-create-patient-during-visit-creation-with-existing-mrn-spec.js",
          "file": "/e2e/sites/specs/patients/verify-create-patient-during-visit-creation-with-existing-mrn-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify creating a patient during visit creation with EHR/MRN which already exist - Application should throw loud error \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "294f36db-4f09-47d9-8c40-edae6ad50911",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C17604 - Verify creating a patient during visit creation with EHR/MRN which already exist - Application should throw loud error #smoke #sanity",
              "fullTitle": "Verify creating a patient during visit creation with EHR/MRN which already exist - Application should throw loud error C17604 - Verify creating a patient during visit creation with EHR/MRN which already exist - Application should throw loud error #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('Should create a new patient and add MRN to it', this, async () => {\n  await patientHelper.addPatientPage();\n  await Helper.waitForElementToBeVisible(patients.firstNameCreateInput);\n  await patientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients,\n    input: {\n      isMRNRequired: true,\n      EHR: patients.ehrOption1\n    }\n  });\n  await patientHelper.submitNewPatient(patients);\n  await Helper.waitForUrlToHave(CONSTANTS.ROUTE.patientDetail);\n  await Helper.waitForElementToBeClickable(patients.uploadFileBtn);\n  await Helper.waitForElementToBeVisible(patients.patientFileDemographicsName);\n  const patientName = await patientHelper.getSavedPatientFullName(helperInstance);\n  expect(await patients.patientName.getText()).to.equal(patientName);\n});\nawait step('should create a case', this, async () => {\n  const caseObj = caseBuilder.setClinicalModulePosition(1, createCase.clinicalModule).setClinicalModuleElm(createCase.clinicalModule).setFacilityModulePosition(1).setFacilityModuleElm(createCase.facility).setNewPatientFlag().setPatientDetails({\n    ehr: createCase.addEHRTestingOption,\n    mrn: helperInstance.getSavedValues().find(Obj => Obj.id === 'ext-mrn-0').value\n  });\n  return createCaseHelper.addEditCase(caseObj, helperInstance);\n});\nawait step('Creating another new patient and adding EHR/MRN of previously created patient should display error message', this, async () => {\n  await Helper.waitForElementToBeVisible(reports.accessDeniedContent);\n  expect(await reports.accessDeniedContent.getText()).to.contain(CONSTANTS.ERROR_MESSAGE.patientMRNExists);\n});\nawait step('Click OK button', this, () => {\n  return Helper.waitAndClick(reports.accessDeniedButtonOk);\n});",
              "err": {},
              "uuid": "6f352bb6-8a8b-4e04-b039-f78e317b12cc",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "6f352bb6-8a8b-4e04-b039-f78e317b12cc"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "521774eb-01f8-4f57-b734-7e96331fd049",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 117,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "87bfb368-a56e-4e40-b7dd-4a178e220403",
          "parentUUID": "521774eb-01f8-4f57-b734-7e96331fd049",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "6af70b47-368b-4855-a1b3-87fa7341c2f4",
          "parentUUID": "521774eb-01f8-4f57-b734-7e96331fd049",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "c7c82746-0cae-4633-ab9e-bd49b51563a6",
          "parentUUID": "521774eb-01f8-4f57-b734-7e96331fd049",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "c3b1a17c-25f1-4c49-8ac3-8f452bcb91dc",
          "parentUUID": "521774eb-01f8-4f57-b734-7e96331fd049",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "e94d28cf-9756-4b6c-90b8-7a0e26749a43",
          "parentUUID": "521774eb-01f8-4f57-b734-7e96331fd049",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "b7754018-1bf4-43a6-992b-5f0a8d3ebf40",
          "title": "Verify searching patient with MRN [MRN should not exist in system]",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/patients/search-patient-with-MRN-not-exist-spec.js",
          "file": "/e2e/sites/specs/patients/search-patient-with-MRN-not-exist-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C17605 - Verify searching patient with MRN [MRN should not exist in system] #smoke #sanity #stable",
              "fullTitle": "Verify searching patient with MRN [MRN should not exist in system] C17605 - Verify searching patient with MRN [MRN should not exist in system] #smoke #sanity #stable",
              "timedOut": false,
              "duration": 6362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓Should login on sites\",\n  \"✓navigate to add patient screen\",\n  \"✓select MRN from search options\",\n  \"✓enter MRN to search\",\n  \"✓select MRN from search options\"\n]",
              "code": "await step('Should login on sites', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('navigate to add patient screen', this, async () => {\n  return patientHelper.patientSearchPage();\n});\nawait step('select MRN from search options', this, async () => {\n  await helper.waitAndClick(patients.searchTypeDropdown);\n  return helper.waitAndClick(patients.searchTypeDropdownOptionsMrn);\n});\nawait step('enter MRN to search', this, async () => {\n  await helper.replaceInputValue(patients.searchTypeMRNInput, '', chance.string({\n    length: 10,\n    alpha: true,\n    numeric: true\n  }));\n  return helper.waitAndClick(patients.searchPatientSubmit);\n});\nawait step('select MRN from search options', this, async () => {\n  await helper.waitForElementToBeVisible(patients.patientNotFoundMsg);\n  expect(await patients.patientNotFoundMsg.getText()).to.include(CONSTANTS.ERROR_MESSAGE.patientNotFound);\n});",
              "err": {},
              "uuid": "6ed8f363-fc72-428b-aab1-4ae07c49b655",
              "parentUUID": "b7754018-1bf4-43a6-992b-5f0a8d3ebf40",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6ed8f363-fc72-428b-aab1-4ae07c49b655"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6362,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "edd536ef-2d43-4cd0-9bb3-88af194b4a3f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 121,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "030ea40d-e31f-43fd-a44a-1e737a861a5c",
          "parentUUID": "edd536ef-2d43-4cd0-9bb3-88af194b4a3f",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "3ff2df98-3609-49d7-b78d-9e908f2b44ab",
          "parentUUID": "edd536ef-2d43-4cd0-9bb3-88af194b4a3f",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "355f5d36-1c55-4754-afed-28399eb575d2",
          "parentUUID": "edd536ef-2d43-4cd0-9bb3-88af194b4a3f",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "f858a2ec-21a0-4115-a4d9-ba027a1abeb6",
          "parentUUID": "edd536ef-2d43-4cd0-9bb3-88af194b4a3f",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "3c27862c-c23e-4b08-a583-8a6be8d154a6",
          "parentUUID": "edd536ef-2d43-4cd0-9bb3-88af194b4a3f",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "5285ee1e-613b-4054-896d-6e2cd69dc431",
          "title": "Verify that new patient can be created from Sites > Clinic menu > Patients > Add Patient",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/patients/create-patient-from-add-patient-spec.js",
          "file": "/e2e/sites/specs/patients/create-patient-from-add-patient-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify that new patient can be created from Sites > Clinic menu > Patients > Add Patient \"before all\" hook: ret",
              "timedOut": false,
              "duration": 4895,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "5850461f-d22a-4121-9677-65f118558fc1",
              "parentUUID": "5285ee1e-613b-4054-896d-6e2cd69dc431",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C377 - Verify that new patient can be created from Sites > Clinic menu > Patients > Add Patient #smoke #sanity #stable",
              "fullTitle": "Verify that new patient can be created from Sites > Clinic menu > Patients > Add Patient C377 - Verify that new patient can be created from Sites > Clinic menu > Patients > Add Patient #smoke #sanity #stable",
              "timedOut": false,
              "duration": 4197,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓navigate to add patient screen\",\n  \"✓add patient save\",\n  \"✓Verify that created patient displaying in patient detail page\"\n]",
              "code": "await step('navigate to add patient screen', this, async () => {\n  await Helper.waitAndClick(header.clinicDropdown);\n  await Helper.waitAndClick(header.patients);\n  await Helper.waitForUrlToHave(CONSTANTS.ROUTE.patient);\n  await Helper.waitAndClick(patients.addPatientBtn);\n  return Helper.waitForElementToBeVisible(patients.firstNameCreateInput);\n});\nawait step('add patient save', this, async () => {\n  await patientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients\n  });\n  await patientHelper.submitNewPatient(patients);\n  await Helper.waitForElementToBeVisible(patients.patientFileDemographicsName);\n  return Helper.scrollToElement(patients.patientFileDemographicsName);\n});\nawait step('Verify that created patient displaying in patient detail page', this, async () => {\n  await Helper.waitForElementToBeClickable(patients.uploadFileBtn);\n  await Helper.waitForElementToBeVisible(patients.patientAge);\n  const patientFullName = patientHelper.getSavedPatientFullName(helperInstance);\n  const patientName = await patients.patientFileDemographicsName.getText();\n  expect(patientName).to.equal(patientFullName);\n});",
              "err": {},
              "uuid": "e19016bc-c63f-494e-b260-8d898ca7932a",
              "parentUUID": "5285ee1e-613b-4054-896d-6e2cd69dc431",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e19016bc-c63f-494e-b260-8d898ca7932a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4197,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "4a8b0099-6006-4496-a8f7-5ccbfd9ab049",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "37c8712a-80b6-47d7-849d-0e03530470cf",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "2385041a-aa83-4fab-a7a9-dbb542b264a8",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "8834aba6-6a5e-473e-b3c1-7d9a9f9f00b5",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "037c3178-0f29-40f8-815b-53c479a52c10",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "db30fa9e-c4ba-4851-af90-d9d32ad310bf",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "935a55fe-fbad-4188-8046-ab0d7617ce53",
          "title": "Permissions - endpoint calendar",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/parallel/endpoint-calendar-spec.js",
          "file": "/e2e/sites/specs/permissions/parallel/endpoint-calendar-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804229 - Permissions - endpoint calendar test #permissions",
              "fullTitle": "Permissions - endpoint calendar C1804229 - Permissions - endpoint calendar test #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let newEnv;\nawait step('setup', this, async () => {\n  newEnv = permissionsHelper.getPermissionsEnvName();\n  const api = new ApiHelper(env.enterprise[newEnv].code);\n  const envParams = permissionsHelper.setPermissionsEnv();\n  const moduleIsEnabled = await api.enableSiteModule(envParams.code, CONSTANTS.SITES_MODULES.endpointCalendar);\n  expect(moduleIsEnabled).to.be.true;\n});\nawait step('Login to sites', this, async () => {\n  const envParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(envParams);\n  return authHelper.loggedIn();\n});\nawait step('Go to Tools --> System Settings --> Permissions Tab --> Endpoint Calendar', this, async () => {\n  await permissionsHelper.permissionEndpointCalendar();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  const endpointCalendarPermissionsPage = await permission.endpointCalendarPage.isPresent();\n  expect(endpointCalendarPermissionsPage).to.be.true;\n});\nawait step('Delete existing rules for who can access calendar, if they exist', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionEndpointCalendar);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Add Rule - Role Admin and Provider', this, async () => {\n  await permissionsHelper.permissionEndpointCalendar();\n  await permissionsHelper.grantAccessTo(permission.admin);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionEndpointCalendar();\n  await permissionsHelper.grantAccessTo(permission.provider, 1);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionEndpointCalendar();\n  return permissionsHelper.toggleOR();\n});\nawait step('Login as a provider user', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const {\n    code,\n    login: {\n      userProvider,\n      password\n    }\n  } = env.site[newEnv];\n  await authHelper.loginSites({\n    code,\n    user: userProvider,\n    password\n  });\n  return authHelper.loggedIn();\n});\nawait step('Verify that Endpoint Calendar (Callback Device) is visible in the menu', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    // permission changes could take up to 60 seconds to take effect thus this wait is required\n    await browser.sleep(20000);\n    await helper.waitForElementToBePresent(header.calendar);\n    await helper.clickElement(header.calendar);\n    const endpointCalendarButton = await header.callbackDeviceCalendar.isPresent();\n    expect(endpointCalendarButton).to.be.true;\n  }, 'checking for endpoint calendar', 3);\n});\nawait step('Login as a coordinator user', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const {\n    code,\n    login: {\n      userCoordinator,\n      password\n    }\n  } = env.site[newEnv];\n  await authHelper.loginSites({\n    code,\n    user: userCoordinator,\n    password\n  });\n  await authHelper.loggedIn();\n});\nawait step('Verify that Endpoint Calendar (Callback Device) is NOT accessible', this, async () => {\n  await permissionsHelper.endpointCalendar();\n  const unauthorizedPopup = await permission.unauthorized.isPresent();\n  expect(unauthorizedPopup).to.be.true;\n});\nawait step('Login as an admin user to extend access to the coordinator group users', this, async () => {\n  await helper.clickElement(permission.unauthorizedModalConfirmButton);\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const params = {\n    code: env.site[newEnv].code,\n    user: env.site[newEnv].login.userAdmin,\n    password: env.site[newEnv].login.password\n  };\n  await authHelper.loginSites(params);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('extending access to users of coordinator group', this, async () => {\n  await permissionsHelper.permissionEndpointCalendar();\n  await permissionsHelper.addGroup(permission.coordinatorGroup, 2);\n  return helper.waitForElementToBeVisible(permission.permissionTab);\n});\nawait step('Login as a coordinator group user', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const params = {\n    code: env.site[newEnv].code,\n    user: env.site[newEnv].login.userCoordinator,\n    password: env.site[newEnv].login.password\n  };\n  await authHelper.loginSites(params);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('Verify that Endpoint Calendar (Callback Device) is visible in the menu for the coordinator group user', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    // permission changes could take up to 60 seconds to take effect thus this wait is required\n    await browser.sleep(20000);\n    await permissionsHelper.endpointCalendar();\n    await helper.waitForElementToBeVisible(callback.callbackPageHeader);\n    const callbackPageHeader = await callback.callbackPageHeader.isPresent();\n    expect(callbackPageHeader).to.be.true;\n  }, 'checking for endpoint calendar', 3);\n});",
              "err": {},
              "uuid": "c66853bb-735c-470d-b410-f3552dec569f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "c66853bb-735c-470d-b410-f3552dec569f"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "7d307235-17b5-47d7-b611-d825c5d2e7dc",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "902318c8-e10e-4e5c-a710-f3ac048d86e9",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "f02965e8-2d64-46fe-ae12-e624bd63bd7f",
          "title": "All Cases Permissions Bad Rule",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/parallel/all-cases-bad-rule-spec.js",
          "file": "/e2e/sites/specs/permissions/parallel/all-cases-bad-rule-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804239 - All Cases Permissions Bad Rule #permissions",
              "fullTitle": "All Cases Permissions Bad Rule C1804239 - All Cases Permissions Bad Rule #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('setup', this, async () => {\n  // set permissions of view and edit for admin only\n  const envParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(envParams);\n  await authHelper.loggedIn();\n});\nawait step('Navigate to System Settings --> Permissions --> All Cases', this, async () => {\n  await permissionsHelper.permissionAllCases();\n  await helper.waitForElementToBeVisible(permission.allCasesPage);\n  const allCasesPage = await permission.allCasesPage.isPresent();\n  expect(allCasesPage).to.be.true;\n});\nawait step(\"Ensure form won't save with only one empty rule\", this, async () => {\n  await permissionsHelper.deleteExistingPermissionsAndAddOneGroup(); // make sure page has time to reload to ensure that it really hasn't\n  await browser.sleep(5000);\n  await helper.waitForElementToBeVisible(permission.errorContainerBorder);\n  const allCasesPage = await permission.errorContainerBorder.isPresent();\n  expect(allCasesPage).to.be.true;\n});\nawait step(\"Ensure form won't save with one empty and one non-empty rule\", this, async () => {\n  await permissionsHelper.andOneGroup(); // make sure page has time to reload to ensure that it really hasn't\n  await browser.sleep(5000);\n  await helper.waitForElementToBeVisible(permission.errorContainerBorder);\n  const allCasesPage = await permission.errorContainerBorder.isPresent();\n  expect(allCasesPage).to.be.true;\n});",
              "err": {},
              "uuid": "782c057f-97a5-4c58-8713-fc81377447c3",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "782c057f-97a5-4c58-8713-fc81377447c3"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "40b71350-5aa6-40f8-9424-9e0ecdd9e964",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "a3bea951-30ad-41fc-923b-38748c9f6330",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "2346cec2-72db-4904-9dbb-41cb00e2fa52",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "f384abcd-f7b3-4640-a23e-f89f9f34bc94",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "8ad5bfe8-9d55-45a1-9d48-b2a67778d629",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "d9f514f7-c25d-44de-9ffe-e7af316dbfe7",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "8bb47fa1-9fe4-4e0f-b857-ae6e873bd976",
          "title": "permissions - messaging module",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/parallel/messaging-permissions-spec.js",
          "file": "/e2e/sites/specs/permissions/parallel/messaging-permissions-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804231 - permissions - messaging module #permissions",
              "fullTitle": "permissions - messaging module C1804231 - permissions - messaging module #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let newEnv;\nawait step('setup', this, async () => {\n  newEnv = await permissionsHelper.getPermissionsEnvName();\n  const entParams = {\n    code: env.enterprise[newEnv].code,\n    user: env.enterprise[newEnv].login.user,\n    password: env.enterprise[newEnv].login.password\n  };\n  await enterpriseAuthHelper.loginEnterprise(entParams);\n  await clinicalPortalHelper.goToSitesModules(entParams.code);\n  try {\n    await clinicalPortalHelper.enableModule('messaging');\n  } catch (err) {\n    await clinicalPortalHelper.enableModule('Access web messaging outside cases');\n  }\n  const envParams = permissionsHelper.setPermissionsEnv();\n  await sitesAuthHelper.loginSites(envParams);\n  return sitesAuthHelper.loggedIn();\n});\nawait step('Navigate to System Settings --> Permissions --> messaging', this, async () => {\n  await permissionsHelper.permissionMessaging();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  const messagingPage = await permission.messagingPage.isPresent();\n  expect(messagingPage).to.be.true;\n});\nawait step('Delete existing rules for who can access messaging, if they exist', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionMessaging);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('verify that all users have access to the messaging module', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await permissionsHelper.messaging();\n    await helper.waitForElementToBeVisible(messaging.messageButton);\n    await helper.waitAndClick(messaging.messageHeading);\n  }, 'retry until permissions for messaging takes effect', 3);\n});\nawait step('Add Rule - Role Admin', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await permissionsHelper.permissionMessaging();\n    await permissionsHelper.grantAccessTo(permission.admin);\n    return helper.waitForElementToBeVisible(permission.permissionTab);\n  }, 'retry until access is added for the admin user', 3);\n});\nawait step('Login as a coordinator user', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await sitesAuthHelper.logout(header);\n  const envParams = permissionsHelper.setPermissionsEnv('userCoordinator');\n  await sitesAuthHelper.loginSites(envParams);\n  await sitesAuthHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('Verify that the coordinator user cannot access the messaging module', this, async () => {\n  await permissionsHelper.messaging();\n  const unauthorizedPopup = await permission.unauthorized.isPresent();\n  expect(unauthorizedPopup).to.be.true;\n});\nawait step('Login as an admin user to extend access to the coordinator group users', this, async () => {\n  await helper.clickElement(permission.unauthorizedModalConfirmButton);\n  await helper.waitForElement(header.userProfileDropDown);\n  await sitesAuthHelper.logout(header);\n  const envParams = permissionsHelper.setPermissionsEnv('userAdmin');\n  await sitesAuthHelper.loginSites(envParams);\n  await sitesAuthHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('extending access to users of coordinator group', this, async () => {\n  await permissionsHelper.permissionMessaging();\n  await permissionsHelper.addGroup(permission.coordinatorGroup, 1);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionMessaging();\n  return permissionsHelper.toggleOR();\n});\nawait step('Login as a coordinator group user', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await sitesAuthHelper.logout(header);\n  const envParams = permissionsHelper.setPermissionsEnv('userCoordinator');\n  await sitesAuthHelper.loginSites(envParams);\n  await sitesAuthHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('verify that the coordinator group user has access to the messaging module', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await permissionsHelper.messaging();\n    await helper.waitForElementToBeVisible(messaging.messageButton);\n    await helper.waitForElementToBeVisible(messaging.messageHeading);\n  }, 'retry until permissions for messaging takes effect', 3);\n});",
              "err": {},
              "uuid": "31bd15a8-dae6-4877-a395-7c090bfd3429",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "31bd15a8-dae6-4877-a395-7c090bfd3429"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "beb3ad59-2f98-4be8-9dfe-29a4168af57d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 119,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "7017e782-ba7a-4154-8a18-c7a35e8593a4",
          "parentUUID": "beb3ad59-2f98-4be8-9dfe-29a4168af57d",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "2947cdcc-3045-4a2a-a69c-3d9e01481777",
          "parentUUID": "beb3ad59-2f98-4be8-9dfe-29a4168af57d",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "3d91931a-212e-43f3-99f1-83d9d6ede034",
          "parentUUID": "beb3ad59-2f98-4be8-9dfe-29a4168af57d",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "3a80f09f-37b9-40ac-8593-ee4d173d2c06",
          "parentUUID": "beb3ad59-2f98-4be8-9dfe-29a4168af57d",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "307f0b4f-a484-4405-9f45-b0258fdc45e7",
          "parentUUID": "beb3ad59-2f98-4be8-9dfe-29a4168af57d",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "672ced6f-2cc9-450f-a05e-c773c6352a7b",
          "title": "Verify creating a patient with EHR/MRN which already exist in system - Application should throw loud error",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/patients/verify-create-patient-with-existing-mrn-spec.js",
          "file": "/e2e/sites/specs/patients/verify-create-patient-with-existing-mrn-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify creating a patient with EHR/MRN which already exist in system - Application should throw loud error \"before all\" hook: ret",
              "timedOut": false,
              "duration": 4930,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "748fa118-8853-4809-a010-1c66e4ba4210",
              "parentUUID": "672ced6f-2cc9-450f-a05e-c773c6352a7b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C17603 - Verify creating a patient with EHR/MRN which already exist in system - Application should throw loud error #smoke #sanity #stable",
              "fullTitle": "Verify creating a patient with EHR/MRN which already exist in system - Application should throw loud error C17603 - Verify creating a patient with EHR/MRN which already exist in system - Application should throw loud error #smoke #sanity #stable",
              "timedOut": false,
              "duration": 6033,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓Navigate to Add Patient Page\",\n  \"✓Create new patient\",\n  \"✓Navigate again to Add Patient Page\",\n  \"✓While adding details for another patient, add existing EHR and MRN\",\n  \"✓Creating another new patient and adding EHR/MRN of previously created patient should display error message\",\n  \"✓Click OK button of error message modal\"\n]",
              "code": "await step('Navigate to Add Patient Page', this, () => {\n  return patientHelper.addPatientPage();\n});\nawait step('Create new patient', this, async () => {\n  await Helper.waitForElementToBeVisible(patients.firstNameCreateInput);\n  await patientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients,\n    input: {\n      isMRNRequired: true\n    }\n  });\n  await patientHelper.submitNewPatient(patients);\n  return Helper.waitForUrlToHave(CONSTANTS.ROUTE.patientDetail);\n});\nawait step('Navigate again to Add Patient Page', this, () => {\n  return patientHelper.addPatientPage();\n});\nawait step('While adding details for another patient, add existing EHR and MRN', this, async () => {\n  await Helper.waitForElementToBeVisible(patients.firstNameCreateInput);\n  await patientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients,\n    input: {\n      isMRNRequired: true,\n      MRN: helperInstance.getSavedValues().find(Obj => Obj.id === 'ext-mrn-0').value\n    }\n  });\n  return patientHelper.submitNewPatient(patients);\n});\nawait step('Creating another new patient and adding EHR/MRN of previously created patient should display error message', this, async () => {\n  await Helper.waitForElementToBeVisible(reports.accessDeniedContent);\n  expect(await reports.accessDeniedContent.getText()).to.contain(CONSTANTS.ERROR_MESSAGE.patientMRNExists);\n});\nawait step('Click OK button of error message modal', this, () => {\n  return Helper.waitAndClick(reports.accessDeniedButtonOk);\n});",
              "err": {},
              "uuid": "c8623aa1-bd3e-403d-b9a1-f79c244fc051",
              "parentUUID": "672ced6f-2cc9-450f-a05e-c773c6352a7b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c8623aa1-bd3e-403d-b9a1-f79c244fc051"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6033,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "0e0b98d4-fab8-4800-a6f0-9b8e581bc973",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "32d06b44-a080-4052-bacf-48e3a662af60",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "e7170b9b-9bb6-4936-a2a3-120abeceaf26",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "feaf100a-b86e-4c46-b38e-a1765ae99cd8",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "57566ea0-9043-4eb0-b7f7-d27a29cd6f31",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "d2cbb2f4-4475-404d-a34d-9e09c4be96c9",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "b82a5ac1-caba-44ff-bf67-6b26afe95608",
          "title": "permissions - patient appointment calendar",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/parallel/patient-appointment-calendar-spec.js",
          "file": "/e2e/sites/specs/permissions/parallel/patient-appointment-calendar-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804232 - permissions - patient appointment calendar #permissions",
              "fullTitle": "permissions - patient appointment calendar C1804232 - permissions - patient appointment calendar #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('setup', this, async () => {\n  const newEnv = permissionsHelper.getPermissionsEnvName();\n  const api = new ApiHelper(env.enterprise[newEnv].code);\n  const envParams = permissionsHelper.setPermissionsEnv();\n  const moduleIsEnabled = await api.enableSiteModule(envParams.code, CONSTANTS.SITES_MODULES.appointments);\n  expect(moduleIsEnabled).to.be.true;\n});\nawait step('Login to sites', this, async () => {\n  const envParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(envParams);\n  return authHelper.loggedIn();\n});\nawait step('Navigate to System Settings --> Permissions --> Appointments', this, async () => {\n  await permissionsHelper.permissionAppointments();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  const appointmentsPage = await permission.appointmentsPage.isPresent();\n  expect(appointmentsPage).to.be.true;\n});\nawait step('Delete existing rules for who can access appointments, if they exist', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionAppointments);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Add Rule - Role Admin and Coordinator', this, async () => {\n  await permissionsHelper.permissionAppointments();\n  await permissionsHelper.grantAccessTo(permission.admin);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionAppointments();\n  await permissionsHelper.grantAccessTo(permission.coordinator, 1);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionAppointments();\n  return permissionsHelper.toggleOR();\n});\nawait step('Login as a coordinator user', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const envParams = permissionsHelper.setPermissionsEnv('userCoordinator');\n  await authHelper.loginSites(envParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('verify that the add appointment button is visible for the coordinators', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    // permission changes could take up to 60 seconds to take effect thus this wait is required\n    await browser.sleep(20000);\n    await permissionsHelper.appointments();\n    await helper.waitForElementToBeVisible(appointments.addAppointmentBtn);\n    const addAppointmentButton = await appointments.addAppointmentBtn.isPresent();\n    expect(addAppointmentButton).to.be.true;\n  }, 'retry until the permission takes effect for the patient appointment calendar', 3);\n});\nawait step('Login as a provider', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const envParams = permissionsHelper.setPermissionsEnv('userProvider');\n  await authHelper.loginSites(envParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('Verify that the provider user cannot access the patient appointment calendar', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await permissionsHelper.appointments();\n    const unauthorizedPopup = await permission.unauthorized.isPresent();\n    expect(unauthorizedPopup).to.be.true;\n  }, 'retry until the permission takes effect for the patient appointment calendar', 3);\n});\nawait step('Login as an admin user to extend access to the provider group users', this, async () => {\n  await helper.clickElement(permission.unauthorizedModalConfirmButton);\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const envParams = permissionsHelper.setPermissionsEnv('userAdmin');\n  await authHelper.loginSites(envParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('extending access to users of provider group', this, async () => {\n  await permissionsHelper.permissionAppointments();\n  await permissionsHelper.addGroup(permission.providerGroup, 2);\n  return helper.waitForElementToBeVisible(permission.permissionTab);\n});\nawait step('Login as a provider group user', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const envParams = permissionsHelper.setPermissionsEnv('userProvider');\n  await authHelper.loginSites(envParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('verify that the add appointment button is visible for the provider user', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await permissionsHelper.appointments();\n    await helper.waitForElementToBeVisible(appointments.addAppointmentBtn);\n    const addAppointmentButton = await appointments.addAppointmentBtn.isPresent();\n    expect(addAppointmentButton).to.be.true;\n  }, 'retry until the permission takes effect for the patient appointment calendar', 3);\n});",
              "err": {},
              "uuid": "e4d3e05d-f079-4d7b-9da3-66bb251ca044",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "e4d3e05d-f079-4d7b-9da3-66bb251ca044"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "278f8de1-5728-44ef-b1a5-54cc93be7b16",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "a1ed4be4-f12b-4a08-b04a-5cf059526d08",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "38797f97-c67e-45f2-b42b-416a9b65afb6",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "133da42e-ef9a-4c7f-855b-cbf887ffe14d",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "ccbf4e96-e1f4-4f91-a107-65d396480b85",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "35b789e7-afac-499c-b5b6-4a67aafb06b5",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "1698cd37-b645-4f9c-9cd1-d90d75523a81",
          "title": "Permissions - patient module",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/parallel/patients-module-permissions-spec.js",
          "file": "/e2e/sites/specs/permissions/parallel/patients-module-permissions-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804233 - Permissions - patient module #permissions",
              "fullTitle": "Permissions - patient module C1804233 - Permissions - patient module #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let newEnv = '';\nawait step('setup', this, async () => {\n  newEnv = await permissionsHelper.getPermissionsEnvName();\n  const entParams = {\n    code: env.enterprise[newEnv].code,\n    user: env.enterprise[newEnv].login.user,\n    password: env.enterprise[newEnv].login.password\n  };\n  await permissionAuthHelper.loginEnterprise(entParams);\n  await clinicalPortalHelper.goToSitesModules(entParams.code);\n  await clinicalPortalHelper.enableModule(CONSTANTS.SITES_MODULES.patient);\n  const siteParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n});\nawait step('Go to Tools --> System Settings --> Permissions Tab --> Patient', this, async () => {\n  await permissionsHelper.permissionPatient();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  const patientPermissionsPage = await permission.patientPermissionsPage.isPresent();\n  expect(patientPermissionsPage).to.be.true;\n});\nawait step('Delete existing rules for who can access patient, if they exist', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionPatient);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Add Rule - Role Admin and Provider', this, async () => {\n  await permissionsHelper.permissionPatient();\n  await permissionsHelper.grantAccessTo(permission.admin);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionPatient();\n  await permissionsHelper.grantAccessTo(permission.provider, 1);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionPatient();\n  return permissionsHelper.toggleOR();\n});\nawait step('Login as a provider user', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userProvider');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n});\nawait step('Verify that patients is visible in the menu', this, async () => {\n  await helper.waitForElementToBePresent(header.clinicDropdown);\n  await helper.clickElement(header.clinicDropdown);\n  const patientButton = await header.patients.isPresent();\n  expect(patientButton).to.be.true;\n});\nawait step('Login as a coordinator user', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userCoordinator');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n});\nawait step('Verify that patients page is NOT accessible', this, async () => {\n  await permissionsHelper.patient();\n  const unauthorizedPopup = await permission.unauthorized.isPresent();\n  expect(unauthorizedPopup).to.be.true;\n});\nawait step('Login as an admin user to extend access to the coordinator group users', this, async () => {\n  await helper.clickElement(permission.unauthorizedModalConfirmButton);\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userAdmin');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('extending access to users of coordinator group', this, async () => {\n  await permissionsHelper.permissionPatient();\n  await permissionsHelper.addGroup(permission.coordinatorGroup, 2);\n  return helper.waitForElementToBeVisible(permission.permissionTab);\n});\nawait step('Login as a coordinator group user', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userCoordinator');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('Verify that patients is visible in the menu for coordinator group user', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    // permission changes could take up to 60 seconds to take effect thus this wait is required\n    await browser.sleep(20000);\n    await helper.waitForElementToBePresent(header.clinicDropdown);\n    await helper.clickElement(header.clinicDropdown);\n    const patientButton = await header.patients.isPresent();\n    expect(patientButton).to.be.true;\n  }, 'retrying for the permissions changes to take effect', 3);\n});",
              "err": {},
              "uuid": "d670b32e-1413-4fc1-b908-ef0cc1ac0bb4",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "d670b32e-1413-4fc1-b908-ef0cc1ac0bb4"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "6f508edb-bbb9-4da0-aedb-157add81d0c6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "8268cc9a-53aa-459e-8754-014f5026c744",
          "parentUUID": "6f508edb-bbb9-4da0-aedb-157add81d0c6",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "fe11f2dd-afae-4afa-93f2-9becdf990e6e",
          "title": "Verify searching patient with MRN [MRN should exist in system]",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/patients/search-patient-with-MRN-spec.js",
          "file": "/e2e/sites/specs/patients/search-patient-with-MRN-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C381 - Verify searching patient with MRN [MRN should exist in system] #smoke #stable #sanity",
              "fullTitle": "Verify searching patient with MRN [MRN should exist in system] C381 - Verify searching patient with MRN [MRN should exist in system] #smoke #stable #sanity",
              "timedOut": false,
              "duration": 27806,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "[\n  \"✓Should login on sites\",\n  \"✓navigate to add patient screen\",\n  \"✗add patient and save\"\n]",
              "code": "await step('Should login on sites', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('navigate to add patient screen', this, async () => {\n  await patientHelper.patientSearchPage();\n  await Helper.waitAndClick(patients.addPatientBtn);\n  return Helper.waitForElementToBeVisible(patients.firstNameCreateInput);\n});\nawait step('add patient and save', this, async () => {\n  await patientHelper.newPatientRequiredFields(helperInstance, {\n    patientObjects: patients,\n    input: {\n      isMRNRequired: true,\n      EHR: patients.ehrOption1\n    }\n  });\n  await patientHelper.submitNewPatient(patients);\n  return Helper.waitForElementToBeVisible(patients.patientFileDemographicsName);\n});\nawait step('search patient with MRN entered during patient creation', this, async () => {\n  mrnToSearch = patientHelper.getSavedPatientMRN(helperInstance);\n  await patientHelper.patientSearchPage();\n  await Helper.waitAndClick(patients.searchTypeDropdown);\n  await Helper.waitAndClick(patients.searchTypeDropdownOptionsMrn);\n  await Helper.replaceInputValue(patients.searchTypeMRNInput, '', mrnToSearch);\n  await Helper.clickElement(patients.searchPatientSubmit);\n  return Helper.waitForElementToBePresent(patients.searchedPatientBlock);\n});\nawait step('Verify MRN in the list expects the MRN entered during patient creation ', this, async () => {\n  const searchedMRN = await patients.searchedPatientMRN.getText();\n  expect(searchedMRN).to.equal(mrnToSearch);\n});",
              "err": {
                "message": "Error: Element by.cssContainingText(\"button.btn\", \"Save\") was not found within 20000 milliseconds.",
                "estack": "Error: Element by.cssContainingText(\"button.btn\", \"Save\") was not found within 20000 milliseconds.\n    at Function.waitForElementToBeClickable (e2e/lib/common/helper.js:48:29)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                "diff": null
              },
              "uuid": "3f2cf5cc-bfa7-4906-bba0-4779ef984c23",
              "parentUUID": "fe11f2dd-afae-4afa-93f2-9becdf990e6e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3f2cf5cc-bfa7-4906-bba0-4779ef984c23"
          ],
          "pending": [],
          "skipped": [],
          "duration": 27806,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "d008cf38-f7ec-46b4-a996-f9cdd10af297",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "713496fe-9747-43b0-943b-ce3c3199cf64",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "c1586bda-f6ab-410b-bcad-575bc87aaab5",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "3ee7bbea-1819-4099-accc-c076b05db45d",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "9a322812-a44f-4437-a3f8-c1f03687fbc3",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "82b83cb7-8679-4868-8742-329be73da066",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "cbcff90b-ca92-4d6e-8abb-c9667dc14d39",
          "title": "Reports Permissions Bad Rule",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/parallel/reports-permissions-bad-rule-spec.js",
          "file": "/e2e/sites/specs/permissions/parallel/reports-permissions-bad-rule-spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook: ret",
              "fullTitle": "Reports Permissions Bad Rule \"before each\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const envParams = permissionsHelper.setPermissionsEnv();\nawait authHelper.loginSites(envParams);\nawait authHelper.loggedIn();\nawait reportHelper.settingsPage();\nawait helper.waitForElementToBeVisible(permission.permissionTab);\nawait helper.clickVisibleElement(permission.permissionTab);\nawait helper.clickElement(permission.reports);\nreturn helper.clickElement(permission.caseDetailReportPermission);",
              "err": {},
              "uuid": "03fe6bdb-3ec8-44ba-b9ab-53ed1cdea6ee",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804240-A - Ensure form won't save with only one empty rule #permissions",
              "fullTitle": "Reports Permissions Bad Rule C1804240-A - Ensure form won't save with only one empty rule #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('Ensure form will not save with only one empty rule', this, async () => {\n  // TODO: BW-21198 fix delete loop crash on final entry\n  await permissionsHelper.deleteExistingPermissionsAndAddOneGroup(); // make sure page has time to reload to ensure that it really hasn't\n  await browser.sleep(10000);\n  await helper.waitForElementToBeVisible(permission.errorContainerBorder);\n  const errorContainer = await permission.errorContainerBorder.isPresent();\n  expect(errorContainer).to.be.true;\n});",
              "err": {},
              "uuid": "c1ce4ca4-0c0d-477f-b414-038a5b82e2ec",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "C1804240-B - Ensure form won't save with one empty and one non-empty rule #permissions",
              "fullTitle": "Reports Permissions Bad Rule C1804240-B - Ensure form won't save with one empty and one non-empty rule #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('Ensure form will not save with one empty and one non-empty rule', this, async () => {\n  // TODO: BW-21198 fix delete loop crash on final entry\n  await permissionsHelper.andOneGroupForReports(); // make sure page has time to reload to ensure that it really hasn't\n  await browser.sleep(10000);\n  await helper.waitForElementToBeVisible(permission.errorContainerBorder);\n  const errorContainer = await permission.errorContainerBorder.isPresent();\n  expect(errorContainer).to.be.true;\n});",
              "err": {},
              "uuid": "49e48dcd-d22e-47fe-a47a-ede2cafad0bb",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "c1ce4ca4-0c0d-477f-b414-038a5b82e2ec",
            "49e48dcd-d22e-47fe-a47a-ede2cafad0bb"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "939fd2df-71b7-4b99-a2a0-1b55707bf647",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "21e53e45-43fc-4b5b-94c2-2b43680911bb",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "63d72ad0-50ce-4abe-b45f-ed04032c5b91",
          "title": "permissions - settings module",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/parallel/settings-permissions-spec.js",
          "file": "/e2e/sites/specs/permissions/parallel/settings-permissions-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804235 - permissions - settings module #permissions",
              "fullTitle": "permissions - settings module C1804235 - permissions - settings module #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('setup', this, async () => {\n  const envParams = permissionsHelper.setPermissionsEnv('user', 'settingsSpec');\n  await sitesAuthHelper.loginSites(envParams);\n  return sitesAuthHelper.loggedIn();\n});\nawait step('Navigate to System Settings --> Permissions --> settings', this, async () => {\n  await permissionsHelper.permissionSettings();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  const settingsPage = await permission.settingsPage.isPresent();\n  expect(settingsPage).to.be.true;\n});\nawait step('Delete existing rules for who can access settings, if they exist', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionSettings);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Add Rule - Role Admin and Provider', this, async () => {\n  await permissionsHelper.permissionSettings();\n  await permissionsHelper.grantAccessTo(permission.admin);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionSettings();\n  await permissionsHelper.grantAccessTo(permission.provider, 1);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n}); // task BW-21800 created to stablize this test\nawait step('Login as the user with both admin and provider rights', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await sitesAuthHelper.logout(header);\n  const params = permissionsHelper.setPermissionsEnv('userAdminProvider', 'settingsSpec');\n  await sitesAuthHelper.loginSites(params);\n  await sitesAuthHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('verify that users with both admin and provider roles have access to the settings module', this, async () => {\n  await permissionsHelper.settings();\n  await helper.waitForElementToBeVisible(settings.settingsHeading);\n  const settingsHeader = await settings.settingsHeading.getText();\n  expect(settingsHeader).to.equal(CONSTANTS.SYSTEM_SETTINGS);\n});\nawait step('Login as a coordinator user', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await sitesAuthHelper.logout(header);\n  const params = permissionsHelper.setPermissionsEnv('userCoordinator', 'settingsSpec');\n  await sitesAuthHelper.loginSites(params);\n  await sitesAuthHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('Verify that the coordinator user cannot access the settings module', this, async () => {\n  await permissionsHelper.settings();\n  const unauthorizedPopup = await permission.unauthorized.isPresent();\n  expect(unauthorizedPopup).to.be.true;\n});\nawait step('Login as an admin user to extend access to the coordinator group users', this, async () => {\n  await helper.clickElement(permission.unauthorizedModalConfirmButton);\n  await helper.waitForElement(header.userProfileDropDown);\n  await sitesAuthHelper.logout(header);\n  const params = permissionsHelper.setPermissionsEnv('userAdmin', 'settingsSpec');\n  await sitesAuthHelper.loginSites(params);\n  await sitesAuthHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('extending access to users of coordinator group', this, async () => {\n  await permissionsHelper.permissionSettings();\n  await permissionsHelper.addGroup(permission.coordinatorGroup, 2);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionSettings();\n  return permissionsHelper.toggleOR();\n});\nawait step('Login as a coordinator group user', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await sitesAuthHelper.logout(header);\n  const params = permissionsHelper.setPermissionsEnv('userCoordinator', 'settingsSpec');\n  await sitesAuthHelper.loginSites(params);\n  await sitesAuthHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('verify that users in the coordinator group have access to the settings module', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    // permission changes could take up to 60 seconds to take effect thus this wait is required\n    await browser.sleep(20000);\n    await permissionsHelper.settings();\n    await helper.waitForElementToBeVisible(settings.settingsHeading);\n    const settingsHeader = await settings.settingsHeading.getText();\n    expect(settingsHeader).to.equal(CONSTANTS.SYSTEM_SETTINGS);\n  }, 'retrying for the permissions changes to take effect', 3);\n});",
              "err": {},
              "uuid": "81a3a686-3562-4aee-99f7-e078c6e75dee",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "81a3a686-3562-4aee-99f7-e078c6e75dee"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "35ebe734-24be-48d2-baad-a1e9abf4f065",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "94591d8a-3132-4de1-9874-d55574edbc17",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "be701eda-f22b-41a7-8f10-30404b1eb55a",
          "title": "Case Permissions Bad Rule",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/parallel/workflow-permissions-bad-rule-spec.js",
          "file": "/e2e/sites/specs/permissions/parallel/workflow-permissions-bad-rule-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804238 - Case Permissions Bad Rule #permissions",
              "fullTitle": "Case Permissions Bad Rule C1804238 - Case Permissions Bad Rule #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let workflowHeader = '';\nlet formatedHeader = '';\nawait step('setup', this, async () => {\n  // set permissions of view and edit for admin only\n  const siteParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n});\nawait step('Navigate to workflow permissions for editing a case', this, async () => {\n  await permissionsHelper.workflowPermission();\n  const random = await utils.getRandomInt(1, 4);\n  workflowHeader = await permission.workflowHeader(random).getText();\n  formatedHeader = await workflowHeader.toLowerCase().replace(' ', '');\n  await helper.waitAndClick(permission.editCase(formatedHeader));\n});\nawait step(\"Ensure form won't save with only one empty rule\", this, async () => {\n  await permissionsHelper.deleteExistingPermissionsAndAddOneGroup(); // make sure page has time to reload to ensure that it really hasn't\n  await browser.sleep(10000);\n  await helper.waitForElementToBeVisible(permission.errorContainerBorder);\n  const errorContainer = await permission.errorContainerBorder.isPresent();\n  expect(errorContainer).to.be.true;\n});\nawait step(\"Ensure form won't save with one empty and one non-empty rule\", this, async () => {\n  await permissionsHelper.andOneGroup(); // make sure page has time to reload to ensure that it really hasn't\n  await browser.sleep(10000);\n  await helper.waitForElementToBeVisible(permission.errorContainerBorder);\n  const errorContainer = await permission.errorContainerBorder.isPresent();\n  expect(errorContainer).to.be.true;\n});",
              "err": {},
              "uuid": "bd8b7204-bb87-48cf-99a0-9cacb1beffad",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "bd8b7204-bb87-48cf-99a0-9cacb1beffad"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "2946831e-164a-4164-b993-6527c0f6c2b9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "59efa218-d189-43fe-9cb8-d3c235adae4e",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "5ac5d2b2-de23-45b3-8fde-6e29e7d1160e",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "6490c563-ae55-40b1-8397-99330038a003",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "24d9aa0e-fa8e-4c6c-8817-864a3c83e576",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "f7d0c904-7d76-4909-a679-1bee45e64809",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "1c549269-0439-4d75-adfa-d5c88cab7dd5",
          "title": "Verify user is able to add shift",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/provideroncall/add-shift-spec.js",
          "file": "/e2e/sites/specs/provideroncall/add-shift-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify user is able to add shift \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "6f16d523-1f38-48dc-b393-e1bdae06dca9",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Verify user is able to add shift \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// delete created shift.\nawait onCallHelper.goToOnCall();\nawait helper.waitAndClick(schedule.clinicalModuleCardiology);\nawait onCallHelper.deleteShiftByName(shiftRequiredFields.shiftName);\nreturn helper.waitForElementToBeInvisible(shift.calendarView(shiftRequiredFields.shiftName));",
              "err": {},
              "uuid": "42656470-3c04-4366-96dc-855781804fb4",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C349829 - Verify user is able to add shift #smoke #sanity",
              "fullTitle": "Verify user is able to add shift C349829 - Verify user is able to add shift #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should navigate to oncall screen', this, () => {\n  return onCallHelper.goToOnCall();\n});\nawait step('should navigate to schedule creation screen', this, () => {\n  return onCallHelper.addShift();\n});\nawait step('should create a shift', this, async () => {\n  shiftRequiredFields = {\n    shiftName: CONSTANTS.SHIFT.title + Math.random().toString().substr(2, 6),\n    startDate: moment().add(1, 'days').format(CONSTANTS.SHIFT.dateFormat),\n    endDate: moment().add(3, 'days').format(CONSTANTS.SHIFT.dateFormat),\n    startTime: moment().format(CONSTANTS.SHIFT.timeFormat),\n    endTime: moment().format(CONSTANTS.SHIFT.timeFormat)\n  };\n  await onCallHelper.createNewShift(shiftRequiredFields);\n  await helper.waitForElementToBePresent(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.scrollToElement(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.waitAndClick(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.waitForElementToBeVisible(shift.title);\n  expect(shift.title.getText()).to.eventually.equal(shiftRequiredFields.shiftName);\n});",
              "err": {},
              "uuid": "53e7cc8e-ceb7-44fc-bde3-2d75783e68f9",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "53e7cc8e-ceb7-44fc-bde3-2d75783e68f9"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "cc4123aa-d507-499f-afdd-c2fcfab47480",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "15655506-7d68-4d42-80a9-1d9960b7997e",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "c75506cc-6dea-4595-b516-71f709b532b7",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "19c8f30d-4dc9-4b80-8911-2262d82b0a58",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "79e62061-7045-40f3-8ed5-a2d93bb55b93",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "7a73c0dc-91bd-433d-a4dd-b2dd9487b9c7",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "0182ac85-fe44-4545-b535-80e517d44132",
          "title": "Verify user is able to remove shift [Individual and Series]",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/provideroncall/delete-shift-spec.js",
          "file": "/e2e/sites/specs/provideroncall/delete-shift-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify user is able to remove shift [Individual and Series] \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await sitesAuthHelper.loginSites();\nreturn sitesAuthHelper.loggedIn();",
              "err": {},
              "uuid": "91c98075-8921-4023-bfbd-9dadda399acf",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C349831 - Verify user is able to remove shift [Individual and Series] #smoke #sanity",
              "fullTitle": "Verify user is able to remove shift [Individual and Series] C349831 - Verify user is able to remove shift [Individual and Series] #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should navigate to oncall screen', this, () => {\n  return onCallHelper.goToOnCall();\n});\nawait step('should navigate to shift creation screen', this, () => {\n  return onCallHelper.addShift();\n});\nawait step('should create a shift', this, async () => {\n  shiftRequiredFields = {\n    shiftName: CONSTANTS.SHIFT.title + Math.random().toString().substr(2, 6),\n    startDate: moment().format(CONSTANTS.SHIFT.dateFormat),\n    endDate: moment().add(3, 'days').format(CONSTANTS.SHIFT.dateFormat),\n    startTime: moment().set({\n      hour: '7',\n      minute: '00'\n    }).format(CONSTANTS.SHIFT.timeFormat),\n    endTime: moment().set({\n      hour: '9',\n      minute: '00'\n    }).format(CONSTANTS.SHIFT.timeFormat)\n  };\n  await onCallHelper.createNewShift(shiftRequiredFields);\n  await helper.waitForElementToBePresent(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.scrollElemFinderIntoView(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.clickElement(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.waitForElementToBeVisible(shift.title);\n  expect(shift.title.getText()).to.eventually.equal(shiftRequiredFields.shiftName);\n});\nawait step('should open individual shift remove modal', this, async () => {\n  await helper.waitAndClick(shift.removeMenu);\n  return helper.waitAndClick(shift.individual);\n});\nawait step('should delete individual shift successfully', this, async () => {\n  return helper.waitAndClick(shift.deleteShift);\n});\nawait step('should open series shift remove modal', this, async () => {\n  await helper.waitAndClick(shift.viewModeButton);\n  await helper.waitAndClick(shift.weekViewDesktop);\n  await helper.waitForElementToBePresent(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.scrollElemFinderIntoView(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.waitAndClick(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.waitForElementToBeVisible(shift.title);\n  await helper.waitAndClick(shift.removeMenu);\n  return helper.waitAndClick(shift.series);\n});\nawait step('should delete series shift successfully', this, async () => {\n  await helper.waitAndClick(shift.deleteShift);\n  await helper.waitForElementToBeInvisible(shift.calendarView(shiftRequiredFields.shiftName));\n  const isDeletedShiftVisible = await shift.calendarView(shiftRequiredFields.shiftName).isPresent();\n  expect(isDeletedShiftVisible).to.equal(false);\n});",
              "err": {},
              "uuid": "9f181895-cb40-42a4-94bf-9cc0c0eb40b2",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "9f181895-cb40-42a4-94bf-9cc0c0eb40b2"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "6603c4f9-f143-48b7-8a1d-95def28d31a8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 120,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "e548395b-c161-4968-8412-0b4e502bcbfd",
          "parentUUID": "6603c4f9-f143-48b7-8a1d-95def28d31a8",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "28829d80-164d-4bef-a9d0-8432e99fb234",
          "parentUUID": "6603c4f9-f143-48b7-8a1d-95def28d31a8",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "4b610b36-cf26-46a1-b77f-2aec7f54b253",
          "parentUUID": "6603c4f9-f143-48b7-8a1d-95def28d31a8",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "dd2b0c5c-4464-4c0b-ad78-6c35f490f416",
          "parentUUID": "6603c4f9-f143-48b7-8a1d-95def28d31a8",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "353cff4b-8e46-4f1f-85d4-816ae80053a5",
          "parentUUID": "6603c4f9-f143-48b7-8a1d-95def28d31a8",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "3f0d662a-9cae-4e38-a555-5e7ca9b2d492",
          "title": "Verify reports is appearing for admin user and not appearing for provider user",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/parallel/reports-appearing-for-admin-not-provider-spec.js",
          "file": "/e2e/sites/specs/permissions/parallel/reports-appearing-for-admin-not-provider-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C386 & C512595 - Verify reports is appearing for admin user and not appearing for provider user #smoke #stable #permissions",
              "fullTitle": "Verify reports is appearing for admin user and not appearing for provider user C386 & C512595 - Verify reports is appearing for admin user and not appearing for provider user #smoke #stable #permissions",
              "timedOut": false,
              "duration": 18178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓setup\",\n  \"✓should navigate to System Settings --> Permissions --> Reports --> Basic Stroke Metrics\",\n  \"✓should delete existing rules for Reports --> Basic stroke metrics, if they exist\",\n  \"✓should add Rule - Role Admin\",\n  \"✓should verify that report is visible for admin user\",\n  \"✓should logout from admin and login with provider user\",\n  \"✓should verify that report is not visible for provider user\"\n]",
              "code": "await step('setup', this, async () => {\n  const envParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(envParams);\n  await authHelper.loggedIn();\n});\nawait step('should navigate to System Settings --> Permissions --> Reports --> Basic Stroke Metrics', this, async () => {\n  await permissionsHelper.permissionBasicStrokeMetricsReport();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n});\nawait step('should delete existing rules for Reports --> Basic stroke metrics, if they exist', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionBasicStrokeMeticsReport);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissionReports);\n});\nawait step('should add Rule - Role Admin', this, async () => {\n  // TODO: BW-21214 fix flakiness\n  await permissionsHelper.permissionBasicStrokeMetricsReport();\n  await permissionsHelper.grantAccessTo(permission.admin);\n  await helper.waitForElementToBeVisible(permission.usersPermission);\n});\nawait step('should verify that report is visible for admin user', this, async () => {\n  await reportHelper.reportsPage();\n  await helper.waitAndClick(reports.reportListDropdown);\n  const reportName = await reports.reportName.getText();\n  expect(reportName).to.include(CONSTANTS.REPORTS.basicStrokeMetrics);\n}); // C512595 - Verify reports is not appearing for provider user\nawait step('should logout from admin and login with provider user', this, async () => {\n  await authHelper.logout(header);\n  const envParams = permissionsHelper.setPermissionsEnv('userProvider');\n  await authHelper.loginSites(envParams);\n  await authHelper.loggedIn();\n});\nawait step('should verify that report is not visible for provider user', this, async () => {\n  await helper.waitAndClick(header.toolsDropdown);\n  const reportsTab = await header.analyticsReports.isPresent();\n  if (reportsTab) {\n    await reportHelper.reportsPage();\n    await helper.waitAndClick(reports.reportListDropdown);\n    const reportName = await reports.reportName.getText();\n    expect(reportName).to.not.include(CONSTANTS.REPORTS.basicStrokeMetrics);\n  } else {\n    expect(await header.analyticsReports).to.not.be.present;\n  }\n});",
              "err": {},
              "uuid": "0352903d-2fc6-46f9-90ff-6c238c5616a1",
              "parentUUID": "3f0d662a-9cae-4e38-a555-5e7ca9b2d492",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0352903d-2fc6-46f9-90ff-6c238c5616a1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18178,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "13d088bf-ec3a-4e4a-b2c7-86bee1320ebd",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 120,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "142bce1e-52b4-46c2-a836-3d3a1fc350f3",
          "parentUUID": "13d088bf-ec3a-4e4a-b2c7-86bee1320ebd",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "9d38272d-c616-46ef-a8dd-ac8eeb3a666d",
          "parentUUID": "13d088bf-ec3a-4e4a-b2c7-86bee1320ebd",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "b8b868af-ad08-4cd4-a92b-131fa8498adc",
          "parentUUID": "13d088bf-ec3a-4e4a-b2c7-86bee1320ebd",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "ce7cea57-765b-40e7-b556-0f6e4c67ba42",
          "parentUUID": "13d088bf-ec3a-4e4a-b2c7-86bee1320ebd",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "d270d94f-8da4-4a0a-aa04-1b9419c48c10",
          "parentUUID": "13d088bf-ec3a-4e4a-b2c7-86bee1320ebd",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "aa3abfea-909f-4942-bd8b-ae21546aca36",
          "title": "checks for add/remove favorite user from all users table",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/directory/add-remove-favorite-user-from-directory-spec.js",
          "file": "/e2e/sites/specs/directory/add-remove-favorite-user-from-directory-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "checks for add/remove favorite user from all users table \"before all\" hook: ret",
              "timedOut": false,
              "duration": 4600,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "1b4091c6-d7b7-4756-8c45-19e275b1e625",
              "parentUUID": "aa3abfea-909f-4942-bd8b-ae21546aca36",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C400 & C399 - checks for add/remove favorite user from all users table #smoke #sanity #stable",
              "fullTitle": "checks for add/remove favorite user from all users table C400 & C399 - checks for add/remove favorite user from all users table #smoke #sanity #stable",
              "timedOut": false,
              "duration": 51390,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓should navigate to the directory page\",\n  \"✓checks for loading filters and data\",\n  \"✓add favorite user from list\",\n  \"✓remove favorite user from list\"\n]",
              "code": "await step('should navigate to the directory page', this, () => {\n  return directoryHelper.directoryPage();\n});\nawait step('checks for loading filters and data', this, async () => {\n  await helper.waitForElementToBeVisible(directory.userFilters);\n  await helper.waitForElementToBeVisible(directory.allUsersData);\n  return helper.waitForElementToBeVisible(directory.tableUsers);\n});\nawait step('add favorite user from list', this, async () => {\n  const initialFavouritesQnt = await directoryHelper.getFavoritesQuantity();\n  await helper.waitForElementToBeVisible(directory.allUsersData);\n  await helper.clickElement(directory.allUsersFavoriteLink.first());\n  await helper.waitForElementToBeVisible(directory.tableFavoriteUsers);\n  const resultFavouritesQnt = await directoryHelper.awaitFavoritesQuantityChanged(initialFavouritesQnt);\n  expect(initialFavouritesQnt).to.be.equal(resultFavouritesQnt - 1);\n});\nawait step('remove favorite user from list', this, async () => {\n  const initialFavouritesQnt = await directoryHelper.getFavoritesQuantity();\n  await helper.waitForElementToBeVisible(directory.allUsersData);\n  await helper.waitForElementToBeVisible(directory.tableFavoriteUsers);\n  await helper.clickElement(directory.favoriteUsersUnfavoriteLink.first());\n  const resultFavouritesQnt = await directoryHelper.awaitFavoritesQuantityChanged(initialFavouritesQnt);\n  expect(initialFavouritesQnt).to.be.equal(resultFavouritesQnt + 1);\n});",
              "err": {},
              "uuid": "b6e9d102-749f-436d-81a7-f624231a4b9b",
              "parentUUID": "aa3abfea-909f-4942-bd8b-ae21546aca36",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b6e9d102-749f-436d-81a7-f624231a4b9b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 51390,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "dcdd5a98-976d-45e0-a2bb-5aaf0fd468e0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "0952c44e-ff37-44a4-9320-182d3e8b604e",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "06967fcb-0816-4c59-9e6a-ee1b94da55b9",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "ec319770-80fe-4528-8f71-cc3d893af2f4",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "e4568897-49b6-4dd5-9d58-583f64c2bfaf",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "eb5e1064-826b-4bf9-bb4e-e05716361d1b",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "8121f27a-bc39-49e1-bee0-63ba2083a0c0",
          "title": "Verify user is able to edit shift [Individual and Series]",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/provideroncall/edit-shift-spec.js",
          "file": "/e2e/sites/specs/provideroncall/edit-shift-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Verify user is able to edit shift [Individual and Series] \"before all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn authHelper.loggedIn();",
              "err": {},
              "uuid": "c832082e-d90d-4bf6-8382-fbb6f76301b0",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: ret",
              "fullTitle": "Verify user is able to edit shift [Individual and Series] \"after all\" hook: ret",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// delete created shift\nawait onCallHelper.goToOnCall();\nawait helper.waitAndClick(schedule.clinicalModuleCardiology);\nawait onCallHelper.deleteShiftByName(shiftRequiredFields.shiftName);\nreturn helper.waitForElementToBeInvisible(shift.calendarView(shiftRequiredFields.shiftName));",
              "err": {},
              "uuid": "d780a034-4379-432f-aa5d-b327f1f76612",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C349830 - Verify user is able to edit shift [Individual and Series] #smoke #sanity",
              "fullTitle": "Verify user is able to edit shift [Individual and Series] C349830 - Verify user is able to edit shift [Individual and Series] #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('should navigate to oncall screen', this, () => {\n  return onCallHelper.goToOnCall();\n});\nawait step('should navigate to shift creation screen', this, () => {\n  return onCallHelper.addShift();\n});\nawait step('should create a shift', this, async () => {\n  shiftRequiredFields = {\n    shiftName: CONSTANTS.SHIFT.title + Math.random().toString().substr(2, 6),\n    startDate: moment().add(1, 'days').format(CONSTANTS.SHIFT.dateFormat),\n    endDate: moment().add(3, 'days').format(CONSTANTS.SHIFT.dateFormat),\n    startTime: moment().add(1, 'hours').format(CONSTANTS.SHIFT.timeFormat),\n    endTime: moment().add(2, 'hours').format(CONSTANTS.SHIFT.timeFormat)\n  };\n  await onCallHelper.createNewShift(shiftRequiredFields);\n  await helper.waitForElementToBePresent(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.scrollToElement(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.waitAndClick(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.waitForElementToBeVisible(shift.title);\n  expect(shift.title.getText()).to.eventually.equal(shiftRequiredFields.shiftName);\n});\nawait step('should open individual shift edit page', this, async () => {\n  await helper.waitAndClick(shift.editShift);\n  return helper.waitAndClick(shift.individualShift);\n});\nawait step('should edit individual shift successfully', this, async () => {\n  await onCallHelper.editIndividualShift();\n  await helper.waitForElementToBePresent(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.scrollToElement(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.waitForElementToBeVisible(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.waitAndClick(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.waitForElementToBeVisible(shift.title);\n  expect(shift.editShiftPriorityCardLabel.getText()).to.eventually.equal(CONSTANTS.SHIFT.priority);\n});\nawait step('should open series shift edit page', this, async () => {\n  await helper.waitAndClick(shift.editShift);\n  return helper.waitAndClick(shift.seriesShift);\n});\nawait step('should edit series shift successfully', this, async () => {\n  await onCallHelper.editSeriesShift();\n  await helper.waitForElementToBePresent(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.scrollToElement(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.waitAndClick(shift.calendarView(shiftRequiredFields.shiftName));\n  await helper.waitForElementToBeVisible(shift.title);\n  expect(shift.editShiftPriorityCardLabel.getText()).to.eventually.equal(CONSTANTS.SHIFT.priority);\n  return helper.waitAndClick(shift.closeShiftPopup);\n});",
              "err": {},
              "uuid": "be9a4458-3f80-4735-a939-6b89cf942e58",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "be9a4458-3f80-4735-a939-6b89cf942e58"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "a6316a9f-c189-432b-a518-f1050aa28904",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 121,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "00473418-9886-4895-afc2-3d6dc6018d82",
          "parentUUID": "a6316a9f-c189-432b-a518-f1050aa28904",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "39faab5e-eae2-406d-bc37-1a9c81567183",
          "parentUUID": "a6316a9f-c189-432b-a518-f1050aa28904",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "5fbb9605-f0f2-4bd4-bdee-99d741427cb1",
          "parentUUID": "a6316a9f-c189-432b-a518-f1050aa28904",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "85b222c0-c56a-400c-b296-cbd7b44e7634",
          "parentUUID": "a6316a9f-c189-432b-a518-f1050aa28904",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "1b27fc51-ef63-49fa-a885-0b9355afbb6d",
          "parentUUID": "a6316a9f-c189-432b-a518-f1050aa28904",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "7e0c878f-fbc0-4138-9989-598bd94d452e",
          "title": "Verify reports are appearing in sorted order",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/reports/reports-sorted-spec.js",
          "file": "/e2e/sites/specs/reports/reports-sorted-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C855639 - Reports - Verify reports are appearing in sorted order #stable #smoke #sanity",
              "fullTitle": "Verify reports are appearing in sorted order C855639 - Reports - Verify reports are appearing in sorted order #stable #smoke #sanity",
              "timedOut": false,
              "duration": 5725,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓Should login on sites\",\n  \"✓Navigate to reports page\",\n  \"✓Check reports in dropdown are sorted in Ascending order\"\n]",
              "code": "await step('Should login on sites', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('Navigate to reports page', this, async () => {\n  await reportHelper.reportsPage();\n  return helper.waitForUrlToHave(CONSTANTS.ROUTE.reports);\n});\nawait step('Check reports in dropdown are sorted in Ascending order', this, async () => {\n  await helper.waitAndClick(reports.reportListDropdown);\n  const reportNames = await reports.caseDetailReportItemsAll.getText();\n  const sorted = reportNames.sort();\n  expect(reportNames).to.deep.equal(sorted);\n});",
              "err": {},
              "uuid": "59586517-bbed-4bf1-8fa0-e8441b8f5763",
              "parentUUID": "7e0c878f-fbc0-4138-9989-598bd94d452e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "59586517-bbed-4bf1-8fa0-e8441b8f5763"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5725,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "7ed14b3e-770a-442e-88ac-3abaabe0d56b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 122,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "30381253-77ba-4c41-8d57-2d0cebc6b30a",
          "parentUUID": "7ed14b3e-770a-442e-88ac-3abaabe0d56b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "607c63ff-6e96-4ae2-8e43-2985f8b7a7c8",
          "parentUUID": "7ed14b3e-770a-442e-88ac-3abaabe0d56b",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "3ecf8d3b-c5e9-4959-978f-839744779020",
          "parentUUID": "7ed14b3e-770a-442e-88ac-3abaabe0d56b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "b1f83ec4-969a-452d-8ee9-97a59d80c316",
          "parentUUID": "7ed14b3e-770a-442e-88ac-3abaabe0d56b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "30ace995-850b-4e75-95fc-cf824dacce38",
          "parentUUID": "7ed14b3e-770a-442e-88ac-3abaabe0d56b",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "d3f70ad1-4113-4c5c-9c29-f26314fd4214",
          "title": "should verify contact preference values are ON by default for newly created user",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/profile/verify-profile-contact-preferences-are-enabled-by-default-spec.js",
          "file": "/e2e/sites/specs/profile/verify-profile-contact-preferences-are-enabled-by-default-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "should verify contact preference values are ON by default for newly created user \"before all\" hook: ret",
              "timedOut": false,
              "duration": 5841,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.loginSites();\nreturn Helper.waitForUrlToChange(CONSTANTS.ROUTE.login);",
              "err": {},
              "uuid": "bfbf9a9d-4280-4729-8472-5deed1d2d1ea",
              "parentUUID": "d3f70ad1-4113-4c5c-9c29-f26314fd4214",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C780042 - should verify contact preference values are ON by default for newly created user #smoke #stable",
              "fullTitle": "should verify contact preference values are ON by default for newly created user C780042 - should verify contact preference values are ON by default for newly created user #smoke #stable",
              "timedOut": false,
              "duration": 55487,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓should invite a new user\",\n  \"✓should join site by new user\",\n  \"✓should verify contact preferences are ON by default\"\n]",
              "code": "await step('should invite a new user', this, async () => {\n  await settingsHelper.inviteUserSettings(settings, helperInstance);\n  return settingsHelper.submitSettings(settings);\n});\nawait step('should join site by new user', this, async () => {\n  const savedValues = helperInstance.getSavedValues();\n  const savedEmail = savedValues.find(Obj => Obj.id === 'email').value;\n  await settingsHelper.joinSite(settings, helperInstance, {\n    user: savedEmail\n  });\n  await Helper.waitAndClick(header.userProfileDropDown);\n  await Helper.waitAndClick(header.profileAccount);\n  await Helper.waitForElementToBeVisible(profileGeneral.profileAndAccount);\n  const profileText = await profileGeneral.profileAndAccount.getText();\n  expect(profileText).to.include('Profile & Account');\n});\nawait step('should verify contact preferences are ON by default', this, async () => {\n  await Helper.waitForElementToBeVisible(profileContactPreferences.profile_contact_preferences);\n  await Helper.clickVisibleElement(profileContactPreferences.profile_contact_preferences);\n  await Helper.waitForElementToBePresent(profileContactPreferences.contact_preferences_settings);\n  const contactPreferenceLength = await profileContactPreferences.contactPreferenceLength.count();\n  const contactPreferenceCheckboxLength = await profileContactPreferences.contactPreferenceCheckboxLength.count();\n  expect(contactPreferenceLength).to.equal(contactPreferenceCheckboxLength);\n});",
              "err": {},
              "uuid": "07a043a2-8532-49a0-a384-fc65b43c7dd9",
              "parentUUID": "d3f70ad1-4113-4c5c-9c29-f26314fd4214",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "07a043a2-8532-49a0-a384-fc65b43c7dd9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 55487,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "f62e4aa1-4a8d-4112-ad48-d0c6cedeb089",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 122,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "9d6ad4bb-32c6-441c-8351-89d057fef8fa",
          "parentUUID": "f62e4aa1-4a8d-4112-ad48-d0c6cedeb089",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "333a8bc6-e8cc-4747-80ea-1d76d9c162fe",
          "parentUUID": "f62e4aa1-4a8d-4112-ad48-d0c6cedeb089",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "2acd8768-a4c8-42c0-bbeb-06a1b2fd88ad",
          "parentUUID": "f62e4aa1-4a8d-4112-ad48-d0c6cedeb089",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "463138eb-c92a-4725-8a7c-463dd23346be",
          "parentUUID": "f62e4aa1-4a8d-4112-ad48-d0c6cedeb089",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "65d00d4f-9f01-41f1-b633-bfa8c2983bb9",
          "parentUUID": "f62e4aa1-4a8d-4112-ad48-d0c6cedeb089",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "082fab3a-9e20-417d-8c4e-974219e5bd3c",
          "title": "All Cases page Permissions",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/sequential-spec.js",
          "file": "/e2e/sites/specs/permissions/sequential-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804222 - All Cases page Permissions #permissions",
              "fullTitle": "All Cases page Permissions C1804222 - All Cases page Permissions #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let caseId;\nawait step('setup', this, async () => {\n  // set permissions of view and edit for admin only\n  const siteParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n});\nawait step('Navigate to System Settings --> Permissions --> All Cases', this, async () => {\n  await permissionsHelper.permissionAllCases();\n  await helper.waitForElementToBeVisible(permission.allCasesPage);\n  const allCasesPage = await permission.allCasesPage.isPresent();\n  expect(allCasesPage).to.be.true;\n});\nawait step('Delete existing rules if they exist', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionAllCases);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Add Rule - Role Admin', this, async () => {\n  await permissionsHelper.permissionAllCases();\n  await permissionsHelper.grantAccessTo(permission.admin);\n  await helper.waitForElementToBePresent(permission.manageSitePermissionsPage);\n});\nawait step('Check for All Cases Button', this, async () => {\n  // Permissions can take up to 120 seconds to update\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await browser.refresh();\n    await helper.waitForElementToBeVisible(permission.navbarClinic);\n    await helper.clickElement(permission.navbarClinic);\n    await helper.waitForElement(permission.navbarAllCasesBtn);\n  }, 'Check for All Cases Button', 3);\n});\nawait step('Create a case', this, async () => {\n  await caseHelper.createCase(createCase.clinicalModule, createCase.facility);\n  await helper.waitForElementToBeVisible(caseDetail.videoMessagePane);\n  caseId = await permission.caseId.getText();\n  expect(caseId).to.not.be.undefined;\n  expect(caseId).to.not.be.null;\n});\nawait step('Login as other admin user', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userAdmin');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('Check that other admin user can see the case', this, async () => {\n  await permissionsHelper.allCases();\n  await helper.waitForElementToBeVisible(permission.casesSearch);\n  await helper.clickElement(permission.casesSearch);\n  await helper.replaceInputValue(permission.casesSearch, '', caseId);\n  await helper.waitForElementToBeVisible(permission.caseNumber);\n  await helper.clickElement(permission.caseNumber);\n  await helper.waitForElementToBeVisible(permission.caseId);\n  await helper.waitForTextToBePresentInElement(permission.caseId, caseId);\n});\nawait step('Login as a coordinator user', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userCoordinator');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('Check that coordinator cannot see the All Cases page', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await permissionsHelper.allCases();\n    const unauthorizedPopup = await permission.unauthorized.isPresent();\n    expect(unauthorizedPopup).to.be.true;\n  }, 'wait for the permissions to take effect', 3);\n});",
              "err": {},
              "uuid": "b146ef77-68f6-452a-b01c-afdac04fb239",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "b146ef77-68f6-452a-b01c-afdac04fb239"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        },
        {
          "uuid": "6ebc666d-ac30-4ba5-8c98-0069da8475e9",
          "title": "permissions - connect module",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/sequential-spec.js",
          "file": "/e2e/sites/specs/permissions/sequential-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804223 - connect module #permissions",
              "fullTitle": "permissions - connect module C1804223 - connect module #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let newEnv = '';\nawait step('setup', this, async () => {\n  newEnv = await permissionsHelper.getPermissionsEnvName();\n  const api = new ApiHelper(env.enterprise[newEnv].code);\n  const moduleIsEnabled = await api.enableSiteModule(env.site[newEnv].code, CONSTANTS.SITES_MODULES.connect);\n  expect(moduleIsEnabled).to.be.true;\n});\nawait step('Login to sites', this, async () => {\n  const siteParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n});\nawait step('Navigate to System Settings --> Permissions --> connect', this, async () => {\n  await permissionsHelper.permissionConnect();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  const connectPage = await permission.connectPage.isPresent();\n  expect(connectPage).to.be.true;\n});\nawait step('Delete existing rules for who can access appointments, if they exist', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionConnect);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Add Rule - Role Admin and Coordinator', this, async () => {\n  await permissionsHelper.permissionConnect();\n  await permissionsHelper.grantAccessTo(permission.admin);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionConnect();\n  await permissionsHelper.grantAccessTo(permission.coordinator, 1);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionConnect();\n  return permissionsHelper.toggleOR();\n});\nawait step('Login as a coordinator user', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userCoordinator');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('verify that the invite participants button is visible', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await permissionsHelper.connect();\n    await helper.waitForElementToBeVisible(connectObjects.inviteParticipants);\n    const inviteParticipants = await connectObjects.inviteParticipants.isPresent();\n    expect(inviteParticipants).to.be.true;\n  }, 'retry until permissions for connect takes effect', 3);\n});\nawait step('Login as a provider', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userProvider');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('Verify that the provider user cannot access the connect module', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await permissionsHelper.connect();\n    const unauthorizedPopup = await permission.unauthorized.isPresent();\n    expect(unauthorizedPopup).to.be.true;\n  }, 'retry until permissions for connect takes effect', 3);\n});\nawait step('Login as an admin user to extend access to the provider group users', this, async () => {\n  await helper.clickElement(permission.unauthorizedModalConfirmButton);\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userAdmin');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('extending access to users of provider group', this, async () => {\n  await permissionsHelper.permissionConnect();\n  await permissionsHelper.addGroup(permission.providerGroup, 2);\n  return helper.waitForElementToBeVisible(permission.permissionTab);\n});\nawait step('Login as a provider group user', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userProvider');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('verify that the invite participants button is visible for the provider group user', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await permissionsHelper.connect();\n    await helper.waitForElementToBeVisible(connectObjects.inviteParticipants);\n    const inviteParticipants = await connectObjects.inviteParticipants.isPresent();\n    expect(inviteParticipants).to.be.true;\n  }, 'retry until permissions for connect takes effect', 3);\n});",
              "err": {},
              "uuid": "9e472ba0-29bd-4443-a477-35670200d82a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "9e472ba0-29bd-4443-a477-35670200d82a"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        },
        {
          "uuid": "deac330d-40bf-4680-a3c7-21e8eaa3ccaa",
          "title": "Coordinator dashboard permissions test",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/sequential-spec.js",
          "file": "/e2e/sites/specs/permissions/sequential-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804224 - Coordinator dashboard permissions test #permissions #stable",
              "fullTitle": "Coordinator dashboard permissions test C1804224 - Coordinator dashboard permissions test #permissions #stable",
              "timedOut": false,
              "duration": 65119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓setup\",\n  \"✓Navigate to System Settings --> Permissions --> Dashboard --> Coordinator Dashboard\",\n  \"✓Delete existing rules if they exist\",\n  \"✓Add Rule - Role Admin\",\n  \"✓Login with another admin user\",\n  \"✓Verify that the other admin user can see the coordinator dashboard\",\n  \"✓Login as a coordinator user\",\n  \"✓Check that the coordinator dashboard does not appear for the coordinator user\"\n]",
              "code": "await step('setup', this, async () => {\n  const siteParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n});\nawait step('Navigate to System Settings --> Permissions --> Dashboard --> Coordinator Dashboard', this, async () => {\n  await permissionsHelper.permissionCoordinatorDashboard();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  const coordinatorPage = await permission.coordinatorPage.isPresent();\n  expect(coordinatorPage).to.be.true;\n});\nawait step('Delete existing rules if they exist', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionCoordinatorDashboard);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Add Rule - Role Admin', this, async () => {\n  await permissionsHelper.permissionCoordinatorDashboard();\n  await permissionsHelper.grantAccessTo(permission.admin);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n});\nawait step('Login with another admin user', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userAdmin');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('Verify that the other admin user can see the coordinator dashboard', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await helper.waitForElementToBeVisible(permission.homePageButton);\n    await helper.clickElement(permission.homePageButton);\n    await helper.waitForElementToBeVisible(dashboard.welcomeMessage);\n    const coordinationText = await permission.coordinationText.isPresent();\n    expect(coordinationText).to.be.true;\n  }, 'retrying for the permissions changes to take effect', 3);\n});\nawait step('Login as a coordinator user', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userCoordinator');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('Check that the coordinator dashboard does not appear for the coordinator user', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await helper.waitForElementToBeVisible(permission.homePageButton);\n    await helper.clickElement(permission.homePageButton);\n    const coordinationText = await permission.coordinationText.isPresent();\n    expect(coordinationText).to.be.false;\n  }, 'retrying for the permissions changes to take effect', 3);\n});",
              "err": {},
              "uuid": "50ea6975-0063-4f0d-a9f1-695fe585c8b7",
              "parentUUID": "deac330d-40bf-4680-a3c7-21e8eaa3ccaa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "50ea6975-0063-4f0d-a9f1-695fe585c8b7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 65119,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        },
        {
          "uuid": "2f247281-be96-4fbd-87e2-0b33e73f6d4e",
          "title": "Negative Test: When access to Dashboards, my cases and all cases page is disabled, the homepage link should navigate to connect page",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/sequential-spec.js",
          "file": "/e2e/sites/specs/permissions/sequential-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804225 - When access to Dashboards, my cases and all cases page is disabled, the homepage link should navigate to connect page #permissions",
              "fullTitle": "Negative Test: When access to Dashboards, my cases and all cases page is disabled, the homepage link should navigate to connect page C1804225 - When access to Dashboards, my cases and all cases page is disabled, the homepage link should navigate to connect page #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('setup', this, async () => {\n  const siteParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n});\nawait step('Navigate to System Settings --> Permissions --> Dashboard --> Coordinator Dashboard', this, async () => {\n  await permissionsHelper.permissionCoordinatorDashboard();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  const coordinatorPage = await permission.coordinatorPage.isPresent();\n  expect(coordinatorPage).to.be.true;\n});\nawait step('Remove all users access from Coordinator and Provider Dashboards', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionCoordinatorDashboard);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n  await permissionsHelper.permissionProviderDashboard();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  await permissionsHelper.deleteExistingPermissions();\n  return helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionProviderDashboard);\n});\nawait step('Remove all users access from my cases page', this, async () => {\n  await permissionsHelper.permissionMyCasesPage();\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionMyCases);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Remove all users access from all cases page', this, async () => {\n  await permissionsHelper.permissionAllCases();\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionAllCases);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Make sure the admin group and users with the provider role have access to connect page', this, async () => {\n  await permissionsHelper.permissionConnect();\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionConnect);\n  await permissionsHelper.permissionConnect();\n  await permissionsHelper.addGroup(permission.adminGroup);\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionConnect);\n  await permissionsHelper.permissionConnect();\n  await permissionsHelper.grantAccessTo(permission.provider, 1);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionConnect();\n  return permissionsHelper.toggleOR();\n});\nawait step('Login as a member of admin group', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userAdmin');\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n});\nawait step('verify that the logged in user lands on connect page', this, async () => {\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.connect);\n});\nawait step('Log out and login as a provider user', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userProvider');\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n});\nawait step('verify that the logged in user lands on connect page', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    const currentUrl = await browser.getCurrentUrl();\n    expect(currentUrl).to.include(CONSTANTS.ROUTE.connect);\n  }, 'retry until the permission changes take effect', 3);\n});",
              "err": {},
              "uuid": "6f57ef21-1b5c-4206-a1aa-d193bfd8d2d9",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "6f57ef21-1b5c-4206-a1aa-d193bfd8d2d9"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        },
        {
          "uuid": "69a43de5-158b-4106-b359-9259a9233a3e",
          "title": "Negative Test: When access to Coordinator dashboard is disabled, the homepage link should navigate to my cases page",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/sequential-spec.js",
          "file": "/e2e/sites/specs/permissions/sequential-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804226 - Negative Test: When access to Coodinator Dashboard is disabled, the homepage link should navigate to my cases page #permissions",
              "fullTitle": "Negative Test: When access to Coordinator dashboard is disabled, the homepage link should navigate to my cases page C1804226 - Negative Test: When access to Coodinator Dashboard is disabled, the homepage link should navigate to my cases page #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('setup', this, async () => {\n  const siteParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n});\nawait step('Navigate to System Settings --> Permissions --> Dashboard --> Coordinator Dashboard', this, async () => {\n  await permissionsHelper.permissionCoordinatorDashboard();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  const coordinatorPage = await permission.coordinatorPage.isPresent();\n  expect(coordinatorPage).to.be.true;\n});\nawait step('Remove all users access from Coordinator and Provider Dashboards', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionCoordinatorDashboard);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n  await permissionsHelper.permissionProviderDashboard();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionProviderDashboard);\n});\nawait step('Make sure the admin or provider groups have access to the my cases page', this, async () => {\n  await permissionsHelper.permissionMyCasesPage();\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionMyCases);\n  await permissionsHelper.permissionMyCasesPage();\n  await permissionsHelper.addGroup(permission.adminGroup);\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionMyCases);\n  await permissionsHelper.permissionMyCasesPage();\n  await permissionsHelper.addGroup(permission.providerGroup, 1);\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionMyCases);\n  await permissionsHelper.permissionMyCasesPage();\n  return permissionsHelper.toggleOR();\n});\nawait step('Login a member of either admin or provider group', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userAdmin');\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n});\nawait step('verify that the logged in user lands on my cases page - not the dashboard page', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    const currentUrl = await browser.getCurrentUrl();\n    expect(currentUrl).to.include(CONSTANTS.ROUTE.myCase);\n  }, 'retry until the permission changes take effect', 3);\n});",
              "err": {},
              "uuid": "2c3812c2-1849-4cdd-b31e-12ceb9b549b2",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "2c3812c2-1849-4cdd-b31e-12ceb9b549b2"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        },
        {
          "uuid": "1e9686b8-e513-4cdf-8e51-9d22555603aa",
          "title": "Negative Test: When access to Dashboards and my cases page is disabled, the homepage link should navigate to all cases page",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/sequential-spec.js",
          "file": "/e2e/sites/specs/permissions/sequential-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804227 - Negative Test: When access to Dashboards and my cases page is disabled, the homepage link should navigate to all cases page #permissions",
              "fullTitle": "Negative Test: When access to Dashboards and my cases page is disabled, the homepage link should navigate to all cases page C1804227 - Negative Test: When access to Dashboards and my cases page is disabled, the homepage link should navigate to all cases page #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('setup', this, async () => {\n  const siteParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n});\nawait step('Navigate to System Settings --> Permissions --> Dashboard --> Coordinator Dashboard', this, async () => {\n  await permissionsHelper.permissionCoordinatorDashboard();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  const coordinatorPage = await permission.coordinatorPage.isPresent();\n  expect(coordinatorPage).to.be.true;\n});\nawait step('Remove all users access from Coordinator and Provider Dashboards', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionCoordinatorDashboard);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n  await permissionsHelper.permissionProviderDashboard();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  await permissionsHelper.deleteExistingPermissions();\n  return helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionProviderDashboard);\n});\nawait step('Remove all users access from my cases page', this, async () => {\n  await permissionsHelper.permissionMyCasesPage();\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionMyCases);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Provide the admin group access to the all cases page', this, async () => {\n  await permissionsHelper.permissionAllCases();\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionAllCases);\n  await permissionsHelper.permissionAllCases();\n  await permissionsHelper.addGroup(permission.adminGroup);\n  return helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionAllCases);\n});\nawait step('Login as a member of admin group', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userAdmin');\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n});\nawait step('verify that the logged in user lands on all cases page', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    const currentUrl = await browser.getCurrentUrl();\n    expect(currentUrl).to.include(CONSTANTS.ROUTE.allCases);\n  }, 'retry until the permission changes take effect', 3);\n});\nawait step('further restrict the all cases page access to providers only who are member of the admin group added above', this, async () => {\n  await permissionsHelper.permissionAllCases();\n  await permissionsHelper.grantAccessTo(permission.provider, 1);\n  return helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionAllCases);\n});\nawait step('Login as the user who is a member of the admin group AND a provider', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userAdminProvider');\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n});\nawait step('verify that the logged in user lands on all cases page', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    const currentUrl = await browser.getCurrentUrl();\n    expect(currentUrl).to.include(CONSTANTS.ROUTE.allCases);\n  }, 'retry until the permission changes take effect', 3);\n});",
              "err": {},
              "uuid": "59cd2820-083a-4e8a-b279-a6fb8e643472",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "59cd2820-083a-4e8a-b279-a6fb8e643472"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        },
        {
          "uuid": "cec03bbf-9942-447d-89c3-766e6892d15e",
          "title": "Negative Test: When access to Dashboards, my cases, all cases and connectß page is disabled, the homepage link should navigate to the on call page",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/sequential-spec.js",
          "file": "/e2e/sites/specs/permissions/sequential-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804228 - When access to Dashboards, my cases, all cases  and connect page is disabled, the homepage link should navigate to on call page #permissions",
              "fullTitle": "Negative Test: When access to Dashboards, my cases, all cases and connectß page is disabled, the homepage link should navigate to the on call page C1804228 - When access to Dashboards, my cases, all cases  and connect page is disabled, the homepage link should navigate to on call page #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let currentUrl = '';\nawait step('setup', this, async () => {\n  const siteParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n});\nawait step('Navigate to System Settings --> Permissions --> Dashboard --> Coordinator Dashboard', this, async () => {\n  await permissionsHelper.permissionCoordinatorDashboard();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  const coordinatorPage = await permission.coordinatorPage.isPresent();\n  expect(coordinatorPage).to.be.true;\n});\nawait step('Remove all users access from Coordinator and Provider Dashboards', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionCoordinatorDashboard);\n  currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n  await permissionsHelper.permissionProviderDashboard();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  await permissionsHelper.deleteExistingPermissions();\n  return helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionProviderDashboard);\n});\nawait step('Remove all users access from my cases page', this, async () => {\n  await permissionsHelper.permissionMyCasesPage();\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionMyCases);\n  currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Remove all users access from all cases page', this, async () => {\n  await permissionsHelper.permissionAllCases();\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionAllCases);\n  currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Remove all users access from connect page', this, async () => {\n  await permissionsHelper.permissionConnect();\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionConnect);\n  currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Make sure the admin group and users with the provider role have access to on call page', this, async () => {\n  await permissionsHelper.permissionOnCallHomepage();\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionOnCallHomepage);\n  await permissionsHelper.permissionOnCallHomepage();\n  await permissionsHelper.addGroup(permission.adminGroup);\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionOnCallHomepage);\n  await permissionsHelper.permissionOnCallHomepage();\n  await permissionsHelper.grantAccessTo(permission.provider, 1);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionOnCallHomepage();\n  return permissionsHelper.toggleOR();\n});\nawait step('Login as a member of admin group', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userAdmin');\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n}); // Step fails due to sites UI bug: https://emergemd.jira.com/browse/BW-21299 caught by this test run.\nawait step('verify that the logged in user lands on on-call homepage', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    currentUrl = await browser.getCurrentUrl();\n    expect(currentUrl).to.include(CONSTANTS.ROUTE.onCallHomepage);\n  }, 'retry until the permission changes take effect', 3);\n});\nawait step('Log out and login as a provider user', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userProvider');\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n}); // Step fails due to sites UI bug: https://emergemd.jira.com/browse/BW-21299 caught by this test run.\nawait step('verify that the logged in user lands on on-call homepage', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    currentUrl = await browser.getCurrentUrl();\n    expect(currentUrl).to.include(CONSTANTS.ROUTE.onCallHomepage);\n  }, 'retry until the permission changes take effect', 3);\n});",
              "err": {},
              "uuid": "bb7bbb2b-e765-4ffe-a33c-7a17efc0fbf9",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "bb7bbb2b-e765-4ffe-a33c-7a17efc0fbf9"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        },
        {
          "uuid": "68b2f356-bbe8-40c8-af3b-f9a3bd9a4ff8",
          "title": "Case Permissions - Edit case",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/sequential-spec.js",
          "file": "/e2e/sites/specs/permissions/sequential-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1834151 - Only authorized users should be able to edit a case #permissions",
              "fullTitle": "Case Permissions - Edit case C1834151 - Only authorized users should be able to edit a case #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('setup', this, async () => {\n  const siteParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n});\nawait step('Navigate to workflow permissions for editing a case', this, async () => {\n  await permissionsHelper.workflowPermission();\n  const random = await utils.getRandomInt(1, 4);\n  workflowHeader = await permission.workflowHeader(random).getText();\n  formatedHeader = await workflowHeader.toLowerCase().replace(' ', '');\n  await helper.waitAndClick(permission.editCase(formatedHeader));\n});\nawait step('Delete existing rules for who can access this workflow, if they exist', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionWorkflowEdit);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.workflowPermission);\n});\nawait step('Add Rule - Role Admin and Coordinator', this, async () => {\n  await helper.waitAndClick(permission.editCase(formatedHeader));\n  await permissionsHelper.grantAccessTo(permission.admin);\n  await helper.waitForElementToBeVisible(permission.casePermissionsTab);\n  await helper.waitAndClick(permission.editCase(formatedHeader));\n  await permissionsHelper.addGroup(permission.coordinatorGroup, 1);\n  await helper.waitForElementToBeVisible(permission.casePermissionsTab);\n  await helper.waitAndClick(permission.editCase(formatedHeader));\n  return permissionsHelper.toggleOR();\n});\nawait step('logout and login as a provider user', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userProvider');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('verify that the provider user can NOT create cases in the restricted workflow', this, async () => {\n  await createCaseHelper.addCasePage();\n  const workflowLocator = element(by.cssContainingText('h5[automation=\"clinicalModuleName\"]', workflowHeader));\n  const isWorkflowPresent = await workflowLocator.isPresent();\n  expect(isWorkflowPresent).to.be.false;\n});",
              "err": {},
              "uuid": "eebffd6a-6d43-4bda-853f-eeeba22e0ab5",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "eebffd6a-6d43-4bda-853f-eeeba22e0ab5"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        },
        {
          "uuid": "613cdb10-8d82-42c7-ad37-9c6234b86ad6",
          "title": "Managing on call schedules calendar",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/sequential-spec.js",
          "file": "/e2e/sites/specs/permissions/sequential-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804230 - Managing on call schedules calendar #permissions",
              "fullTitle": "Managing on call schedules calendar C1804230 - Managing on call schedules calendar #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('setup', this, async () => {\n  const siteParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n});\nawait step('Navigate to System Settings --> Permissions --> On Call --> Manage On Call', this, async () => {\n  await permissionsHelper.permissionManageOnCall();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  const manageOnCallPage = await permission.manageOnCallPage.isPresent();\n  expect(manageOnCallPage).to.be.true;\n});\nawait step('Delete existing rules for who can manage oncall calendar, if they exist', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionManageOnCall);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Add Rule - Role Admin and Provider', this, async () => {\n  await permissionsHelper.permissionManageOnCall();\n  await permissionsHelper.grantAccessTo(permission.admin);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionManageOnCall();\n  await permissionsHelper.grantAccessTo(permission.provider, 1);\n  return helper.waitForElementToBeVisible(permission.permissionTab);\n});\nawait step('Login as the user with both admin and provider rights', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userAdminProvider');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('verify that the user can navigate to the Provider On Call Calendar homepage', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await permissionsHelper.onCallHomepage();\n    await helper.waitForElementToBeVisible(providerOnCall.timeOptionBtn);\n    const timeOptionBtn = await providerOnCall.timeOptionBtn.isPresent();\n    expect(timeOptionBtn).to.be.true;\n  }, 'retry until permissions for view on call calendar homepage takes effect', 3);\n});\nawait step('verify that the user can add/assign shifts to providers', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await helper.waitForElementToBeVisible(providerOnCall.serviceLine1);\n    await helper.clickElement(providerOnCall.serviceLine1);\n    const createShiftButton = await providerOnCall.createShiftAssignment.isPresent();\n    expect(createShiftButton).to.be.true;\n  }, 'retry until permissions changes takes effect', 3);\n});\nawait step('Login as other admin user', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userAdmin');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('Check that the admin-only user can not access the Provider On Call Calendar Homepage and/or assign shifts', this, async () => {\n  await permissionsHelper.onCallHomepage();\n  try {\n    const unauthorizedPopup = await permission.unauthorized.isPresent();\n    expect(unauthorizedPopup).to.be.true;\n  } catch (err) {\n    await helper.waitForElementToBeVisible(providerOnCall.serviceLine1);\n    await helper.clickElement(providerOnCall.serviceLine1);\n    const createShiftButton = await providerOnCall.createShiftAssignment.isPresent();\n    expect(createShiftButton).to.be.false;\n  }\n});",
              "err": {},
              "uuid": "5c1f42b4-e5f7-4631-b801-b22efa7b3a6b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "5c1f42b4-e5f7-4631-b801-b22efa7b3a6b"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        },
        {
          "uuid": "ee21e693-ca1d-4284-ad6a-25ca2d7cff08",
          "title": "Provider dashboard permissions test",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/sequential-spec.js",
          "file": "/e2e/sites/specs/permissions/sequential-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804234 - Provider dashboard permissions test #permissions",
              "fullTitle": "Provider dashboard permissions test C1804234 - Provider dashboard permissions test #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('setup', this, async () => {\n  const siteParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n});\nawait step('Navigate to System Settings --> Permissions --> Dashboard --> Coordinator Dashboard', this, async () => {\n  await permissionsHelper.permissionCoordinatorDashboard();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  const coordinatorPage = await permission.coordinatorPage.isPresent();\n  expect(coordinatorPage).to.be.true;\n});\nawait step('Delete existing rules if they exist', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionCoordinatorDashboard);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Navigate to System Settings --> Permissions --> Dashboard --> Provider Dashboard', this, async () => {\n  await permissionsHelper.permissionProviderDashboard();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  const providerPage = await permission.providerPage.isPresent();\n  expect(providerPage).to.be.true;\n});\nawait step('Delete existing rules if they exist', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionProviderDashboard);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Add Rule - Role Admin', this, async () => {\n  await permissionsHelper.permissionProviderDashboard();\n  await permissionsHelper.grantAccessTo(permission.admin);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n});\nawait step('Login as another admin user', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userAdmin');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n});\nawait step('Ensure that the other admin user has access to the provider dashboard', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await helper.waitForElementToBeVisible(permission.homePageButton);\n    await helper.clickElement(permission.homePageButton);\n    await helper.waitForElementToBeVisible(dashboard.welcomeMessage);\n    const providerText = await permission.providerText.isPresent();\n    expect(providerText).to.be.true;\n  }, 'retrying for the permissions changes to take effect', 3);\n});\nawait step('Login as a coordinator user', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userCoordinator');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('Check that the provider dashboard does not appear for the coordinator user', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await helper.waitForElementToBeVisible(permission.homePageButton);\n    await helper.clickElement(permission.homePageButton);\n    const providerText = await permission.providerText.isPresent();\n    expect(providerText).to.be.false;\n  }, 'retrying for the permissions changes to take effect', 3);\n});\nawait step('Login as an admin user to extend access to the coordinator group users', this, async () => {\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userAdmin');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('extending access to users of coordinator group', this, async () => {\n  await permissionsHelper.permissionProviderDashboard();\n  await permissionsHelper.addGroup(permission.coordinatorGroup, 1);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionProviderDashboard();\n  return permissionsHelper.toggleOR();\n});\nawait step('Login as a coordinator group user', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userCoordinator');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('Verify that the coordinator group user has access to the provider dashboard', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    // permission changes could take up to 60 seconds to take effect thus this wait is required\n    await browser.sleep(20000);\n    await helper.waitForElementToBeVisible(permission.homePageButton);\n    await helper.clickElement(permission.homePageButton);\n    const providerText = await permission.providerText.isPresent();\n    expect(providerText).to.be.true;\n  }, 'retrying for the permissions changes to take effect', 3);\n});",
              "err": {},
              "uuid": "a89877ce-6887-4eaf-8bca-ca5b2a5bde3b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "a89877ce-6887-4eaf-8bca-ca5b2a5bde3b"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        },
        {
          "uuid": "7f364356-6dd2-42df-bcd6-508cc4f48569",
          "title": "View Provider On Call Calendar homepage permissions",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/sequential-spec.js",
          "file": "/e2e/sites/specs/permissions/sequential-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804236 - View Provider On Call Calendar homepage permissions #permissions",
              "fullTitle": "View Provider On Call Calendar homepage permissions C1804236 - View Provider On Call Calendar homepage permissions #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('setup', this, async () => {\n  const siteParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n});\nawait step('Navigate to System Settings --> Permissions --> On Call --> View On Call Homepage', this, async () => {\n  await permissionsHelper.permissionOnCallHomepage();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  const onCallHomepage = await permission.onCallHomepage.isPresent();\n  expect(onCallHomepage).to.be.true;\n});\nawait step('Delete existing rules for View On Call Homepage, if they exist', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionOnCallHomepage);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Delete existing rules for View On Call and Manage On Call, if they exist', this, async () => {\n  await permissionsHelper.permissionViewOnCall();\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionViewOnCall);\n  await permissionsHelper.permissionManageOnCall();\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionManageOnCall);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Add Rule - Role Admin and Provider', this, async () => {\n  await permissionsHelper.permissionOnCallHomepage();\n  await permissionsHelper.grantAccessTo(permission.admin);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionOnCallHomepage();\n  await permissionsHelper.grantAccessTo(permission.provider, 1);\n  return helper.waitForElementToBeVisible(permission.permissionTab);\n});\nawait step('Login as the user with both admin and provider rights', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userAdminProvider');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('verify that the Provider On Call Calendar link is visible in the calendar tab', this, async () => {\n  await helper.waitForElementToBeVisible(permission.navbarCalendar);\n  await helper.clickElement(permission.navbarCalendar);\n  const providerOnCallButton = await providerOnCall.navbarProviderOnCallBtn.isPresent();\n  expect(providerOnCallButton).to.be.true;\n});\nawait step('verify that the user can view the Provider On Call Calendar homepage', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await permissionsHelper.onCallHomepage();\n    await helper.waitForElementToBeVisible(providerOnCall.timeOptionBtn);\n    const timeOptionBtn = await providerOnCall.timeOptionBtn.isPresent();\n    expect(timeOptionBtn).to.be.true;\n  }, 'retry until permissions for view on call calendar homepage takes effect', 3);\n});\nawait step('Login as other admin user', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userAdmin');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('verify that the user is not authorized to navigate to the Provider On Call Calendar Homepage', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await permissionsHelper.onCallHomepage();\n    const unauthorizedPopup = await permission.unauthorized.isPresent();\n    expect(unauthorizedPopup).to.be.true;\n  }, 'retry until permissions for view on call calendar homepage takes effect', 3);\n});",
              "err": {},
              "uuid": "7e52e354-b125-4664-b56b-218e85826b2b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "7e52e354-b125-4664-b56b-218e85826b2b"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        },
        {
          "uuid": "622f3a6b-e8c0-4697-944f-6fa146aee213",
          "title": "Accessing on call schedules calendar",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/sequential-spec.js",
          "file": "/e2e/sites/specs/permissions/sequential-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1804237 - Accessing on call schedules calendar #permissions",
              "fullTitle": "Accessing on call schedules calendar C1804237 - Accessing on call schedules calendar #permissions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('setup', this, async () => {\n  const siteParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(siteParams);\n  return authHelper.loggedIn();\n});\nawait step('Navigate to System Settings --> Permissions --> On Call --> View On Call', this, async () => {\n  await permissionsHelper.permissionViewOnCall();\n  await helper.waitForElementToBeVisible(permission.addRuleBtn);\n  const onCallPage = await permission.onCallPage.isPresent();\n  expect(onCallPage).to.be.true;\n});\nawait step('Delete existing rules for who can access oncall calendar, if they exist', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionViewOnCall);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Delete existing rules for Manage On Call, if they exist', this, async () => {\n  await permissionsHelper.permissionManageOnCall();\n  await permissionsHelper.deleteExistingPermissions();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionManageOnCall);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.permissions);\n});\nawait step('Add Rule - Role Admin and Provider', this, async () => {\n  await permissionsHelper.permissionViewOnCall();\n  await permissionsHelper.grantAccessTo(permission.admin);\n  await helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionViewOnCall();\n  await permissionsHelper.grantAccessTo(permission.provider, 1);\n  return helper.waitForElementToBeVisible(permission.permissionTab);\n});\nawait step('Login as the user with both admin and provider rights', this, async () => {\n  await helper.waitForElement(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userAdminProvider');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('verify that the user can navigate to the Provider On Call Calendar homepage', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    await permissionsHelper.onCallHomepage();\n    await helper.waitForElementToBeVisible(providerOnCall.timeOptionBtn);\n    const timeOptionBtn = await providerOnCall.timeOptionBtn.isPresent();\n    expect(timeOptionBtn).to.be.true;\n  }, 'retry until permissions for view on call calendar homepage takes effect', 3);\n});\nawait step('verify that the user can view the schedules for different service lines', this, async () => {\n  await helper.doActionsWithRetry(async () => {\n    await browser.sleep(20000);\n    const availableServiceLines = await providerOnCall.availableServiceLines.isPresent();\n    expect(availableServiceLines).to.be.true;\n  }, 'retry until permissions for view on call calendar homepage takes effect', 3);\n});\nawait step('Login as other admin user', this, async () => {\n  await helper.waitForElementToBePresent(header.userProfileDropDown);\n  await authHelper.logout(header);\n  const siteParams = permissionsHelper.setPermissionsEnv('userAdmin');\n  await authHelper.loginSites(siteParams);\n  await authHelper.loggedIn();\n  const navbarPresence = await header.checkNavbar.isPresent();\n  expect(navbarPresence).to.be.true;\n});\nawait step('Check that the admin-only user can not access the Provider On Call Calendar Homepage', this, async () => {\n  await permissionsHelper.onCallHomepage();\n  try {\n    const unauthorizedPopup = await permission.unauthorized.isPresent();\n    expect(unauthorizedPopup).to.be.true;\n  } catch (error) {\n    const availableServiceLines = await providerOnCall.availableServiceLines.isPresent();\n    expect(availableServiceLines).to.be.false;\n  }\n});",
              "err": {},
              "uuid": "62482871-20e4-4031-845c-1b1dbf7c94ee",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "62482871-20e4-4031-845c-1b1dbf7c94ee"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        },
        {
          "uuid": "5e4c0dda-6921-4c85-ae34-905e783ee0c0",
          "title": "Verify permissions for viewing and editing cases",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/permissions/sequential-spec.js",
          "file": "/e2e/sites/specs/permissions/sequential-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C372 & C373 - Verify logged in user (e.g provider) is not able to view and edit case if View and Edit permission is set for another role (e.g admin) #permissions ",
              "fullTitle": "Verify permissions for viewing and editing cases C372 & C373 - Verify logged in user (e.g provider) is not able to view and edit case if View and Edit permission is set for another role (e.g admin) #permissions ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('setup', this, async () => {\n  const envParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(envParams);\n  return authHelper.loggedIn();\n});\nawait step('should assign permission of All Cases page to admin and provider role', this, async () => {\n  await permissionsHelper.permissionAllCases();\n  await permissionsHelper.deleteExistingPermissions();\n  await Helper.waitForUrlToChange(CONSTANTS.ROUTE.permissionAllCases);\n  await permissionsHelper.permissionAllCases();\n  await permissionsHelper.grantAccessTo(permission.admin);\n  await Helper.waitForElementToBeVisible(permission.permissionTab);\n  await permissionsHelper.permissionAllCases();\n  await permissionsHelper.grantAccessTo(permission.provider, 1);\n  return Helper.waitForElementToBeVisible(permission.permissionTab);\n});\nawait step('should switch permission from AND to OR', this, async () => {\n  await permissionsHelper.permissionAllCases();\n  await permissionsHelper.toggleOR();\n  return Helper.waitForElementToBeVisible(permission.permissionTab);\n});\nawait step('should naviagate to System settings --> Permission --> Case Permission --> Service line(cardiology view)', this, async () => {\n  await permissionsHelper.workflowPermission();\n  await Helper.waitAndClick(permission.cardiologyView);\n  return Helper.waitForElementToBeVisible(permission.addRuleBtn);\n});\nawait step('should delete existing rules Service line(cardiology view), if they exist', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await Helper.waitForUrlToHave(CONSTANTS.ROUTE.workflowPermission);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.workflowPermission);\n});\nawait step('should add rule - Role Admin in Service line(cardiology view)', this, async () => {\n  await Helper.waitAndClick(permission.cardiologyView);\n  await permissionsHelper.grantAccessTo(permission.admin);\n  return Helper.waitForElementToBeVisible(permission.usersPermission);\n});\nawait step('should naviagate to System settings --> Permission --> Case Permission --> Service line(cardiology edit)', this, async () => {\n  await Helper.waitAndClick(permission.cardiologyEdit);\n  return Helper.waitForElementToBeVisible(permission.addRuleBtn);\n});\nawait step('should delete existing rules Service line(cardiology edit), if they exist', this, async () => {\n  await permissionsHelper.deleteExistingPermissions();\n  await Helper.waitForUrlToHave(CONSTANTS.ROUTE.workflowPermission);\n  const currentUrl = await browser.getCurrentUrl();\n  expect(currentUrl).to.include(CONSTANTS.ROUTE.workflowPermission);\n});\nawait step('should add Rule - Role Admin in Service line(cardiology edit)', this, async () => {\n  await Helper.waitAndClick(permission.cardiologyEdit);\n  await permissionsHelper.grantAccessTo(permission.admin);\n  return Helper.waitForElementToBeVisible(permission.usersPermission);\n});\nawait step('should create case with Cardiology service line', this, async () => {\n  await caseHelper.createCase(createCase.clinicalCardiology, createCase.facility);\n  await Helper.waitForElement(caseDetail.videoMessagePane);\n  caseUrl = await browser.getCurrentUrl();\n});\nawait step('should assign case to provider', this, async () => {\n  await Helper.waitAndClick(caseDetail.assignToOther);\n  await Helper.waitAndClick(collaboration.searchInput);\n  await helperInstance.replaceInputAndSaveValue(collaboration.searchInput, '', config.sitePermission.providerLogin.providerName);\n  await Helper.waitForElementToBeVisible(collaboration.allUsersDataFirstItemName(config.sitePermission.providerLogin.providerName));\n  await Helper.clickVisibleElement(collaboration.allUsersDataFirstItem);\n  await Helper.clickElement(collaboration.selectButton);\n  await Helper.waitForElement(caseDetail.videoMessagePane);\n  return authHelper.logout(header);\n});\nawait step('should login with provider', this, async () => {\n  const envParams = permissionsHelper.setPermissionsEnv('userProvider');\n  await authHelper.loginSites(envParams);\n  return authHelper.loggedIn();\n}); // C372 - Verify logged in user (e.g provider)\n// is not able to view case if View permissions is set for another role (e.g admin)\nawait step('should verify provider user does not have permission to view case', this, async () => {\n  await browser.get(caseUrl);\n  await Helper.waitForElementToBeVisible(permission.accessDeniedContent);\n  const accessDeniedContent = await permission.accessDeniedContent.getText();\n  expect(accessDeniedContent).to.include(CONSTANTS.ERROR_MESSAGE.accessDeniedContent);\n  return Helper.waitAndClick(permission.accessDeniedButtonOk);\n}); // C373 - Verify logged in user (e.g provider)\n// is not able to create case if edit permissions is set for another role (e.g admin)\nawait step('should navigate to add case page', this, async () => {\n  await createCaseHelper.addCasePage();\n  await Helper.waitForElementToBeVisible(createCase.addEditCaseHeading);\n  expect(await createCase.clinicalCardiology).to.not.be.present;\n  return authHelper.logout(header);\n});\nawait step('teardown', this, async () => {\n  const envParams = permissionsHelper.setPermissionsEnv();\n  await authHelper.loginSites(envParams);\n  await authHelper.loggedIn();\n  await browser.get(caseUrl);\n  await Helper.waitAndClick(caseDetail.caseOption);\n  await Helper.clickVisibleElement(caseDetail.caseCancel);\n  await Helper.waitAndClick(caseDetail.caseModalDropdown);\n  await Helper.waitForElementToBeClickable(caseDetail.caseModalDropdownOptionsOther);\n  await caseDetail.caseModalDropdownOptionsOther.click();\n  await Helper.waitAndClick(caseDetail.caseCancelButton);\n  return Helper.waitForElementToBeVisible(caseDetail.bottomToast);\n});",
              "err": {},
              "uuid": "d67144bc-6047-4c4c-9f5a-40e5c9b1d298",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "d67144bc-6047-4c4c-9f5a-40e5c9b1d298"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "27f06a7a-a1e1-495d-8489-e90e3cd6f0e8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "336086e9-9e65-4ad8-9277-3b1d1571febb",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "3924859a-afe7-4241-b2c3-667972686fce",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "63f7b297-a79d-4875-856a-d951940c92f1",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "11bbe29f-5d45-4fa8-ba04-27c86cce5491",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "5016ea98-008b-4bd4-9ace-b50991683137",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "d9a51e37-08f0-4214-a93b-648bb55e920a",
          "title": "Verify terms and conditions page is appearing for new created users and user is redirected to profile page",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/settings/terms-and-cond-spec.js",
          "file": "/e2e/sites/specs/settings/terms-and-cond-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C780039 - Verify terms and conditions page is appearing for new created users and user is redirected to profile page #smoke #sanity",
              "fullTitle": "Verify terms and conditions page is appearing for new created users and user is redirected to profile page C780039 - Verify terms and conditions page is appearing for new created users and user is redirected to profile page #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('Should login on sites', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('Invite new user', this, async () => {\n  await settingsHelper.inviteUserSettings(settings, helperInstance);\n  await settingsHelper.submitSettings(settings);\n  const savedValues = helperInstance.getSavedValues();\n  const savedEmail = savedValues.find(obj => obj.id === 'email').value;\n  await settingsHelper.joinSite(settings, helperInstance, {\n    user: savedEmail,\n    acceptTermsCond: false\n  });\n  return Helper.waitForUrlToChange(CONSTANTS.ROUTE.profile);\n});\nawait step('Assert Terms and Conditions page is appearing for new users', this, async () => {\n  await Helper.waitForUrlToHave(CONSTANTS.ROUTE.termsAndCond); // Check here that new user lands on Terms and Condition page\n  await Helper.waitAndClick(settings.acceptBtn);\n  await Helper.waitForElementToBeVisible(profileGeneral.profileAndAccount);\n  const profile = await profileGeneral.profileAndAccount.getText();\n  expect(profile).to.be.include(CONSTANTS.PROFILE_AND_ACCOUNT);\n});",
              "err": {},
              "uuid": "d867b24e-4e36-468d-b343-de2e789816bf",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "d867b24e-4e36-468d-b343-de2e789816bf"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "d0825e79-3075-48f7-a608-0817f42e2b4b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 119,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "d3807c2f-d4af-42cb-bea4-2b16b0f177e5",
          "parentUUID": "d0825e79-3075-48f7-a608-0817f42e2b4b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "a1fd5287-7d28-4e58-b29b-0aeb023e82c8",
          "parentUUID": "d0825e79-3075-48f7-a608-0817f42e2b4b",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "33640467-5e1f-4962-9be5-f97782228b24",
          "parentUUID": "d0825e79-3075-48f7-a608-0817f42e2b4b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "838a59a5-e059-44f7-aa3d-7c5655b6fb45",
          "parentUUID": "d0825e79-3075-48f7-a608-0817f42e2b4b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "45886f38-663f-42db-8a0b-4781050cd891",
          "parentUUID": "d0825e79-3075-48f7-a608-0817f42e2b4b",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "550acc3b-dd8d-48ea-b23b-a7ba70abb6b9",
          "title": "Site code page",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/site/site-code-spec.js",
          "file": "/e2e/sites/specs/site/site-code-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C1836365 - Empty site code should cause error message #sanity #smoke #stable",
              "fullTitle": "Site code page C1836365 - Empty site code should cause error message #sanity #smoke #stable",
              "timedOut": false,
              "duration": 2201,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.sites();\nawait helper.waitForElementToBeVisible(site.code);\nawait helper.replaceInputValue(site.code, '', '');\nawait helper.clickElement(site.submitButton);\nconst errorMessage = await site.codeErrorMsg.getText();\nexpect(errorMessage).to.include(CONSTANTS.AUTH.enterCode);\nexpect(errorMessage).to.not.include('{');\nexpect(errorMessage).to.not.include('[');",
              "err": {},
              "uuid": "8366f229-1649-49bd-8088-fa4d84c0026b",
              "parentUUID": "550acc3b-dd8d-48ea-b23b-a7ba70abb6b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C1836366 - Invalid site code should cause error message #sanity #stable #smoke",
              "fullTitle": "Site code page C1836366 - Invalid site code should cause error message #sanity #stable #smoke",
              "timedOut": false,
              "duration": 1376,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.sites();\nawait helper.waitForElementToBeVisible(site.code);\nawait helper.replaceInputValue(site.code, '', 'veryinvalidsitecode');\nawait helper.clickElement(site.submitButton);\nconst errorMessage = await site.codeErrorMsg.getText();\nexpect(errorMessage).to.include(CONSTANTS.AUTH.unknownCode);\nexpect(errorMessage).to.not.include('{');\nexpect(errorMessage).to.not.include('[');",
              "err": {},
              "uuid": "c3a9f2b2-7071-4e66-965e-a3f13c98e2f2",
              "parentUUID": "550acc3b-dd8d-48ea-b23b-a7ba70abb6b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C1836367 - Valid site code should lead to login page #stable #sanity #smoke",
              "fullTitle": "Site code page C1836367 - Valid site code should lead to login page #stable #sanity #smoke",
              "timedOut": false,
              "duration": 2567,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await authHelper.sites();\nawait authHelper.setCodeAndSubmit();\nconst currentUrl = await browser.getCurrentUrl();\nexpect(currentUrl).to.include('login');\nawait helper.waitForElement(login.loginBtn);",
              "err": {},
              "uuid": "8ad95e9d-e986-4d48-b9ef-e22680d306fa",
              "parentUUID": "550acc3b-dd8d-48ea-b23b-a7ba70abb6b9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8366f229-1649-49bd-8088-fa4d84c0026b",
            "c3a9f2b2-7071-4e66-965e-a3f13c98e2f2",
            "8ad95e9d-e986-4d48-b9ef-e22680d306fa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6144,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "0a90828e-b525-4899-83b6-cff845d0f939",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 119,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "6c10fc77-79a3-4be3-a8a2-2b37ac891f69",
          "parentUUID": "0a90828e-b525-4899-83b6-cff845d0f939",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "f4141ee3-248c-4b9d-8a70-7ac6b66e0fac",
          "parentUUID": "0a90828e-b525-4899-83b6-cff845d0f939",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "6be43df7-879c-4b66-9308-bc6c20e547a3",
          "parentUUID": "0a90828e-b525-4899-83b6-cff845d0f939",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "72b0974c-0698-4440-920c-d3b4987dc404",
          "parentUUID": "0a90828e-b525-4899-83b6-cff845d0f939",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "3d2c0918-7302-4e71-98d4-09458813f7a8",
          "parentUUID": "0a90828e-b525-4899-83b6-cff845d0f939",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "2a25b47a-3867-4494-8a34-9e5aaf4f3b98",
          "title": "Verify proper error message is appearing when sending invite via settings to provider user which already exists in system",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/settings/invite-existing-user-spec.js",
          "file": "/e2e/sites/specs/settings/invite-existing-user-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C15997 - Verify proper error message is appearing when sending invite via settings to provider user which already exists in system #stable #smoke",
              "fullTitle": "Verify proper error message is appearing when sending invite via settings to provider user which already exists in system C15997 - Verify proper error message is appearing when sending invite via settings to provider user which already exists in system #stable #smoke",
              "timedOut": false,
              "duration": 62614,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓Should login on sites\",\n  \"✓Invite User\",\n  \"✓Save invite email\",\n  \"✓Join site and land on Profile & Account page\",\n  \"✓Send invite again to using previous email\",\n  \"✓Error message should appear displaying user already exists message\"\n]",
              "code": "await step('Should login on sites', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('Invite User', this, async () => {\n  await settingsHelper.inviteUserSettings(settings, helperInstance);\n  return settingsHelper.submitSettings(settings);\n});\nawait step('Save invite email', this, () => {\n  savedEmail = helperInstance.getSavedValues().find(val => val.id === CONSTANTS.EMAIL).value;\n});\nawait step('Join site and land on Profile & Account page', this, async () => {\n  await settingsHelper.joinSite(settings, helperInstance, {\n    user: savedEmail\n  });\n  await Helper.waitForElementToBeVisible(profileGeneral.profileAndAccount);\n  expect(await profileGeneral.profileAndAccount.getText()).to.include(CONSTANTS.PROFILE_AND_ACCOUNT);\n});\nawait step('Send invite again to using previous email', this, async () => {\n  await settingsHelper.inviteUserSettings(settings, helperInstance, {\n    email: savedEmail\n  });\n  return settingsHelper.submitSettings(settings);\n});\nawait step('Error message should appear displaying user already exists message', this, async () => {\n  await Helper.waitForElementToBeVisible(signUp.userExistsErrorMsg);\n  expect(await signUp.userExistsErrorMsg.getText()).to.contain(CONSTANTS.ERROR_MESSAGE.userAlreadyExists);\n});",
              "err": {},
              "uuid": "c01b39b1-0334-4ef6-9082-c0b3a98cef66",
              "parentUUID": "2a25b47a-3867-4494-8a34-9e5aaf4f3b98",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c01b39b1-0334-4ef6-9082-c0b3a98cef66"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 62614,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "3e514099-d695-494f-9425-b2dac8ece139",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 119,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "f6df4685-99e3-4fec-9e9f-3864bdf6a5f7",
          "parentUUID": "3e514099-d695-494f-9425-b2dac8ece139",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "2c0c0e1a-6b34-418a-a4e3-73f99de14124",
          "parentUUID": "3e514099-d695-494f-9425-b2dac8ece139",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "dbc8a750-6871-4dde-9e5a-cdd39b17bf85",
          "parentUUID": "3e514099-d695-494f-9425-b2dac8ece139",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "6a5b7c27-0062-4575-947f-eb2cbb30aa43",
          "parentUUID": "3e514099-d695-494f-9425-b2dac8ece139",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "5456c3f9-9691-4e90-994c-44d00caaa2ea",
          "parentUUID": "3e514099-d695-494f-9425-b2dac8ece139",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "0ac306da-7338-4d00-aeef-ab293ebac0e0",
          "title": "Verify provider user invitation from sites",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/settings/provider-user-invitation-spec.js",
          "file": "/e2e/sites/specs/settings/provider-user-invitation-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C337 - Verify provider user invitation from sites #smoke #stable",
              "fullTitle": "Verify provider user invitation from sites C337 - Verify provider user invitation from sites #smoke #stable",
              "timedOut": false,
              "duration": 59132,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓Should login on sites\",\n  \"✓Invite User\",\n  \"✓Save invited user`s email\",\n  \"✓Join site and land on Profile & Account page\"\n]",
              "code": "await step('Should login on sites', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('Invite User', this, async () => {\n  await settingsHelper.inviteUserSettings(settings, helperInstance);\n  return settingsHelper.submitSettings(settings);\n});\nawait step('Save invited user`s email', this, () => {\n  savedEmail = helperInstance.getSavedValues().find(val => val.id === CONSTANTS.EMAIL).value;\n});\nawait step('Join site and land on Profile & Account page', this, async () => {\n  await settingsHelper.joinSite(settings, helperInstance, {\n    user: savedEmail\n  });\n  await Helper.waitForElementToBeVisible(profileGeneral.profileAndAccount);\n  expect(await profileGeneral.profileAndAccount.getText()).to.include(CONSTANTS.PROFILE_AND_ACCOUNT);\n});",
              "err": {},
              "uuid": "9fca95db-80d1-40d2-97d3-74e99ff9c888",
              "parentUUID": "0ac306da-7338-4d00-aeef-ab293ebac0e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9fca95db-80d1-40d2-97d3-74e99ff9c888"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 59132,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    },
    {
      "uuid": "001ef714-7d74-4c8a-b074-ab4f8a4b71e1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 119,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) {\n  this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\n  this.CBTApiUrl = `${CONSTANTS.CBT.base_url}${CONSTANTS.CBT.api_endpoint}/${this.sessionID}`;\n}\nthis.hasFailures = false;\nawait browser.manage().timeouts().implicitlyWait(3000);\nawait browser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "962e498e-54fb-41ff-8f02-3f64ab490cb0",
          "parentUUID": "001ef714-7d74-4c8a-b074-ab4f8a4b71e1",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook: ret",
          "fullTitle": "\"before each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting) {\n  const videoInfo = await fetch(`${this.CBTApiUrl}/videos`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n  const jsonVideoInfo = await videoInfo.json();\n  this.currentVideo = jsonVideoInfo.hash;\n  console.log(jsonVideoInfo.show_result_web_url);\n  console.log(jsonVideoInfo.show_result_public_url);\n  addContext(this, jsonVideoInfo.show_result_web_url);\n  addContext(this, jsonVideoInfo.show_result_public_url);\n}",
          "err": {},
          "uuid": "9d9dc2e4-3f69-4e8e-b31d-f0733c0f4f02",
          "parentUUID": "001ef714-7d74-4c8a-b074-ab4f8a4b71e1",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  const score = this.hasFailures ? 'fail' : 'pass';\n  await fetch(`${this.CBTApiUrl}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "e7046fd0-4d6c-4f40-831b-6ff33536cc14",
          "parentUUID": "001ef714-7d74-4c8a-b074-ab4f8a4b71e1",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (isCrossBrowserTesting && this.sessionID) {\n  if (this.currentTest.isFailed() === true) {\n    this.hasFailures = true;\n    if (isCrossBrowserTesting) {\n      await fetch(`${this.CBTApiUrl}/snapshots`, {\n        method: 'POST',\n        headers: {\n          authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n        }\n      });\n    }\n  }\n  await fetch(`${this.CBTApiUrl}/videos/${this.currentVideo}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    }\n  });\n} // if failed, add screenshot data to mochawesome regardless of CBT\n\nif (this.currentTest.isFailed() === true) {\n  const curTime = Date.now();\n  addContext(this, `screenshots/screenshot-${curTime}.png`);\n  const screenshot = await browser.takeScreenshot();\n  fs.writeFile(`e2e/reports/merged/screenshots/screenshot-${curTime}.png`, Buffer.from(screenshot, 'base64'));\n}",
          "err": {},
          "uuid": "d78cab82-ce6f-42b6-9b9e-e2d97ae0fc60",
          "parentUUID": "001ef714-7d74-4c8a-b074-ab4f8a4b71e1",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "c693e5d7-194c-4d94-a61b-fca8c447ef70",
          "parentUUID": "001ef714-7d74-4c8a-b074-ab4f8a4b71e1",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "ac5c3b6d-ed65-49ff-b6d5-231c38060d6a",
          "title": "Verify login using newly created user",
          "fullFile": "/home/circleci/avizia/one/e2e/sites/specs/settings/login-using-new-user-spec.js",
          "file": "/e2e/sites/specs/settings/login-using-new-user-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C339 - Verify login using newly created user #smoke #sanity #stable",
              "fullTitle": "Verify login using newly created user C339 - Verify login using newly created user #smoke #sanity #stable",
              "timedOut": false,
              "duration": 66695,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"✓Should login on sites\",\n  \"✓Invite User\",\n  \"✓Save email and split email to get username\",\n  \"✓Join site and land on Profile & Account page\",\n  \"✓Logout and login through new user`s credentials\"\n]",
              "code": "await step('Should login on sites', this, async () => {\n  await authHelper.loginSites();\n  return authHelper.loggedIn();\n});\nawait step('Invite User', this, async () => {\n  await settingsHelper.inviteUserSettings(settings, helperInstance);\n  return settingsHelper.submitSettings(settings);\n});\nawait step('Save email and split email to get username', this, () => {\n  savedEmail = helperInstance.getSavedValues().find(val => val.id === CONSTANTS.EMAIL).value;\n  username = savedEmail.substring(0, savedEmail.indexOf('@'));\n});\nawait step('Join site and land on Profile & Account page', this, async () => {\n  await settingsHelper.joinSite(settings, helperInstance, {\n    user: savedEmail\n  });\n  savedPassword = helperInstance.getSavedValues().find(val => val.id === CONSTANTS.PASSWORD).value;\n  await Helper.waitForElementToBeVisible(profileGeneral.profileAndAccount);\n  expect(await profileGeneral.profileAndAccount.getText()).to.include(CONSTANTS.PROFILE_AND_ACCOUNT);\n});\nawait step('Logout and login through new user`s credentials', this, async () => {\n  await authHelper.logout(header);\n  await authHelper.loginSites({\n    user: savedEmail,\n    password: savedPassword\n  });\n  await Helper.waitForElementToBeVisible(dashboard.welcomeMessage);\n  expect(await dashboard.welcomeMessage.getText()).to.include(username);\n});",
              "err": {},
              "uuid": "f5791be2-02ea-4885-b4ac-7beaa0903cfb",
              "parentUUID": "ac5c3b6d-ed65-49ff-b6d5-231c38060d6a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f5791be2-02ea-4885-b4ac-7beaa0903cfb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 66695,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1200000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "e2e/reports/json",
        "reportFilename": "mochawesome",
        "showHooks": "always",
        "timestamp": null,
        "overwrite": false,
        "saveJson": true,
        "saveHtml": true
      },
      "version": "4.1.0"
    }
  }
}
