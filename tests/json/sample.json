{
  "stats": {
    "suites": 3,
    "tests": 13,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2020-08-03T00:42:01.829Z",
    "end": "2020-08-03T00:42:01.829Z",
    "duration": 31813,
    "testsRegistered": 13,
    "passPercent": 38.46153846153846,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 8,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "5d6fa6f8-1f18-4c32-8420-5c9afa610ffe",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\nconsole.log(this.sessionID);\nthis.hasFailures = false; // browser.manage().deleteAllCookies();\nbrowser.manage().timeouts().implicitlyWait(3000);\nbrowser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "a91035a9-506b-4be5-9960-bf9fe006daf8",
          "parentUUID": "5d6fa6f8-1f18-4c32-8420-5c9afa610ffe",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 506,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const score = this.hasFailures ? 'fail' : 'pass';\nif (this.sessionID) {\n  await fetch(`https://crossbrowsertesting.com/api/v3/selenium/${this.sessionID}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "e2eabfb1-ca87-4849-b298-5cc71deabc3a",
          "parentUUID": "5d6fa6f8-1f18-4c32-8420-5c9afa610ffe",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (this.currentTest.isFailed() === true) {\n  this.hasFailures = true;\n  if (this.sessionID) {\n    await fetch(`https://crossbrowsertesting.com/api/v3/selenium/${this.sessionID}/snapshots`, {\n      method: 'POST',\n      headers: {\n        authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n      }\n    });\n  }\n}",
          "err": {},
          "uuid": "f457412b-1e35-4ecd-bd7d-d6da1ba6b6d0",
          "parentUUID": "5d6fa6f8-1f18-4c32-8420-5c9afa610ffe",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "a9725913-9066-471c-9d6d-17752b7572b4",
          "parentUUID": "5d6fa6f8-1f18-4c32-8420-5c9afa610ffe",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "b2bd2139-52ba-441c-b834-948b10cbafe0",
          "title": "Login page",
          "fullFile": "/Users/daniel.yang/Documents/Projects/one/e2e/sites/specs/auth/login-spec.js",
          "file": "/e2e/sites/specs/auth/login-spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: ret",
              "fullTitle": "Login page \"before all\" hook: ret",
              "timedOut": false,
              "duration": 572,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const api = new ApiHelper(enterpriseCode);\nconst userLoginIsReset = await api.resetLoginAttempts(config.site.login.user);\nexpect(userLoginIsReset).is.true;",
              "err": {},
              "uuid": "21959432-00e3-4b08-900f-da46c4154f41",
              "parentUUID": "b2bd2139-52ba-441c-b834-948b10cbafe0",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: ret",
              "fullTitle": "Login page \"before each\" hook: ret",
              "timedOut": false,
              "duration": 1555,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// will be fixed after refactoring - BW-21083\nhelper.clearSavedValues();\nawait authHelper.sites();",
              "err": {},
              "uuid": "4b2ae49c-416b-4a53-bc66-b17d506a8257",
              "parentUUID": "b2bd2139-52ba-441c-b834-948b10cbafe0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C338 - Verify login using existing user #smoke #sanity #stable",
              "fullTitle": "Login page C338 - Verify login using existing user #smoke #sanity #stable",
              "timedOut": false,
              "duration": 6701,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"      <samp><span style=\\\"color:#0d9c0b\\\">âœ“</span></samp> login using an existing user\"",
              "code": "await step('login using an existing user', this, async () => {\n  await authHelper.loginSites();\n  await authHelper.loggedIn();\n  await authHelper.logout(header);\n});",
              "err": {},
              "uuid": "b649a931-875d-45b2-8e1d-00329491f436",
              "parentUUID": "b2bd2139-52ba-441c-b834-948b10cbafe0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C11695 - Verify details on the login page #regression #stable",
              "fullTitle": "Login page C11695 - Verify details on the login page #regression #stable",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('navigate to login page', this, async () => {\n  await authHelper.setCodeAndSubmit();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.site);\n  await helper.waitForElementToBeVisible(login.loginBtn);\n  const chooseLogin = await browser.getCurrentUrl();\n  if (chooseLogin.includes(CONSTANTS.ROUTE.chooseLogin)) {\n    await helper.clickElement(login.loginBtn);\n  }\n  await helper.waitForElementToBeVisible(login.password);\n  expect((await browser.getTitle())).to.include(CONSTANTS.DASHBOARD.login);\n});",
              "err": {},
              "uuid": "bea9e420-daa3-4064-95de-4bfbdd2fb4b5",
              "parentUUID": "b2bd2139-52ba-441c-b834-948b10cbafe0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "C11697 - should throw an error when an empty email is entered #regression #stable",
              "fullTitle": "Login page C11697 - should throw an error when an empty email is entered #regression #stable",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('attempt login with an empty email', this, async () => {\n  await authHelper.loginSites({\n    user: ''\n  });\n  await helper.waitForElementToBeVisible(login.emailBlankErrorMsg);\n  expect((await login.emailBlankErrorMsg.getText())).that.does.include(CONSTANTS.ERROR_MESSAGE.emailBlank);\n});",
              "err": {},
              "uuid": "4ece44ef-a44a-45e2-9e95-846085c00386",
              "parentUUID": "b2bd2139-52ba-441c-b834-948b10cbafe0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "C11698 - leaving password field empty and clicking login button shows proper validation #regression #stable",
              "fullTitle": "Login page C11698 - leaving password field empty and clicking login button shows proper validation #regression #stable",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('login with an empty password', this, async () => {\n  await authHelper.loginSites({\n    password: ''\n  });\n  await helper.waitForElementToBePresent(login.passwordBlankErrorMsg);\n  expect((await login.passwordBlankErrorMsg.getText())).that.does.include(CONSTANTS.ERROR_MESSAGE.passwordBlank);\n});",
              "err": {},
              "uuid": "02ab8ff1-61a2-4a56-806f-42d8eb2a2ecb",
              "parentUUID": "b2bd2139-52ba-441c-b834-948b10cbafe0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should throw an error when an invalidly formatted email is entered #sanity #stable",
              "fullTitle": "Login page should throw an error when an invalidly formatted email is entered #sanity #stable",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('login with email in invalid format', this, async () => {\n  await authHelper.loginSites({\n    user: 'someinvalidemail'\n  });\n  await helper.waitForElementToBeVisible(login.emailBlankErrorMsg);\n  expect((await login.emailBlankErrorMsg.getText())).that.does.include(CONSTANTS.ERROR_MESSAGE.emailBlank);\n});",
              "err": {},
              "uuid": "f0bb0864-9e10-423b-a4ea-f80ecbc3be53",
              "parentUUID": "b2bd2139-52ba-441c-b834-948b10cbafe0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "C342 - Verify login with invalid credentials shows error message #smoke #sanity #stable",
              "fullTitle": "Login page C342 - Verify login with invalid credentials shows error message #smoke #sanity #stable",
              "timedOut": false,
              "duration": 9809,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"      <samp><span style=\\\"color:#0d9c0b\\\">âœ“</span></samp> attempt login using an invalid user\",\n  \"      <samp><span style=\\\"color:#0d9c0b\\\">âœ“</span></samp> login with an incorrect password\"\n]",
              "code": "await step('attempt login using an invalid user', this, async () => {\n  await authHelper.loginSites({\n    user: 'invalidemailthatdoesntexist@invalidemail.com'\n  });\n  await helper.waitForElementToBeVisible(login.invalidEmailErrorMsg);\n  expect((await login.invalidEmailErrorMsg.getText())).that.does.include(CONSTANTS.ERROR_MESSAGE.incorrectEmailPass);\n});\nawait step('login with an incorrect password', this, async () => {\n  await authHelper.loginSites({\n    user: config.site.login.user,\n    password: config.site.login.invalidPassword\n  });\n  await helper.waitForElementToBeVisible(login.invalidEmailErrorMsg);\n  expect((await login.invalidEmailErrorMsg.getText())).that.does.include(CONSTANTS.ERROR_MESSAGE.incorrectEmailPass);\n});",
              "err": {},
              "uuid": "1bc5953f-8d0a-40dc-93b4-a3decc330f9f",
              "parentUUID": "b2bd2139-52ba-441c-b834-948b10cbafe0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify login with the user save checkbox checked(default) #smoke #stable",
              "fullTitle": "Login page Verify login with the user save checkbox checked(default) #smoke #stable",
              "timedOut": false,
              "duration": 10533,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  \"      <samp><span style=\\\"color:#0d9c0b\\\">âœ“</span></samp> login with the user save checkbox checked(default)\",\n  \"      <samp><span style=\\\"color:#0d9c0b\\\">âœ“</span></samp> login again to view saved user\",\n  \"      <samp><span style=\\\"color:#0d9c0b\\\">âœ“</span></samp> change user\"\n]",
              "code": "await step('login with the user save checkbox checked(default)', this, async () => {\n  await authHelper.loginSites();\n  await authHelper.loggedIn();\n  await helper.waitForElementToBePresent(login.siteHeader);\n  await authHelper.logout(header);\n});\nawait step('login again to view saved user', this, async () => {\n  await authHelper.setCodeAndSubmit();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.site);\n  const chooseLoginUrl = await browser.getCurrentUrl();\n  if (chooseLoginUrl.includes(CONSTANTS.ROUTE.chooseLogin)) {\n    return helper.clickElement(login.loginBtn);\n  }\n  return helper.waitForElementToBeClickable(login.changeUserLinkInLogin);\n});\nawait step('change user', this, async () => {\n  await helper.clickElement(login.changeUserLinkInLogin);\n  return helper.waitForElementToBeVisible(login.email);\n});",
              "err": {},
              "uuid": "f4a53ddb-beea-4b84-b66c-3eafff10c0cc",
              "parentUUID": "b2bd2139-52ba-441c-b834-948b10cbafe0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify login with the user save checkbox unchecked",
              "fullTitle": "Login page Verify login with the user save checkbox unchecked",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('login with the user save checkbox unchecked', this, async () => {\n  await authHelper.setCodeAndSubmit();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.site);\n  await helper.waitAndClick(login.loginBtn);\n  await helper.waitAndClick(login.saveCheckBox);\n  const isChecked = await login.rememberMe.getAttribute('is-checked');\n  expect(isChecked).to.equal('false');\n  await authHelper.enterLogin();\n  await authHelper.enterPassword();\n  await helper.clickElement(login.loginBtn);\n  await authHelper.loggedIn();\n  await helper.waitForElementToBePresent(login.siteHeader);\n  expect(login.siteHeader).to.be.displayed;\n});\nawait step('login again to view user is not saved', this, async () => {\n  await authHelper.logout(header);\n  await helper.waitForElementToBeVisible(login.loginBtn);\n  await authHelper.setCodeAndSubmit();\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.site);\n  await helper.waitAndClick(login.loginBtn);\n  return helper.waitForElementToBeVisible(login.email);\n});",
              "err": {},
              "uuid": "b2314176-96e9-4544-9635-453f829aa6d1",
              "parentUUID": "b2bd2139-52ba-441c-b834-948b10cbafe0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "C344 - Verify login via SSO #smoke #sanity",
              "fullTitle": "Login page C344 - Verify login via SSO #smoke #sanity",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('login with SSO', this, async () => {\n  await authHelper.setCodeAndSubmit();\n  await helper.clickElement(login.ssoBtn);\n  await browser.waitForAngularEnabled(false);\n  await helper.waitForElementToBeVisible(login.userNameInputSSO);\n  await helper.replaceInputValue(login.userNameInputSSO, '', config.site.login.userSSO);\n  await helper.replaceInputValue(login.passwordInputSSO, '', config.site.login.passwordSSO);\n  await helper.clickElement(login.submitBtnSSO);\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.ssoURL);\n  expect((await browser.getCurrentUrl())).to.include.any.string(CONSTANTS.ROUTE.dashboard, CONSTANTS.ROUTE.profile);\n});",
              "err": {},
              "uuid": "764f2fe9-3d02-4235-8f80-cda15ec15a69",
              "parentUUID": "b2bd2139-52ba-441c-b834-948b10cbafe0",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [
            "b649a931-875d-45b2-8e1d-00329491f436",
            "1bc5953f-8d0a-40dc-93b4-a3decc330f9f",
            "f4a53ddb-beea-4b84-b66c-3eafff10c0cc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [
            "bea9e420-daa3-4064-95de-4bfbdd2fb4b5",
            "4ece44ef-a44a-45e2-9e95-846085c00386",
            "02ab8ff1-61a2-4a56-806f-42d8eb2a2ecb",
            "f0bb0864-9e10-423b-a4ea-f80ecbc3be53",
            "b2314176-96e9-4544-9635-453f829aa6d1",
            "764f2fe9-3d02-4235-8f80-cda15ec15a69"
          ],
          "duration": 27043,
          "root": false,
          "rootEmpty": false,
          "_timeout": 600000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 600000
    },
    {
      "uuid": "903ebe0b-3917-424f-9ae6-f4a2a62ea9b9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\nconsole.log(this.sessionID);\nthis.hasFailures = false; // browser.manage().deleteAllCookies();\nbrowser.manage().timeouts().implicitlyWait(3000);\nbrowser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "9f3e4017-05ed-46e4-aac5-642fa2c58046",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const score = this.hasFailures ? 'fail' : 'pass';\nif (this.sessionID) {\n  await fetch(`https://crossbrowsertesting.com/api/v3/selenium/${this.sessionID}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "4b3ed8ed-2d89-4bdc-bf30-ae47a431cf8e",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (this.currentTest.isFailed() === true) {\n  this.hasFailures = true;\n  if (this.sessionID) {\n    await fetch(`https://crossbrowsertesting.com/api/v3/selenium/${this.sessionID}/snapshots`, {\n      method: 'POST',\n      headers: {\n        authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n      }\n    });\n  }\n}",
          "err": {},
          "uuid": "eaa593c7-4204-49e9-b74d-c146d8b03731",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "fef31593-2950-4593-9e2c-397ff2a489ba",
          "parentUUID": null,
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "187ca58a-8a93-4d28-b768-2d860ca94ed9",
          "title": "Logout",
          "fullFile": "/Users/daniel.yang/Documents/Projects/one/e2e/sites/specs/auth/logout-spec.js",
          "file": "/e2e/sites/specs/auth/logout-spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C343 - Verify logout multiple times #sanity #smoke",
              "fullTitle": "Logout C343 - Verify logout multiple times #sanity #smoke",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('login', this, async () => {\n  // will be fixed after refactoring - BW-21083\n  helper.clearSavedValues();\n  await authHelper.loginSites();\n  await authHelper.loggedIn();\n});\nawait step('logout multiple times', this, async () => {\n  await authHelper.logout(header);\n  await authHelper.loginSites();\n  await authHelper.loggedIn();\n  await authHelper.logout(header);\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.dashboard);\n  await authHelper.validateLogoutUrl(login, site);\n});",
              "err": {},
              "uuid": "58db6ef1-ee77-456f-b437-a78355271d28",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "browser back button does not bypass auth #sanity #stable",
              "fullTitle": "Logout browser back button does not bypass auth #sanity #stable",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await step('login', this, async () => {\n  await authHelper.loginSites();\n  await authHelper.loggedIn();\n});\nawait step('logout', this, async () => {\n  await authHelper.logout(header);\n  await helper.waitForUrlToChange(CONSTANTS.ROUTE.dashboard);\n  await authHelper.validateLogoutUrl(login, site);\n});\nawait step('hitting the browser back button should not allow the user to log back in', this, async () => {\n  await browser.waitForAngularEnabled(false);\n  const currentUrl = await browser.getCurrentUrl();\n  await browser.navigate().back();\n  await browser.wait(async () => {\n    const simpleLogin = await browser.getCurrentUrl();\n    return simpleLogin.includes(currentUrl) || simpleLogin.includes(CONSTANTS.ROUTE.simpleLogin);\n  }, CONSTANTS.MAX_TIME_FOR_BROWSER_WAIT);\n});",
              "err": {},
              "uuid": "60529240-b1d7-43ca-a81e-93675aba60d0",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "58db6ef1-ee77-456f-b437-a78355271d28",
            "60529240-b1d7-43ca-a81e-93675aba60d0"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 600000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 600000
    },
    {
      "uuid": "7dd53156-e56d-4ca1-a47d-601c124a6177",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: ret",
          "fullTitle": "\"before all\" hook: ret",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const session = await browser.getSession();\nif (session) this.sessionID = session.id_; // eslint-disable-line no-underscore-dangle\nconsole.log(this.sessionID);\nthis.hasFailures = false; // browser.manage().deleteAllCookies();\nbrowser.manage().timeouts().implicitlyWait(3000);\nbrowser.driver.manage().window().maximize();",
          "err": {},
          "uuid": "7035fa6e-3eee-4c7f-8c9c-7b8551be0220",
          "parentUUID": "7dd53156-e56d-4ca1-a47d-601c124a6177",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: ret",
          "fullTitle": "\"after all\" hook: ret",
          "timedOut": false,
          "duration": 596,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const score = this.hasFailures ? 'fail' : 'pass';\nif (this.sessionID) {\n  await fetch(`https://crossbrowsertesting.com/api/v3/selenium/${this.sessionID}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n    },\n    body: JSON.stringify({\n      action: 'set_score',\n      score\n    })\n  });\n}",
          "err": {},
          "uuid": "7c3b8ef6-c482-48ad-886d-9b767dd777c7",
          "parentUUID": "7dd53156-e56d-4ca1-a47d-601c124a6177",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (this.currentTest.isFailed() === true) {\n  this.hasFailures = true;\n  if (this.sessionID) {\n    await fetch(`https://crossbrowsertesting.com/api/v3/selenium/${this.sessionID}/snapshots`, {\n      method: 'POST',\n      headers: {\n        authorization: `Basic ${Buffer.from(`${process.env.CBT_USERNAME}:${process.env.CBT_APIKEY}`).toString('base64')}`\n      }\n    });\n  }\n}",
          "err": {},
          "uuid": "c09dc976-65bf-4fb1-a1a1-6df8988694fe",
          "parentUUID": "7dd53156-e56d-4ca1-a47d-601c124a6177",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook: ret",
          "fullTitle": "\"after each\" hook: ret",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (hooks.afterEach) { \n  return hooks.afterEach();\n}",
          "err": {},
          "uuid": "e8e90762-f3d1-4c57-a1f9-8817e93eb8e5",
          "parentUUID": "7dd53156-e56d-4ca1-a47d-601c124a6177",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "2e5109e1-0b27-4887-b579-01c4b7d4de37",
          "title": "SignUp page",
          "fullFile": "/Users/daniel.yang/Documents/Projects/one/e2e/sites/specs/auth/signup-spec.js",
          "file": "/e2e/sites/specs/auth/signup-spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook: ret",
              "fullTitle": "SignUp page \"before each\" hook: ret",
              "timedOut": false,
              "duration": 2451,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return authHelper.setCodeAndSubmit();",
              "err": {},
              "uuid": "b502fbe3-beba-4495-9b6c-3a23f60007d5",
              "parentUUID": "2e5109e1-0b27-4887-b579-01c4b7d4de37",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "C908184 - Verify signup with user which already existing in system throw error \"Unable to register. Please contact your local IT Administrator #smoke #sanity #stable",
              "fullTitle": "SignUp page C908184 - Verify signup with user which already existing in system throw error \"Unable to register. Please contact your local IT Administrator #smoke #sanity #stable",
              "timedOut": false,
              "duration": 1328,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"      <samp><span style=\\\"color:#0d9c0b\\\">âœ“</span></samp> Verify Signup with existing email show proper message (should throw an error)\"",
              "code": "await step('Verify Signup with existing email show proper message (should throw an error)', this, async () => {\n  await helper.waitForElementToBeVisible(login.signupBtn);\n  const chooseLogin = await browser.getCurrentUrl();\n  if (chooseLogin.includes(CONSTANTS.ROUTE.chooseLogin)) {\n    await helper.waitForElementToBeVisible(login.signupBtn);\n    await helper.clickElement(login.signupBtn);\n  }\n  await helper.waitForElementToBeVisible(signUp.email);\n  await helper.waitForElementToBeVisible(signUp.firstName);\n  await helper.waitForElementToBeVisible(signUp.lastName);\n  await helper.replaceInputValue(signUp.firstName, '', chance.name());\n  await helper.replaceInputValue(signUp.lastName, '', chance.name());\n  await helper.replaceInputValue(signUp.email, '', config.site.login.user);\n  await helper.waitForElementToBeVisible(signUp.requestAccess);\n  await helper.clickElement(signUp.requestAccess);\n  await helper.waitForElementToBeVisible(signUp.emailErrorMsg);\n  expect((await signUp.emailErrorMsg.getText())).to.include(CONSTANTS.ERROR_MESSAGE.unableToRegister);\n});",
              "err": {},
              "uuid": "8d7b6c10-01ec-4d66-bb16-ec7f6878b4f9",
              "parentUUID": "2e5109e1-0b27-4887-b579-01c4b7d4de37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C1834152 - Verify Signup with new email #smoke #sanity #stable",
              "fullTitle": "SignUp page C1834152 - Verify Signup with new email #smoke #sanity #stable",
              "timedOut": false,
              "duration": 3442,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"      <samp><span style=\\\"color:#0d9c0b\\\">âœ“</span></samp> Verify Signup with new email\"",
              "code": "await step('Verify Signup with new email', this, async () => {\n  const firstName = chance.name();\n  const lastName = chance.name();\n  const url = await browser.getCurrentUrl();\n  if (url.includes(CONSTANTS.ROUTE.chooseLogin)) {\n    await helper.waitForElementToBeVisible(login.signupBtn);\n    await helper.clickElement(login.signupBtn);\n  }\n  if (url.includes(CONSTANTS.ROUTE.requestNewUser)) {\n    await helper.waitForElementToBeVisible(signUp.email);\n    await helper.waitForElementToBeVisible(signUp.firstName);\n    await helper.waitForElementToBeVisible(signUp.lastName);\n  }\n  await helper.replaceInputAndSaveValue(signUp.firstName, '', firstName);\n  await helper.replaceInputAndSaveValue(signUp.lastName, '', lastName);\n  await helper.replaceInputAndSaveValue(signUp.email, '', chance.email());\n  await helper.waitForElementToBeVisible(signUp.requestAccess);\n  await helper.clickElement(signUp.requestAccess);\n  expect((await helper.waitForUrlToHave(CONSTANTS.ROUTE.requestNewUserSent))).to.be.true;\n});",
              "err": {},
              "uuid": "f935c9e7-532c-47b5-8ae5-385e254acf65",
              "parentUUID": "2e5109e1-0b27-4887-b579-01c4b7d4de37",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8d7b6c10-01ec-4d66-bb16-ec7f6878b4f9",
            "f935c9e7-532c-47b5-8ae5-385e254acf65"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4770,
          "root": false,
          "rootEmpty": false,
          "_timeout": 600000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 600000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "e2e/reports/json",
        "reportFilename": "mochawesome",
        "timestamp": null,
        "overwrite": false,
        "saveJson": true,
        "saveHtml": true
      },
      "version": "4.1.0"
    }
  }
}